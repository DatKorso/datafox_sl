"""
Streamlit page for Cards Matcher - —Ç–æ–≤–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏.

–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è:
- –ó–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ Ozon
- –ê–Ω–∞–ª–∏–∑–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ–±—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é/—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫

Updated: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.
"""
import streamlit as st
import pandas as pd
import os
from utils.db_connection import connect_db
from utils.config_utils import get_data_filter
from utils.db_crud import import_data_from_dataframe
from utils.db_schema import get_table_schema_definition
from utils.cards_matcher_ui_components import (
    render_brand_filter_info,
    render_file_selector_component,
    render_statistics_metrics,
    render_import_process_info,
    render_file_requirements_info,
    render_quick_data_preview,
    render_export_controls,
    render_error_message,
    render_success_message
)
import io
from datetime import datetime
import time
import threading

st.set_page_config(page_title="Cards Matcher - Marketplace Analyzer", layout="wide")
st.title("üÉè Cards Matcher - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏")
st.markdown("---")

# --- Database Connection ---
conn = connect_db()
if not conn:
    st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    if st.button("Go to Settings"):
        st.switch_page("pages/3_Settings.py")
    st.stop()

# --- Introduction ---
st.markdown("""
### üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è
Cards Matcher –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö:

**–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤**: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –æ–¥–Ω–æ–π —Å–µ—Ä–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏.

**–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤**: –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–∑ –æ–±—â–∏—Ö –≥—Ä—É–ø–ø –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.

**–ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤**: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ.
""")

# --- Tabs ---
tab1, tab2, tab3, tab4 = st.tabs(["üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ Ozon", "üîó –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "üÜï –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø"])

with tab1:
    st.header("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ Ozon")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Ñ–∞–π–ª—É
    render_file_requirements_info()
    
    # --- Brand Filter Information ---
    st.markdown("---")
    st.subheader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–µ–Ω–¥–æ–≤")
    
    brands_filter = get_data_filter("oz_category_products_brands")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å—Ç—Ä–µ –±—Ä–µ–Ω–¥–æ–≤
    render_brand_filter_info(brands_filter)
    
    # --- File Selection ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    selected_file_path = render_file_selector_component(
        config_key="oz_card_rating_xlsx",
        file_description="—Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ Ozon",
        file_types=['xlsx'],
        key_prefix="rating",
        help_text="—Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"
    )
    
    # --- Import Section ---
    if selected_file_path:
        st.markdown("---")
        st.subheader("üì• –ò–º–ø–æ—Ä—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.info("üìÅ **–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É**")
            st.caption(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {selected_file_path}")
            st.warning("‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")
        
        with col2:
            if st.button("üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏", type="primary", key="import_ratings"):
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
                    try:
                        # Read Excel file
                        schema_def = get_table_schema_definition("oz_card_rating")
                        read_params = schema_def.get("read_params", {})
                        
                        st.info("üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
                        import_df = pd.read_excel(selected_file_path, **read_params)
                        
                        if not import_df.empty:
                            # Show file statistics
                            st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(import_df)} –∑–∞–ø–∏—Å–µ–π")
                            
                            # Quick validation
                            required_cols = ['RezonitemID', '–ê—Ä—Ç–∏–∫—É–ª', '–†–µ–π—Ç–∏–Ω–≥ (1)', '–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤']
                            missing_cols = [col for col in required_cols if col not in import_df.columns]
                            
                            if missing_cols:
                                st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
                            else:
                                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                                stats = {
                                    'total_records': len(import_df),
                                    'unique_skus': len(import_df.get('RezonitemID', pd.Series()).dropna().unique()),
                                    'avg_rating': import_df.get('–†–µ–π—Ç–∏–Ω–≥ (1)', pd.Series()).mean()
                                }
                                
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                                render_statistics_metrics(stats, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞")
                                
                                # Migrate schema if needed
                                st.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã...")
                                from utils.db_crud import apply_brand_filter_for_rating, migrate_oz_card_rating_schema
                                migrate_oz_card_rating_schema(conn)
                                
                                # Apply brand filter if configured
                                st.info("üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤...")
                                import_df = apply_brand_filter_for_rating(import_df)
                                
                                if import_df.empty:
                                    st.warning("‚ö†Ô∏è –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
                                    st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
                                else:
                                    # Import data using existing infrastructure
                                    st.info("üíæ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É...")
                                    success, count, error_message = import_data_from_dataframe(
                                        con=conn,
                                        df=import_df,
                                        table_name="oz_card_rating"
                                    )
                                    
                                    if success:
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞
                                        render_success_message(
                                            "–†–µ–π—Ç–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!",
                                            {"üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π": count}
                                        )
                                        
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                                        render_quick_data_preview(import_df, "üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                                        
                                        # Cleanup temp file if it was uploaded
                                        if selected_file_path.startswith("temp_"):
                                            try:
                                                os.remove(selected_file_path)
                                            except:
                                                pass
                                    else:
                                        render_error_message(Exception(error_message), "–ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            st.error("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
                            
                    except Exception as e:
                        render_error_message(e, "–∏–º–ø–æ—Ä—Ç–∞")
                        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–º–ø–æ—Ä—Ç–∞
        render_import_process_info()
    else:
        st.info("üëÜ **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –≤—ã—à–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∞**")

with tab2:
    st.header("üîó –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    
    st.markdown("""
    ### ‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    
    **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã**: –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ wb_sku –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20). 
    –ì—Ä—É–ø–ø—ã, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ —ç—Ç–æ—Ç –ª–∏–º–∏—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã —Å –ª—É—á—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –ø–µ—Ä–≤—ã—Ö –ø–æ–¥–≥—Ä—É–ø–ø–∞—Ö.
    
    **üéØ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–ª—é sort**: –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–µ `sort` –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `punta_table`. 
    –¢–æ–≤–∞—Ä—ã —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏:
    - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø (–ø–æ–ø–∞–¥–∞—é—Ç –≤ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–≤—ã–º–∏)  
    - –ò—Å–∫–ª—é—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å)
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø (–ø–æ–ø–∞–¥–∞—é—Ç –≤ –ø–µ—Ä–≤—ã–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã)
    
    **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
    - üéØ **–£–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å**: –ì—Ä—É–ø–ø—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ª–µ–≥—á–µ —É–ø—Ä–∞–≤–ª—è—Ç—å
    - üìä **–ê–Ω–∞–ª–∏–∑**: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –≥—Ä—É–ø–ø
    - ‚öôÔ∏è **–ì–∏–±–∫–æ—Å—Ç—å**: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 100 —Ç–æ–≤–∞—Ä–æ–≤
    - üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è**: –ì—Ä—É–ø–ø—ã —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
    - üèÜ **–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è**: –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    """)
    
    # Check if rating data is available
    try:
        rating_check = conn.execute("SELECT COUNT(*) FROM oz_card_rating").fetchone()
        has_rating_data = rating_check and rating_check[0] > 0
    except:
        has_rating_data = False
    
    if not has_rating_data:
        st.info("üì≠ **–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤.** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ Ozon.")
        
        st.markdown("""
        ### –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
        
        #### üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤
        - –í–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ WB (wb_sku)
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ Ozon —á–µ—Ä–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
        - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ wb_sku –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö oz_sku
        - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏–∑ punta_table (–º–æ–¥–µ–ª—å, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –¥—Ä.)
        
        #### üìä –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø—ã
        - –í—ã—è–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º: —Ä–∞–∑–º–µ—Ä, —Ä–µ–π—Ç–∏–Ω–≥–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        """)
    else:
        # Import new helper functions
        from utils.cards_matcher_helpers import (
            get_punta_table_data_for_wb_skus,
            create_product_groups, get_available_grouping_columns, analyze_group_quality,
            test_wb_sku_connections
        )
        from utils.cross_marketplace_linker import CrossMarketplaceLinker
        
        st.markdown("### üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        
        # Input section for WB SKUs
        col1, col2 = st.columns([2, 1])
        
        with col1:
            wb_skus_input = st.text_area(
                "**–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã WB (wb_sku):**",
                height=150,
                help="–í–≤–µ–¥–∏—Ç–µ wb_sku —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.\n–ü—Ä–∏–º–µ—Ä: 123456 789012 –∏–ª–∏\n123456\n789012",
                placeholder="123456 789012\n345678\n901234"
            )
        
        with col2:
            st.info("""
            **üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
            
            1. –í–≤–æ–¥–∏—Ç–µ wb_sku
            2. –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ oz_sku —á–µ—Ä–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
            3. –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ wb_sku
            4. –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            """)
        
        # Parse WB SKUs from input
        wb_skus = []
        if wb_skus_input.strip():
            # Parse input - support spaces, commas, and newlines
            import re
            wb_skus_raw = re.split(r'[,\s\n]+', wb_skus_input.strip())
            wb_skus = [sku.strip() for sku in wb_skus_raw if sku.strip().isdigit()]
        
        if wb_skus:
            st.success(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(wb_skus)} –≤–∞–ª–∏–¥–Ω—ã—Ö wb_sku")
            
            # Show preview of parsed SKUs
            with st.expander("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö wb_sku"):
                st.write(", ".join(wb_skus[:20]) + ("..." if len(wb_skus) > 20 else ""))
        
        # Grouping configuration
        st.markdown("---")
        st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        
        # Get available columns from punta_table
        available_columns = get_available_grouping_columns(conn) if wb_skus else []
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            min_group_rating = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã", 
                0.0, 5.0, 3.0, 0.1,
                help="–ò–∑ –≥—Ä—É–ø–ø –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã wb_sku —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —ç—Ç–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"
            )
        
        with col2:
            max_wb_sku_per_group = st.number_input(
                "–ú–∞–∫—Å–∏–º—É–º wb_sku –≤ –≥—Ä—É–ø–ø–µ",
                min_value=1,
                max_value=100,
                value=20,
                step=1,
                help="–ì—Ä—É–ø–ø—ã, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ —ç—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä, –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã"
            )
        
        with col3:
            enable_sort_priority = st.checkbox(
                "üéØ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–ª—é sort",
                value=True,
                help="–¢–æ–≤–∞—Ä—ã —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 'sort' –∏–∑ punta_table –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø"
            )
        
        with col4:
            # Grouping columns selection
            if available_columns:
                st.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(available_columns)} –∫–æ–ª–æ–Ω–æ–∫ –≤ punta_table")
                
                grouping_columns = st.multiselect(
                    "–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑ punta_table:",
                    options=available_columns,
                    default=available_columns[:2] if len(available_columns) >= 2 else available_columns,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—ã"
                )
            else:
                grouping_columns = []
                if wb_skus:
                    st.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ punta_table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º.")
        
        # Analysis and grouping
        if wb_skus:
            st.markdown("---")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            with st.expander("üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", expanded=False):
                st.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö wb_sku")
                
                test_wb_sku = st.text_input(
                    "–¢–µ—Å—Ç–æ–≤—ã–π wb_sku:",
                    value="191826729",
                    help="–í–≤–µ–¥–∏—Ç–µ wb_sku –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö oz_sku"
                )
                
                if st.button("üîç –ù–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", key="test_linked"):
                    if test_wb_sku.strip():
                        with st.spinner("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤..."):
                            from utils.cards_matcher_helpers import test_wb_sku_connections
                            
                            # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                            test_results = test_wb_sku_connections(conn, test_wb_sku.strip(), show_debug=True)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                            
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("–®—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ WB", test_results['wb_barcodes_count'])
                            with col2:
                                st.metric("–°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", test_results['linked_products_count'])
                            with col3:
                                st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö OZ SKU", test_results['unique_oz_sku_count'])
                            with col4:
                                st.metric("–° —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏", test_results['rated_oz_sku_count'])
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            st.subheader("üîç –ü–æ—à–∞–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
                            for info in test_results['debug_info']:
                                if info.startswith("‚úÖ"):
                                    st.success(info)
                                elif info.startswith("‚ùå"):
                                    st.error(info)
                                else:
                                    st.info(info)
                            
                            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            if test_results['final_rating_data'] is not None and not test_results['final_rating_data'].empty:
                                st.subheader("üìã –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                                st.dataframe(test_results['final_rating_data'], use_container_width=True)
                                
                                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                row = test_results['final_rating_data'].iloc[0]
                                st.info(f"""
                                **WB SKU:** {row['wb_sku']}  
                                **–°–≤—è–∑–∞–Ω–Ω—ã–µ OZ SKU:** {row['oz_skus_list']}  
                                **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ OZ SKU:** {row['oz_sku_count']}  
                                **–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:** {row['avg_rating']}  
                                **–î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:** {row['min_rating']} - {row['max_rating']}  
                                **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤:** {row['total_reviews']}
                                """)
                            else:
                                st.warning("‚ùå –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã")
                    else:
                        st.warning("–í–≤–µ–¥–∏—Ç–µ wb_sku –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤", type="primary", key="create_groups"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø..."):
                    
                    # Step 1: Get WB SKU ratings using new centralized linker
                    linker = CrossMarketplaceLinker(conn)
                    wb_ratings_df = linker.get_links_with_ozon_ratings(wb_skus)
                    
                    if wb_ratings_df.empty:
                        st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã Ozon –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö wb_sku")
                        st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
                        st.info("‚Ä¢ –£–∫–∞–∑–∞–Ω–Ω—ã–µ wb_sku —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        st.info("‚Ä¢ –£ —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å—Ç—å –æ–±—â–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ Ozon")
                        st.info("‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö oz_sku")
                    else:
                        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è {len(wb_ratings_df)} wb_sku")
                        
                        # Step 2: Create groups
                        groups_df = create_product_groups(
                            conn=conn,
                            wb_skus=wb_skus,
                            grouping_columns=grouping_columns,
                            min_group_rating=min_group_rating,
                            max_wb_sku_per_group=max_wb_sku_per_group,
                            enable_sort_priority=enable_sort_priority
                        )
                        
                        if groups_df.empty:
                            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
                            st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
                            st.info("‚Ä¢ –°–Ω–∏–∑–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥")
                            st.info("‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∏–∑–∫–æ—Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
                            st.info("‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                        else:
                            # Step 3: Show results
                            st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                            
                            # Quality analysis
                            quality_metrics = analyze_group_quality(groups_df)
                            
                            if quality_metrics:
                                # Show summary metrics
                                col1, col2, col3, col4 = st.columns(4)
                                
                                with col1:
                                    st.metric("üîó –í—Å–µ–≥–æ –≥—Ä—É–ø–ø", quality_metrics['total_groups'])
                                
                                with col2:
                                    st.metric("üì¶ –¢–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", quality_metrics['total_products'])
                                
                                with col3:
                                    st.metric("‚≠ê –°—Ä. —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø", quality_metrics['avg_group_rating'])
                                
                                with col4:
                                    st.metric("üèÜ –û—Ç–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø", quality_metrics['excellent_groups_count'])
                                
                                # Show additional metrics about group sizes
                                if quality_metrics.get('max_group_size', 0) > 0:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
                                    priority_stats = quality_metrics.get('priority_stats', {})
                                    has_priority = priority_stats.get('has_priority_data', False)
                                    
                                    if has_priority:
                                        # 5 –∫–æ–ª–æ–Ω–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è
                                        col1, col2, col3, col4, col5 = st.columns(5)
                                        
                                        with col5:
                                            st.metric("üéØ –°—Ä. –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", priority_stats['avg_sort_value'])
                                    else:
                                        # 4 –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
                                        col1, col2, col3, col4 = st.columns(4)
                                    
                                    with col1:
                                        st.metric("üìè –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã", quality_metrics['avg_group_size'])
                                    
                                    with col2:
                                        st.metric("üìä –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã", quality_metrics['max_group_size'])
                                    
                                    with col3:
                                        split_count = quality_metrics.get('split_groups_count', 0)
                                        st.metric("‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø", split_count)
                                    
                                    with col4:
                                        large_count = quality_metrics.get('large_groups_count', 0)
                                        st.metric("üìà –ë–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø", large_count)
                                    
                                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
                                    if has_priority:
                                        st.markdown("### üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏")
                                        
                                        col1, col2, col3 = st.columns(3)
                                        
                                        with col1:
                                            st.metric("üìä –¢–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º", priority_stats['products_with_priority'])
                                        
                                        with col2:
                                            st.metric("üîù –ú–∞–∫—Å. –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", priority_stats['max_sort_value'])
                                        
                                        with col3:
                                            st.metric("‚¨ÜÔ∏è –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö", priority_stats['high_priority_products'])
                                
                                # Show detailed results table
                                st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º")
                                
                                # Prepare display columns
                                display_columns = [
                                    'group_id', 'wb_sku', 'avg_rating', 'oz_sku_count', 
                                    'oz_skus_list', 'total_reviews', 'wb_count', 
                                    'group_avg_rating', 'total_oz_sku_count', 'group_total_reviews',
                                    'group_recommendation'
                                ]
                                
                                # Add sort column if priority is enabled and column exists
                                if enable_sort_priority and 'sort' in groups_df.columns:
                                    display_columns.insert(2, 'sort')  # Insert after wb_sku
                                
                                # Add grouping columns if they exist
                                if grouping_columns:
                                    for col in grouping_columns:
                                        if col in groups_df.columns and col not in display_columns:
                                            display_columns.insert(-1, col)  # Insert before recommendation
                                
                                # Filter available columns
                                available_display_columns = [col for col in display_columns if col in groups_df.columns]
                                
                                # Configure column names for display
                                column_config = {
                                    'group_id': st.column_config.NumberColumn('–ì—Ä—É–ø–ø–∞ ‚Ññ', width="small"),
                                    'wb_sku': 'WB SKU',
                                    'avg_rating': st.column_config.NumberColumn('–†–µ–π—Ç–∏–Ω–≥ WB', format="%.2f"),
                                    'oz_sku_count': st.column_config.NumberColumn('–ö–æ–ª-–≤–æ OZ SKU', width="small"),
                                    'oz_skus_list': st.column_config.TextColumn('OZ SKU —Å–ø–∏—Å–æ–∫', width="medium"),
                                    'total_reviews': st.column_config.NumberColumn('–û—Ç–∑—ã–≤–æ–≤', width="small"),
                                    'wb_count': st.column_config.NumberColumn('WB –≤ –≥—Ä—É–ø–ø–µ', width="small"),
                                    'group_avg_rating': st.column_config.NumberColumn('–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã', format="%.2f"),
                                    'total_oz_sku_count': st.column_config.NumberColumn('–í—Å–µ–≥–æ OZ SKU', width="small"),
                                    'group_total_reviews': st.column_config.NumberColumn('–û—Ç–∑—ã–≤–æ–≤ –≥—Ä—É–ø–ø—ã', width="small"),
                                    'group_recommendation': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'
                                }
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ sort –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                                if 'sort' in groups_df.columns:
                                    column_config['sort'] = st.column_config.NumberColumn('üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', format="%.1f", width="small")
                                
                                st.dataframe(
                                    groups_df[available_display_columns],
                                    use_container_width=True,
                                    hide_index=True,
                                    column_config=column_config
                                )
                                
                                # Group analysis by recommendations
                                st.markdown("### üéØ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
                                
                                recommendations = groups_df['group_recommendation'].value_counts()
                                
                                for recommendation, count in recommendations.items():
                                    color = "green" if "–û—Ç–ª–∏—á–Ω–∞—è" in recommendation else \
                                           "blue" if "–•–æ—Ä–æ—à–∞—è" in recommendation else \
                                           "orange" if "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è" in recommendation else \
                                           "red" if "–ò—Å–∫–ª—é—á–∏—Ç—å" in recommendation else "gray"
                                    
                                    st.markdown(f":{color}[**{recommendation}**: {count} –≥—Ä—É–ø–ø]")
                                
                                # Additional analysis for group sizes
                                if quality_metrics.get('split_groups_count', 0) > 0 or quality_metrics.get('large_groups_count', 0) > 0:
                                    st.markdown("### üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä—É–ø–ø")
                                    
                                    size_metrics = []
                                    if quality_metrics.get('single_product_groups', 0) > 0:
                                        size_metrics.append(f"üî∏ **–û–¥–∏–Ω–æ—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã**: {quality_metrics['single_product_groups']}")
                                    if quality_metrics.get('small_groups', 0) > 0:
                                        size_metrics.append(f"üîπ **–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã** (2-5 —Ç–æ–≤–∞—Ä–æ–≤): {quality_metrics['small_groups']}")
                                    if quality_metrics.get('medium_groups', 0) > 0:
                                        size_metrics.append(f"üî∑ **–°—Ä–µ–¥–Ω–∏–µ –≥—Ä—É–ø–ø—ã** (6-15 —Ç–æ–≤–∞—Ä–æ–≤): {quality_metrics['medium_groups']}")
                                    if quality_metrics.get('large_groups_size_count', 0) > 0:
                                        size_metrics.append(f"üî∂ **–ë–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã** (16+ —Ç–æ–≤–∞—Ä–æ–≤): {quality_metrics['large_groups_size_count']}")
                                    
                                    for metric in size_metrics:
                                        st.markdown(metric)
                                    
                                    if quality_metrics.get('split_groups_count', 0) > 0:
                                        st.info(f"‚ÑπÔ∏è **{quality_metrics['split_groups_count']} –≥—Ä—É–ø–ø –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ** –≤ —Å–≤—è–∑–∏ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞ {max_wb_sku_per_group} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ")
                                
                                # Export functionality
                                st.markdown("---")
                                col1, col2 = st.columns(2)
                                
                                with col1:
                                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                                    render_export_controls(groups_df, "product_groups", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                                
                                with col2:
                                    st.info("üí° **–°–æ–≤–µ—Ç**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ")
        
        else:
            st.info("üëÜ **–í–≤–µ–¥–∏—Ç–µ wb_sku –≤—ã—à–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤**")

with tab3:
    st.header("üÜï –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    
    st.markdown("""
    ### üöÄ –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    
    **–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - üèÜ **–£–º–Ω–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è**: –¢–æ–≤–∞—Ä—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º `sort`, –∑–∞—Ç–µ–º —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    - ‚≠ê **–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ = –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞**: –¢–æ–≤–∞—Ä—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
    - üìä **–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º)
    - üë• **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—É**: –ú–∞–ª—å—á–∏–∫–∏ –∏ –¥–µ–≤–æ—á–∫–∏ –≤—Å–µ–≥–¥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
    - üö´ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∞–∫–∞**: –¢–æ–≤–∞—Ä—ã —Å "–ë—Ä–∞–∫SH" –ø–æ–ª—É—á–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
    - üìã **–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å**: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–µ –≥—Ä—É–ø–ø—ã, —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Å–≤—è–∑–µ–π –∏ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    
    **–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:**
    1. –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ wb_sku –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    2. –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ Ozon –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    3. –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ wb_sku
    4. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π sort ‚Üí —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ ‚Üí –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    5. **–í–ê–ñ–ù–û**: –¢–æ–≤–∞—Ä—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ‚â• –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ ‚Üí –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    6. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    7. –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–∏–∑–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    8. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ merge_on_card
    
    **üí° –ü—Ä–∏–Ω—Ü–∏–ø "–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ = –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞":**
    - –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –∏–º–µ–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞, –æ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ
    - –¢–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–∞—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π wb_sku –∫–∞–∫ –∫–æ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (merge_on_card)
    - –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ "—Ä–∞–∑–±–∞–≤–ª—è—é—Ç—Å—è" –º–µ–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
    """)
    
    # Check if rating data is available
    try:
        rating_check = conn.execute("SELECT COUNT(*) FROM oz_card_rating").fetchone()
        has_rating_data = rating_check and rating_check[0] > 0
    except:
        has_rating_data = False
    
    if not has_rating_data:
        st.warning("üì≠ **–î–ª—è —Ä–∞–±–æ—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤.** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ Ozon.")
    else:
        # Import the new advanced helper function
        from utils.cards_matcher_helpers import (
            create_advanced_product_groups,
            get_available_grouping_columns
        )
        
        st.markdown("---")
        st.markdown("### üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        
        # Input section for WB SKUs
        col1, col2 = st.columns([2, 1])
        
        with col1:
            wb_skus_input_advanced = st.text_area(
                "**–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã WB (wb_sku):**",
                height=120,
                help="–í–≤–µ–¥–∏—Ç–µ wb_sku —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ",
                placeholder="123456 789012\n345678\n901234",
                key="advanced_wb_skus"
            )
            
        with col2:
            st.info("""
            **üéØ –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:**
            
            1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
            2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ gender+
            3. –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∞–∫–∞
            5. –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            """)
        
        # Parse WB SKUs from input
        wb_skus_advanced = []
        if wb_skus_input_advanced.strip():
            import re
            wb_skus_raw = re.split(r'[,\s\n]+', wb_skus_input_advanced.strip())
            wb_skus_advanced = [sku.strip() for sku in wb_skus_raw if sku.strip().isdigit()]
        
        if wb_skus_advanced:
            st.success(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(wb_skus_advanced)} –≤–∞–ª–∏–¥–Ω—ã—Ö wb_sku")
            
            # Show preview of parsed SKUs
            with st.expander("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö wb_sku"):
                st.write(", ".join(wb_skus_advanced[:20]) + ("..." if len(wb_skus_advanced) > 20 else ""))
        
        # Advanced configuration
        st.markdown("---")
        st.markdown("### ‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            min_group_rating_advanced = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã", 
                0.0, 5.0, 4.0, 0.1,
                help="–ì—Ä—É–ø–ø—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –Ω–∏–∂–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏",
                key="advanced_min_rating"
            )
        
        with col2:
            max_wb_sku_per_group_advanced = st.number_input(
                "–ú–∞–∫—Å–∏–º—É–º wb_sku –≤ –≥—Ä—É–ø–ø–µ",
                min_value=1,
                max_value=50,
                value=15,
                step=1,
                help="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                key="advanced_max_group"
            )
        
        with col3:
            enable_sort_priority_advanced = st.checkbox(
                "üéØ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ sort",
                value=True,
                help="–¢–æ–≤–∞—Ä—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º sort –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                key="advanced_sort_priority"
            )
        
        with col4:
            # Category filter
            wb_category_filter = st.text_input(
                "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ WB",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–±—É–≤—å",
                help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                key="advanced_category_filter"
            )
        
        # Important notice about high rating logic
        st.info(f"""
        **üéØ –í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å:** –¢–æ–≤–∞—Ä—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º **‚â• {min_group_rating_advanced}** –±—É–¥—É—Ç –ø–æ–º–µ—â–µ–Ω—ã –≤ **–æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã**.
        
        - –¢–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–∞—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π wb_sku –∫–∞–∫ –∫–æ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (merge_on_card)
        - –û–Ω–∏ –ù–ï –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        - –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º **< {min_group_rating_advanced}** –±—É–¥—É—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
        """)
        
        # Grouping columns selection
        st.markdown("#### üîó –ü–æ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        
        if wb_skus_advanced:
            available_columns = get_available_grouping_columns(conn)
            
            if available_columns:
                # Remove gender from options since it's mandatory
                grouping_options = [col for col in available_columns if col != 'gender']
                
                st.info("üîí **–ü–æ–ª–µ 'gender' –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–∞–ª—å—á–∏–∫–∏/–¥–µ–≤–æ—á–∫–∏)")
                
                grouping_columns_advanced = st.multiselect(
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:",
                    options=grouping_options,
                    default=['season', 'material'] if all(col in grouping_options for col in ['season', 'material']) else grouping_options[:2],
                    help="–¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ gender + –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—è–º",
                    key="advanced_grouping_cols"
                )
            else:
                grouping_columns_advanced = []
                st.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ punta_table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")
        else:
            grouping_columns_advanced = []
        
        # Advanced grouping execution
        if wb_skus_advanced:
            st.markdown("---")
            
            # Run advanced grouping button
            col1, col2 = st.columns([2, 1])
            
            with col1:
                run_grouping = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É", type="primary", key="run_advanced_grouping")
            
            with col2:
                if wb_skus_advanced and len(wb_skus_advanced) > 100:
                    st.info("‚è≥ **–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö**\n\n–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ >100 —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –ø–æ—à–∞–≥–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π.")
            
            if run_grouping:
                if not wb_skus_advanced:
                    st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ wb_sku –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    wb_count = len(wb_skus_advanced)
                    estimated_time = wb_count * 0.5  # –ü—Ä–∏–º–µ—Ä–Ω–æ 0.5 —Å–µ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä
                    
                    if wb_count > 50:
                        st.info(f"üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {wb_count} —Ç–æ–≤–∞—Ä–æ–≤. –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time:.0f}-{estimated_time*2:.0f} —Å–µ–∫—É–Ω–¥")
                    
                    with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ..."):
                        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏–Ω–Ω–µ—Ä–∞
                    
                    try:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                        start_time = time.time()
                        progress_bar = st.progress(0)
                        status_placeholder = st.empty()
                        
                        def update_progress(progress: float, status: str):
                            """Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
                            elapsed = time.time() - start_time
                            progress_bar.progress(progress)
                            status_placeholder.info(f"‚è≥ {status} (‚è±Ô∏è {elapsed:.1f}—Å)")
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å –∫–æ–ª–±—ç–∫–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        groups_df, no_links_df, low_rating_df = create_advanced_product_groups(
                            conn,
                            wb_skus_advanced,
                            grouping_columns_advanced,
                            min_group_rating_advanced,
                            max_wb_sku_per_group_advanced,
                            enable_sort_priority_advanced,
                            wb_category_filter.strip() if wb_category_filter else None,
                            progress_callback=update_progress
                        )
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        total_time = time.time() - start_time
                        
                        # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        progress_bar.empty()
                        status_placeholder.success(f"‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")
                        
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                        def clear_status():
                            """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã"""
                            import time
                            import streamlit as st
                            time.sleep(3)
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç Streamlit –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                                if hasattr(st, '_get_session_state') and st.session_state:
                                    status_placeholder.empty()
                                    progress_placeholder.empty()
                            except Exception as e:
                                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ UI
                                pass
                        
                        threading.Thread(target=clear_status, daemon=True).start()
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                        st.session_state['advanced_groups_df'] = groups_df
                        st.session_state['advanced_no_links_df'] = no_links_df
                        st.session_state['advanced_low_rating_df'] = low_rating_df
                        st.session_state['advanced_results_timestamp'] = datetime.now().strftime('%Y%m%d_%H%M')
                        st.session_state['advanced_results_ready'] = True
                        st.session_state['advanced_wb_skus_count'] = len(wb_skus_advanced)
                        st.session_state['advanced_min_group_rating'] = min_group_rating_advanced
                        # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ wb_sku –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        st.session_state['advanced_input_wb_skus'] = wb_skus_advanced.copy()
                    
                    except Exception as e:
                        render_error_message(e, "—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ session_state (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        if st.session_state.get('advanced_results_ready', False):
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            saved_groups_df = st.session_state.get('advanced_groups_df', pd.DataFrame())
            saved_no_links_df = st.session_state.get('advanced_no_links_df', pd.DataFrame())
            saved_low_rating_df = st.session_state.get('advanced_low_rating_df', pd.DataFrame())
            saved_wb_skus_count = st.session_state.get('advanced_wb_skus_count', 0)
            saved_min_group_rating = st.session_state.get('advanced_min_group_rating', 0.0)
            timestamp = st.session_state.get('advanced_results_timestamp', datetime.now().strftime('%Y%m%d_%H%M'))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
            
            # Summary metrics
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üì¶ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", saved_wb_skus_count)
            
            with col2:
                successful_groups = len(saved_groups_df['group_id'].unique()) if not saved_groups_df.empty else 0
                st.metric("‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≥—Ä—É–ø–ø", successful_groups)
            
            with col3:
                no_links_count = len(saved_no_links_df) if not saved_no_links_df.empty else 0
                st.metric("‚ùå –ë–µ–∑ —Å–≤—è–∑–µ–π", no_links_count)
            
            with col4:
                low_rating_count = len(saved_low_rating_df) if not saved_low_rating_df.empty else 0
                st.metric("‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥", low_rating_count)
            
            # Show successful groups
            if not saved_groups_df.empty:
                st.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(saved_groups_df)} –≥—Ä—É–ø–ø –∏–∑ {saved_groups_df['group_id'].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø")
                
                # Calculate statistics
                total_wb_count = saved_groups_df['wb_count'].sum()
                high_rating_groups = saved_groups_df[saved_groups_df['group_recommendation'] == '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞']['group_id'].nunique()
                compensated_groups = saved_groups_df[saved_groups_df['group_recommendation'] != '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞']['group_id'].nunique()
                defective_groups = saved_groups_df[saved_groups_df['is_defective'] == True]['group_id'].nunique()
                
                # Enhanced metrics
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("–û–±—â–∏–π –æ—Ö–≤–∞—Ç", f"{total_wb_count} wb_sku")
                with col2:
                    st.metric("üåü –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"{high_rating_groups} –≥—Ä—É–ø–ø", 
                            help="–û—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º")
                with col3:
                    st.metric("üîß –ö–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", f"{compensated_groups} –≥—Ä—É–ø–ø",
                            help="–ì—Ä—É–ø–ø—ã —Å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–µ–π –Ω–∏–∑–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞")
                with col4:
                    if defective_groups > 0:
                        st.metric("üö´ –ë—Ä–∞–∫", f"{defective_groups} –≥—Ä—É–ø–ø")
                    else:
                        st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"{saved_groups_df['group_avg_rating'].mean():.2f}")
                
                # Separate high rating and compensated groups for clearer display
                high_rating_df = saved_groups_df[saved_groups_df['group_recommendation'] == '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞']
                other_groups_df = saved_groups_df[saved_groups_df['group_recommendation'] != '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞']
                
                # Display high rating groups separately
                if not high_rating_df.empty:
                    st.markdown("#### üåü –¢–æ–≤–∞—Ä—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã)")
                    st.info(f"–≠—Ç–∏ {len(high_rating_df)} —Ç–æ–≤–∞—Ä–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö —Ç–∞–∫ –∫–∞–∫ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥ ‚â• {saved_min_group_rating}")
                    
                    # Show as separate groups
                    display_columns = ['wb_sku']
                    if 'oz_vendor_code' in high_rating_df.columns:
                        display_columns.append('oz_vendor_code')
                    display_columns.extend(['merge_on_card', 'avg_rating', 'gender'])
                    
                    high_rating_display = high_rating_df[display_columns].copy()
                    column_names = ['WB SKU']
                    if 'oz_vendor_code' in high_rating_df.columns:
                        column_names.append('–ê—Ä—Ç–∏–∫—É–ª Ozon')
                    column_names.extend(['–ö–æ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è', '–†–µ–π—Ç–∏–Ω–≥', '–ü–æ–ª'])
                    
                    high_rating_display.columns = column_names
                    
                    st.dataframe(
                        high_rating_display,
                        use_container_width=True,
                        height=min(200, len(high_rating_display) * 35 + 50)
                    )
                
                # Display compensated/other groups
                if not other_groups_df.empty:
                    st.markdown("#### üîß –ö–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã")
                    
                    # Group by merge_on_card and show group statistics
                    group_stats = []
                    for merge_code, group_data in other_groups_df.groupby('merge_on_card'):
                        group_stats.append({
                            '–ö–æ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è': merge_code,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤': len(group_data),
                            '–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã': group_data['group_avg_rating'].iloc[0],
                            '–¢–∏–ø': group_data['group_recommendation'].iloc[0],
                            '–ü–æ–ª': group_data['gender'].iloc[0] if 'gender' in group_data.columns else '–ù–µ —É–∫–∞–∑–∞–Ω'
                        })
                    
                    group_stats_df = pd.DataFrame(group_stats)
                    st.dataframe(
                        group_stats_df,
                        use_container_width=True,
                        height=min(300, len(group_stats_df) * 35 + 50)
                    )
                    
                    # Detailed view option
                    if st.checkbox("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø", key="show_detailed_advanced"):
                        for merge_code, group_data in other_groups_df.groupby('merge_on_card'):
                            with st.expander(f"–ì—Ä—É–ø–ø–∞ {merge_code} ({len(group_data)} —Ç–æ–≤–∞—Ä–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥: {group_data['group_avg_rating'].iloc[0]:.2f})"):
                                # –í–∫–ª—é—á–∞–µ–º oz_vendor_code –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ (–Ω–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏)
                                detail_columns = ['wb_sku']
                                if 'oz_vendor_code' in group_data.columns:
                                    detail_columns.append('oz_vendor_code')
                                detail_columns.extend(['avg_rating', 'gender'])
                                
                                detailed_data = group_data[detail_columns].copy()
                                column_names = ['WB SKU']
                                if 'oz_vendor_code' in group_data.columns:
                                    column_names.append('–ê—Ä—Ç–∏–∫—É–ª Ozon')
                                column_names.extend(['–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', '–ü–æ–ª'])
                                
                                detailed_data.columns = column_names
                                st.dataframe(detailed_data, use_container_width=True)
                
                # Export functionality with clear separation
                st.markdown("#### üìÅ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≥—Ä—É–ø–ø (Excel)", key="export_all_excel_advanced"):
                        try:
                            excel_buffer = io.BytesIO()
                            with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                                if not saved_groups_df.empty:
                                    high_rating_df_export = saved_groups_df[saved_groups_df['group_recommendation'] == '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞']
                                    other_groups_df_export = saved_groups_df[saved_groups_df['group_recommendation'] != '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞']
                                    
                                    if not high_rating_df_export.empty:
                                        high_rating_df_export.to_excel(writer, sheet_name='–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥', index=False)
                                    if not other_groups_df_export.empty:
                                        other_groups_df_export.to_excel(writer, sheet_name='–ö–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', index=False)
                                if not saved_no_links_df.empty:
                                    saved_no_links_df.to_excel(writer, sheet_name='–ë–µ–∑ —Å–≤—è–∑–µ–π', index=False)
                                if not saved_low_rating_df.empty:
                                    saved_low_rating_df.to_excel(writer, sheet_name='–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥', index=False)
                            
                            st.download_button(
                                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
                                data=excel_buffer.getvalue(),
                                file_name=f"—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è_–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞_{timestamp}.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                key="download_excel_advanced"
                            )
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {e}")
                
                with col2:
                    if st.button("üìù –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≥—Ä—É–ø–ø (CSV)", key="export_all_csv_advanced"):
                        try:
                            if not saved_groups_df.empty:
                                csv_data = saved_groups_df.to_csv(index=False).encode('utf-8')
                                st.download_button(
                                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
                                    data=csv_data,
                                    file_name=f"—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è_–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞_{timestamp}.csv",
                                    mime="text/csv",
                                    key="download_csv_advanced"
                                )
                            else:
                                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV: {e}")
                
                with col3:
                    # Summary export option
                    if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–¥–∫–∏", key="export_summary_advanced"):
                        try:
                            summary_data = []
                            
                            if not saved_groups_df.empty:
                                high_rating_df_summary = saved_groups_df[saved_groups_df['group_recommendation'] == '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞']
                                other_groups_df_summary = saved_groups_df[saved_groups_df['group_recommendation'] != '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞']
                                
                                # Add high rating groups summary
                                for _, row in high_rating_df_summary.iterrows():
                                    summary_data.append({
                                        'wb_sku': row['wb_sku'],
                                        'merge_on_card': row['merge_on_card'],
                                        'type': '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥',
                                        'group_size': 1,
                                        'group_rating': row['avg_rating']
                                    })
                                
                                # Add other groups summary
                                for merge_code, group_data in other_groups_df_summary.groupby('merge_on_card'):
                                    summary_data.append({
                                        'wb_sku': ', '.join(group_data['wb_sku'].astype(str)),
                                        'merge_on_card': merge_code,
                                        'type': group_data['group_recommendation'].iloc[0],
                                        'group_size': len(group_data),
                                        'group_rating': group_data['group_avg_rating'].iloc[0]
                                    })
                            
                            if summary_data:
                                summary_df = pd.DataFrame(summary_data)
                                csv_data = summary_df.to_csv(index=False).encode('utf-8')
                                
                                st.download_button(
                                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É",
                                    data=csv_data,
                                    file_name=f"—Å–≤–æ–¥–∫–∞_–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏_{timestamp}.csv",
                                    mime="text/csv",
                                    key="download_summary_advanced"
                                )
                            else:
                                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            
            else:
                st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã")
            
            # Show items without links
            if not saved_no_links_df.empty:
                st.markdown("#### ‚ùå –¢–æ–≤–∞—Ä—ã –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Ozon")
                st.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(saved_no_links_df)} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–≤—è–∑–µ–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏ Ozon")
                
                st.dataframe(
                    saved_no_links_df,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        'wb_sku': st.column_config.TextColumn('WB SKU', width="medium"),
                        'issue': st.column_config.TextColumn('–ü—Ä–æ–±–ª–µ–º–∞', width="large")
                    }
                )
                
                render_export_controls(saved_no_links_df, "no_links_items", "—Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Å–≤—è–∑–µ–π")
            
            # Show items with low rating - –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª
            st.markdown("#### ‚≠ê –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º")
            
            if not saved_low_rating_df.empty:
                st.error(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(saved_low_rating_df)} —Ç–æ–≤–∞—Ä–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –£–î–ê–õ–û–°–¨ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ {saved_min_group_rating}")
                
                st.dataframe(
                    saved_low_rating_df,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        'wb_sku': st.column_config.TextColumn('WB SKU', width="medium"),
                        'avg_rating': st.column_config.NumberColumn('–†–µ–π—Ç–∏–Ω–≥', format="%.2f", width="small"),
                        'issue': st.column_config.TextColumn('–ü—Ä–æ–±–ª–µ–º–∞', width="large")
                    }
                )
                
                render_export_controls(saved_low_rating_df, "low_rating_items", "—Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º")
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
                processed_count = saved_wb_skus_count - (len(saved_no_links_df) if not saved_no_links_df.empty else 0)
                
                if not saved_groups_df.empty:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç: —Å—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã, –∞ –Ω–µ —Ç–æ–≤–∞—Ä—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
                    unique_groups = saved_groups_df['merge_on_card'].nunique()
                    high_rating_groups = saved_groups_df[saved_groups_df['group_recommendation'] == '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞']['merge_on_card'].nunique()
                    compensated_groups = saved_groups_df[saved_groups_df['group_recommendation'] != '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞']['merge_on_card'].nunique()
                    
                    # –í–ê–ñ–ù–û: –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã–µ wb_sku –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–∞–ª–∏ –≤ –≥—Ä—É–ø–ø—ã
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ö–æ–¥–Ω—ã—Ö wb_sku –∏–∑ —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    input_wb_skus = set()
                    if 'advanced_input_wb_skus' in st.session_state:
                        input_wb_skus = set(st.session_state['advanced_input_wb_skus'])
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ merge_on_card - —ç—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                    # (—ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ —Å–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞)
                    if not input_wb_skus:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ merge_on_card –ø–µ—Ä–≤–∏—á–Ω—ã–µ wb_sku
                        primary_wb_skus = set()
                        for merge_code in saved_groups_df['merge_on_card'].unique():
                            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø merge_on_card —Å–æ–¥–µ—Ä–∂–∏—Ç wb_sku –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                            if not str(merge_code).startswith('–ë—Ä–∞–∫SH_'):
                                primary_wb_skus.add(str(merge_code))
                        input_wb_skus = primary_wb_skus
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–∞–ª–æ –≤ –≥—Ä—É–ø–ø—ã
                    successfully_grouped_input_items = 0
                    for wb_sku in input_wb_skus:
                        if str(wb_sku) in saved_groups_df['wb_sku'].astype(str).values or \
                           str(wb_sku) in saved_groups_df['merge_on_card'].astype(str).values:
                            successfully_grouped_input_items += 1
                    
                    st.success(f"‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:")
                    st.write(f"‚Ä¢ **{unique_groups} –≥—Ä—É–ø–ø —Å–æ–∑–¥–∞–Ω–æ** ({high_rating_groups} —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º + {compensated_groups} —Å–æ —Å–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º)")
                    st.write(f"‚Ä¢ **{successfully_grouped_input_items} –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤** –∏–∑ {processed_count} —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–≤—è–∑—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å —Å–≤—è–∑—è–º–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö
                    if processed_count != successfully_grouped_input_items:
                        st.warning(f"‚ö†Ô∏è –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –ø–æ–¥—Å—á–µ—Ç–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤! –û–∂–∏–¥–∞–ª–æ—Å—å {processed_count}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successfully_grouped_input_items}")
                else:
                    st.info("‚ÑπÔ∏è –ì—Ä—É–ø–ø –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
            
            # Summary and recommendations
            st.markdown("---")
            st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            if not saved_groups_df.empty:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ success_rate: —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                input_wb_skus = set()
                if 'advanced_input_wb_skus' in st.session_state:
                    input_wb_skus = set(st.session_state['advanced_input_wb_skus'])
                
                if input_wb_skus:
                    # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ø–∞–ª–æ –≤ –≥—Ä—É–ø–ø—ã
                    successfully_grouped_count = 0
                    for wb_sku in input_wb_skus:
                        if str(wb_sku) in saved_groups_df['wb_sku'].astype(str).values or \
                           str(wb_sku) in saved_groups_df['merge_on_card'].astype(str).values:
                            successfully_grouped_count += 1
                    
                    success_rate = (successfully_grouped_count / len(input_wb_skus)) * 100
                else:
                    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
                    success_rate = len(saved_groups_df['wb_sku'].unique()) / saved_wb_skus_count * 100
                
                if success_rate >= 80:
                    st.success(f"üéâ **–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!** {success_rate:.1f}% –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã")
                elif success_rate >= 60:
                    st.info(f"üëç **–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!** {success_rate:.1f}% –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã")
                else:
                    st.warning(f"‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:** –¢–æ–ª—å–∫–æ {success_rate:.1f}% –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã")
            
            if not saved_no_links_df.empty:
                st.info("üí° **–î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–≤—è–∑–µ–π:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ–±—â–∏—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ Ozon")
            
            if not saved_low_rating_df.empty:
                st.info("üí° **–î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º:** –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–ª–∏ –ø–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.markdown("---")
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", key="clear_advanced_results", help="–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"):
                for key in ['advanced_results_ready', 'advanced_groups_df', 'advanced_no_links_df', 'advanced_low_rating_df', 'advanced_results_timestamp', 'advanced_wb_skus_count', 'advanced_min_group_rating', 'advanced_input_wb_skus']:
                    if key in st.session_state:
                        del st.session_state[key]
                st.rerun()
        
        else:
            st.info("üëÜ **–í–≤–µ–¥–∏—Ç–µ wb_sku –≤—ã—à–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π**")

with tab4:
    st.header("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø")
    
    st.markdown("""
    ### üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `oz_category_products`.
    
    **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø
    - –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø—ã —Å –ø–æ–∏—Å–∫–æ–º —Å–≤—è–∑–µ–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏ WB
    - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
    """)
    
    # Import the helper functions
    from utils.existing_groups_helpers import (
        get_existing_groups_statistics,
        get_existing_groups_list,
        get_group_details_with_wb_connections,
        analyze_group_wb_connections,
        search_groups_by_criteria,
        update_oz_sku_from_oz_products,
        get_oz_sku_update_statistics,
        get_group_products_details
    )
    
    # --- Statistics Section ---
    st.markdown("---")
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø")
    
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."):
        stats = get_existing_groups_statistics(conn)
    
    if stats:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤", stats.get('total_products', 0))
        
        with col2:
            st.metric("üîó –í—Å–µ–≥–æ –≥—Ä—É–ø–ø", stats.get('total_groups', 0))
        
        with col3:
            st.metric("üë• –ì—Ä—É–ø–ø —Å 2+ —Ç–æ–≤–∞—Ä–∞–º–∏", stats.get('groups_with_2_plus', 0))
        
        with col4:
            avg_size = stats.get('avg_group_size', 0)
            st.metric("üìè –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã", f"{avg_size}" if avg_size > 0 else "N/A")
        
        # Additional metrics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö vendor –∫–æ–¥–æ–≤", stats.get('unique_vendor_codes', 0))
        
        with col2:
            st.metric("üÜî –¢–æ–≤–∞—Ä–æ–≤ —Å OZ SKU", stats.get('products_with_oz_sku', 0))
        
        with col3:
            st.metric("üìà –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã", stats.get('max_group_size', 0))
        
        with col4:
            st.metric("üìâ –ú–∏–Ω. —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã", stats.get('min_group_size', 0))
        
        # Group size distribution
        if stats.get('groups_with_2_plus', 0) > 0:
            st.markdown("### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ —Ä–∞–∑–º–µ—Ä—É")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                small = stats.get('small_groups', 0)
                st.metric("üîπ –ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã (2-5)", small)
            
            with col2:
                medium = stats.get('medium_groups', 0)
                st.metric("üî∑ –°—Ä–µ–¥–Ω–∏–µ –≥—Ä—É–ø–ø—ã (6-15)", medium)
            
            with col3:
                large = stats.get('large_groups', 0)
                st.metric("üî∂ –ë–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã (16+)", large)
    else:
        st.info("üì≠ –î–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ oz_category_products –ø—É—Å—Ç–∞")
    
    # --- OZ SKU Update Section ---
    st.markdown("---")
    st.subheader("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è oz_sku")
    
    st.markdown("""
    **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ**: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π `oz_sku` –≤ —Ç–∞–±–ª–∏—Ü–µ `oz_category_products` 
    –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π `oz_vendor_code` —Å —Ç–∞–±–ª–∏—Ü–µ–π `oz_products`.
    """)
    
    # Get update statistics
    with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."):
        update_stats = get_oz_sku_update_statistics(conn)
    
    if update_stats and 'error' not in update_stats:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", update_stats.get('total_records', 0))
        
        with col2:
            empty_count = update_stats.get('empty_oz_sku', 0)
            st.metric("‚ùå –ü—É—Å—Ç—ã—Ö oz_sku", empty_count)
        
        with col3:
            filled_count = update_stats.get('filled_oz_sku', 0)
            st.metric("‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö oz_sku", filled_count)
        
        with col4:
            can_update = update_stats.get('can_be_updated', 0)
            st.metric("üîÑ –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å", can_update)
        
        # Additional info
        col1, col2 = st.columns(2)
        
        with col1:
            unique_codes = update_stats.get('unique_vendor_codes', 0)
            st.metric("üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö vendor –∫–æ–¥–æ–≤", unique_codes)
        
        with col2:
            matching_codes = update_stats.get('matching_vendor_codes_in_oz_products', 0)
            st.metric("üîó –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å oz_products", matching_codes)
        
        # Update button
        if can_update > 0:
            st.markdown("---")
            col1, col2 = st.columns([1, 2])
            
            with col1:
                if st.button("üöÄ –û–±–Ω–æ–≤–∏—Ç—å oz_sku", type="primary"):
                    with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ oz_sku... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
                        update_result = update_oz_sku_from_oz_products(conn)
                    
                    if update_result.get('success'):
                        st.success(f"‚úÖ {update_result['message']}")
                        
                        # Show detailed results
                        if update_result.get('updated_count', 0) > 0:
                            st.info(f"üìä **–î–µ—Ç–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**")
                            st.write(f"- –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {update_result.get('total_records', 0)}")
                            st.write(f"- –ë—ã–ª–æ –ø—É—Å—Ç—ã—Ö oz_sku: {update_result.get('empty_oz_sku', 0)}")
                            st.write(f"- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {update_result.get('potential_updates', 0)}")
                            st.write(f"- **–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {update_result.get('updated_count', 0)}**")
                            
                            st.balloons()
                            
                            # Suggest refreshing the page
                            st.info("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                    else:
                        st.error(f"‚ùå {update_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            with col2:
                st.warning(f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ {can_update} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º oz_sku")
                st.info("üí° **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã**: –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ oz_vendor_code –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ oz_category_products –∏ oz_products")
        else:
            if empty_count == 0:
                st.success("‚úÖ **–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –∏–º–µ—é—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ oz_sku**")
            else:
                st.info("‚ÑπÔ∏è **–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π oz_products –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö oz_sku**")
    
    elif 'error' in update_stats:
        st.error(f"‚ùå {update_stats['error']}")
    
    # --- Search and Filter Section ---
    st.markdown("---")
    st.subheader("üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        search_text = st.text_input(
            "üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É",
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...",
            help="–ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Ç–æ–≤–∞—Ä–æ–≤, vendor –∫–æ–¥–∞—Ö –∏ merge_on_card"
        )
    
    with col2:
        min_group_size = st.number_input(
            "üìè –ú–∏–Ω. —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã",
            min_value=1,
            max_value=100,
            value=2,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"
        )
    
    with col3:
        max_group_size = st.number_input(
            "üìê –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã",
            min_value=1,
            max_value=1000,
            value=100,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"
        )
    
    # Search button
    if st.button("üîç –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—ã", type="primary"):
        with st.spinner("–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø..."):
            search_results = search_groups_by_criteria(
                conn, 
                search_text=search_text,
                min_group_size=min_group_size,
                max_group_size=max_group_size
            )
        
        if not search_results.empty:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(search_results)} –≥—Ä—É–ø–ø")
            
            # Display results
            st.markdown("### üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            
            # Configure columns for display
            column_config = {
                'merge_on_card': st.column_config.TextColumn('üîó –ì—Ä—É–ø–ø–∞ (merge_on_card)', width="medium"),
                'group_size': st.column_config.NumberColumn('üìä –†–∞–∑–º–µ—Ä', width="small"),
                'unique_vendor_codes': st.column_config.NumberColumn('üè∑Ô∏è –£–Ω–∏–∫. –∫–æ–¥–æ–≤', width="small"),
                'vendor_codes_sample': st.column_config.TextColumn('üìù –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤', width="large"),
                'product_names_sample': st.column_config.TextColumn('üõçÔ∏è –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π', width="large")
            }
            
            # Show results table (without selection)
            st.dataframe(
                search_results,
                use_container_width=True,
                hide_index=True,
                column_config=column_config
            )
            
            # Group selection via selectbox
            st.markdown("### üéØ –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # Prepare options for selectbox
            group_options = ["–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É..."] + [
                f"{row['merge_on_card']} (—Ä–∞–∑–º–µ—Ä: {row['group_size']})" 
                for _, row in search_results.iterrows()
            ]
            
            selected_option = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
                options=group_options,
                key="group_selector_search"
            )
            
            if selected_option != "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É...":
                # Extract merge_on_card from selected option
                selected_merge_on_card = selected_option.split(" (—Ä–∞–∑–º–µ—Ä:")[0]
                
                st.markdown("---")
                st.subheader(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø—ã: `{selected_merge_on_card}`")
                
                st.markdown("#### üõçÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –≥—Ä—É–ø–ø–µ")
                
                # Get group products
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≥—Ä—É–ø–ø—ã..."):
                    group_products = get_group_products_details(conn, selected_merge_on_card)
                
                if not group_products.empty:
                    # Show group summary with unique WB SKU information
                    col1, col2, col3, col4, col5 = st.columns(5)
                    
                    with col1:
                        st.metric("üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ", len(group_products))
                    
                    with col2:
                        wb_connections = len(group_products[group_products['wb_sku'].notna()]) if 'wb_sku' in group_products.columns else 0
                        st.metric("üîó –°–≤—è–∑–µ–π —Å WB", wb_connections)
                    
                    with col3:
                        unique_wb_skus = group_products['wb_sku'].dropna().nunique() if 'wb_sku' in group_products.columns else 0
                        st.metric("üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö WB SKU", unique_wb_skus)
                    
                    with col4:
                        avg_price = group_products['oz_actual_price'].mean() if 'oz_actual_price' in group_products.columns else 0
                        st.metric("üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:.2f} ‚ÇΩ" if avg_price > 0 else "N/A")
                    
                    with col5:
                        total_stock = group_products['oz_fbo_stock'].sum() if 'oz_fbo_stock' in group_products.columns else 0
                        st.metric("üì¶ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫", int(total_stock) if total_stock > 0 else 0)
                        
                        # Configure columns for group products display
                        group_column_config = {
                            'merge_on_card': st.column_config.TextColumn('üîó –ì—Ä—É–ø–ø–∞', width="medium"),
                            'wb_sku': st.column_config.TextColumn('üõí WB SKU', width="medium"),
                            'oz_vendor_code': st.column_config.TextColumn('üè∑Ô∏è OZ Vendor Code', width="medium"),
                            'oz_sku': st.column_config.TextColumn('üÜî OZ SKU', width="medium"),
                            'oz_fbo_stock': st.column_config.NumberColumn('üì¶ –û—Å—Ç–∞—Ç–æ–∫', width="small"),
                            'product_name': st.column_config.TextColumn('üõçÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', width="large"),
                            'barcode': st.column_config.TextColumn('üî¢ –®—Ç—Ä–∏—Ö–∫–æ–¥', width="medium"),
                            'oz_actual_price': st.column_config.NumberColumn('üí∞ –¶–µ–Ω–∞', format="%.2f ‚ÇΩ", width="small")
                        }
                        
                        # Display group products table
                        st.dataframe(
                            group_products,
                            use_container_width=True,
                            hide_index=True,
                            column_config=group_column_config
                        )
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
                        render_export_controls(
                            group_products, 
                            f"group_products_{selected_merge_on_card}_top", 
                            "—Ç–æ–≤–∞—Ä—ã –≥—Ä—É–ø–ø—ã"
                        )
                    
                else:
                    st.warning("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            else:
                st.info("üëÜ **–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞**")
        
        else:
            st.warning("‚ö†Ô∏è –ì—Ä—É–ø–ø—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    else:
        # Show default list without search
        if stats and stats.get('groups_with_2_plus', 0) > 0:
            st.markdown("### üìã –¢–æ–ø-20 –≥—Ä—É–ø–ø –ø–æ —Ä–∞–∑–º–µ—Ä—É")
            
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø..."):
                default_groups = get_existing_groups_list(conn, min_group_size=2)
            
            if not default_groups.empty:
                # Show only top 20
                top_groups = default_groups.head(20)
                
                column_config = {
                    'merge_on_card': st.column_config.TextColumn('üîó –ì—Ä—É–ø–ø–∞ (merge_on_card)', width="medium"),
                    'group_size': st.column_config.NumberColumn('üìä –†–∞–∑–º–µ—Ä', width="small"),
                    'unique_vendor_codes': st.column_config.NumberColumn('üè∑Ô∏è –£–Ω–∏–∫. –∫–æ–¥–æ–≤', width="small"),
                    'vendor_codes_sample': st.column_config.TextColumn('üìù –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤', width="large"),
                    'product_names_sample': st.column_config.TextColumn('üõçÔ∏è –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π', width="large")
                }
                
                # Show table (without selection)
                st.dataframe(
                    top_groups,
                    use_container_width=True,
                    hide_index=True,
                    column_config=column_config
                )
                
                # Group selection via selectbox
                st.markdown("### üéØ –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                # Prepare options for selectbox
                top_group_options = ["–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É..."] + [
                    f"{row['merge_on_card']} (—Ä–∞–∑–º–µ—Ä: {row['group_size']})" 
                    for _, row in top_groups.iterrows()
                ]
                
                selected_top_option = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
                    options=top_group_options,
                    key="group_selector_top"
                )
                
                if selected_top_option != "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É...":
                    # Extract merge_on_card from selected option
                    selected_merge_on_card = selected_top_option.split(" (—Ä–∞–∑–º–µ—Ä:")[0]
                    
                    st.markdown("---")
                    st.subheader(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø—ã: `{selected_merge_on_card}`")
                    
                    st.markdown("#### üõçÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –≥—Ä—É–ø–ø–µ")
                    
                    # Get group products
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≥—Ä—É–ø–ø—ã..."):
                        group_products = get_group_products_details(conn, selected_merge_on_card)
                    
                    if not group_products.empty:
                        # Show group summary with unique WB SKU information
                        col1, col2, col3, col4, col5 = st.columns(5)
                        
                        with col1:
                            st.metric("üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ", len(group_products))
                        
                        with col2:
                            wb_connections = len(group_products[group_products['wb_sku'].notna()]) if 'wb_sku' in group_products.columns else 0
                            st.metric("üîó –°–≤—è–∑–µ–π —Å WB", wb_connections)
                        
                        with col3:
                            unique_wb_skus = group_products['wb_sku'].dropna().nunique() if 'wb_sku' in group_products.columns else 0
                            st.metric("üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö WB SKU", unique_wb_skus)
                        
                        with col4:
                            avg_price = group_products['oz_actual_price'].mean() if 'oz_actual_price' in group_products.columns else 0
                            st.metric("üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:.2f} ‚ÇΩ" if avg_price > 0 else "N/A")
                        
                        with col5:
                            total_stock = group_products['oz_fbo_stock'].sum() if 'oz_fbo_stock' in group_products.columns else 0
                            st.metric("üì¶ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫", int(total_stock) if total_stock > 0 else 0)
                            
                            # Configure columns for group products display
                            group_column_config = {
                                'merge_on_card': st.column_config.TextColumn('üîó –ì—Ä—É–ø–ø–∞', width="medium"),
                                'wb_sku': st.column_config.TextColumn('üõí WB SKU', width="medium"),
                                'oz_vendor_code': st.column_config.TextColumn('üè∑Ô∏è OZ Vendor Code', width="medium"),
                                'oz_sku': st.column_config.TextColumn('üÜî OZ SKU', width="medium"),
                                'oz_fbo_stock': st.column_config.NumberColumn('üì¶ –û—Å—Ç–∞—Ç–æ–∫', width="small"),
                                'product_name': st.column_config.TextColumn('üõçÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', width="large"),
                                'barcode': st.column_config.TextColumn('üî¢ –®—Ç—Ä–∏—Ö–∫–æ–¥', width="medium"),
                                'oz_actual_price': st.column_config.NumberColumn('üí∞ –¶–µ–Ω–∞', format="%.2f ‚ÇΩ", width="small")
                            }
                            
                            # Display group products table
                            st.dataframe(
                                group_products,
                                use_container_width=True,
                                hide_index=True,
                                column_config=group_column_config
                            )
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
                            render_export_controls(
                                group_products, 
                                f"group_products_{selected_merge_on_card}_top", 
                                "—Ç–æ–≤–∞—Ä—ã –≥—Ä—É–ø–ø—ã"
                            )
                        
                    else:
                        st.warning("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    st.info("üí° **–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤—ã—à–µ**")

# --- Current Data Statistics ---
if conn:
    st.markdown("---")
    
    try:
        # Check if table exists and get statistics
        rating_stats = conn.execute("""
            SELECT 
                COUNT(*) as total_records,
                COUNT(DISTINCT oz_sku) as unique_skus,
                AVG(rating) as avg_rating,
                MIN(rating) as min_rating,
                MAX(rating) as max_rating,
                SUM(rev_number) as total_reviews
            FROM oz_card_rating
        """).fetchone()
        
        if rating_stats and rating_stats[0] > 0:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = {
                'total_records': rating_stats[0],
                'unique_skus': rating_stats[1],
                'avg_rating': rating_stats[2],
                'total_reviews': rating_stats[5] if rating_stats[5] else 0
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            render_statistics_metrics(stats, "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # Rating distribution
            with st.expander("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤", expanded=False):
                rating_dist = conn.execute("""
                    SELECT rating, COUNT(*) as count
                    FROM oz_card_rating
                    WHERE rating IS NOT NULL
                    GROUP BY rating
                    ORDER BY rating
                """).fetchdf()
                
                if not rating_dist.empty:
                    st.bar_chart(rating_dist.set_index('rating'))
                else:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        else:
            st.info("üì≠ –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ Ozon' –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")
            
    except Exception as e:
        if "no such table" in str(e).lower():
            st.info("üì≠ –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞.")
        else:
            st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")

# Close connection
if conn:
    conn.close() 
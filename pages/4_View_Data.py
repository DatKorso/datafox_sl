"""
Streamlit page for viewing data from the marketplace database.

This page allows users to:
- Select a table from a list of managed database tables.
- View paginated data with optimized column display (excluding large text fields).
- Configure pagination size and column visibility.
- View detailed record information in expandable sections.
- Download filtered data as CSV.

Requires a valid database connection; prompts to configure if not connected.
"""
import streamlit as st
import pandas as pd
from utils.config_utils import get_db_path, load_config
from utils.db_connection import connect_db
from utils.db_crud import get_all_db_tables
from utils.db_schema import get_table_schema_definition
import io # For CSV download
import math

st.set_page_config(page_title="–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", layout="wide")
st.title("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î")

config = load_config()
db_path = get_db_path()

if not db_path:
    st.warning("–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'.")
    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.switch_page("pages/3_Settings.py")
    st.stop()

db_connection = connect_db(db_path)

if not db_connection:
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}.")
    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.switch_page("pages/3_Settings.py")
    st.stop()
else:
    st.success(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö '{db_path}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

    # Get ALL tables from the database using the updated db_utils function
    try:
        all_tables = get_all_db_tables(db_connection)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –∏–∑ –ë–î: {e}")
        all_tables = []
        st.stop()

    if not all_tables:
        st.info("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ò–º–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤'.")
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ò–º–ø–æ—Ä—Ç—É"):
            st.switch_page("pages/2_Import_Reports.py")
        st.stop()

    selected_table = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        options=all_tables,
        index=0 if all_tables else None,
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É..."
    )

    if selected_table:
        st.subheader(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: `{selected_table}`")
        
        # Configuration section
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            page_size = st.selectbox(
                "–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:",
                options=[50, 100, 500, 1000],
                index=1,
                key=f"page_size_{selected_table}"
            )
        
        with col2:
            show_all_columns = st.checkbox(
                "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏",
                value=False,
                key=f"show_all_{selected_table}",
                help="–í–∫–ª—é—á–∏—Ç—å –±–æ–ª—å—à–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ)"
            )
        
        try:
            # Get total count first
            count_query = f'SELECT COUNT(*) as total FROM "{selected_table}";'
            total_records = db_connection.execute(count_query).fetchone()[0]
            
            if total_records == 0:
                st.info(f"–¢–∞–±–ª–∏—Ü–∞ `{selected_table}` –ø—É—Å—Ç–∞.")
                st.stop()
            
            # Calculate pagination
            total_pages = math.ceil(total_records / page_size)
            
            with col3:
                if total_pages > 1:
                    page_number = st.number_input(
                        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ (–∏–∑ {total_pages}):",
                        min_value=1,
                        max_value=total_pages,
                        value=1,
                        key=f"page_num_{selected_table}"
                    )
                else:
                    page_number = 1
                    st.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
            
            # Define columns to exclude for optimization (large text fields)
            large_text_columns = [
                'annotation', 'rich_content_json', 'additional_photos_urls', 
                'photo_360_urls', 'hashtags', 'keywords', 'size_info', 
                'model_features', 'decorative_elements', 'size_table_json',
                'error', 'warning'
            ]
            
            # Get table columns
            columns_query = f'PRAGMA table_info("{selected_table}");'
            columns_info = db_connection.execute(columns_query).fetchall()
            all_columns = [col[1] for col in columns_info]  # col[1] is column name
            
            # Filter columns based on user choice
            if show_all_columns:
                selected_columns = all_columns
                st.warning("‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –≤–∫–ª—é—á–∞—è –±–æ–ª—å—à–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ.")
            else:
                selected_columns = [col for col in all_columns if col not in large_text_columns]
                excluded_columns = [col for col in all_columns if col in large_text_columns and col in all_columns]
                if excluded_columns:
                    st.info(f"üöÄ –°–∫—Ä—ã—Ç—ã–µ –±–æ–ª—å—à–∏–µ –ø–æ–ª—è: {', '.join(excluded_columns)}. –í–∫–ª—é—á–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏' –¥–ª—è –∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
            
            # Build optimized query with pagination
            columns_str = ', '.join([f'"{col}"' for col in selected_columns])
            offset = (page_number - 1) * page_size
            
            query = f'''
                SELECT {columns_str}
                FROM "{selected_table}"
                LIMIT {page_size} 
                OFFSET {offset};
            '''
            
            df = db_connection.execute(query).fetchdf()

            if df.empty:
                st.info(f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            else:
                # Display main dataframe
                st.dataframe(df, use_container_width=True, hide_index=True, height=400)
                
                # Stats
                start_record = offset + 1
                end_record = min(offset + len(df), total_records)
                
                col_stats1, col_stats2, col_stats3 = st.columns(3)
                with col_stats1:
                    st.metric("–ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π", f"{start_record}-{end_record} –∏–∑ {total_records}")
                with col_stats2:
                    st.metric("–ö–æ–ª–æ–Ω–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ", f"{len(selected_columns)} –∏–∑ {len(all_columns)}")
                with col_stats3:
                    st.metric("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", f"{page_number} –∏–∑ {total_pages}")
                
                # Detailed view section
                if not show_all_columns and any(col in all_columns for col in large_text_columns):
                    st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏")
                    
                    # Create a unique identifier for each row (using row index in current page)
                    record_options = []
                    if 'oz_vendor_code' in df.columns:
                        record_options = [f"–ó–∞–ø–∏—Å—å {i+1}: {row['oz_vendor_code']}" for i, (_, row) in enumerate(df.iterrows())]
                    elif 'wb_sku' in df.columns:
                        record_options = [f"–ó–∞–ø–∏—Å—å {i+1}: {row['wb_sku']}" for i, (_, row) in enumerate(df.iterrows())]
                    else:
                        record_options = [f"–ó–∞–ø–∏—Å—å {i+1}" for i in range(len(df))]
                    
                    selected_record = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                        options=range(len(record_options)),
                        format_func=lambda x: record_options[x],
                        key=f"detailed_view_{selected_table}_{page_number}"
                    )
                    
                    if selected_record is not None:
                        # Get the full record with all columns
                        record_offset = offset + selected_record
                        detailed_query = f'''
                            SELECT *
                            FROM "{selected_table}"
                            LIMIT 1 
                            OFFSET {record_offset};
                        '''
                        detailed_df = db_connection.execute(detailed_query).fetchdf()
                        
                        if not detailed_df.empty:
                            record = detailed_df.iloc[0]
                            
                            # Show excluded large fields
                            for col in large_text_columns:
                                if col in record.index and pd.notna(record[col]) and str(record[col]).strip():
                                    with st.expander(f"üìù {col}"):
                                        st.text_area(
                                            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è '{col}':",
                                            value=str(record[col]),
                                            height=200,
                                            key=f"detail_{col}_{record_offset}",
                                            disabled=True
                                        )
                
                # CSV Download section
                st.subheader("üíæ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                
                download_col1, download_col2 = st.columns(2)
                
                with download_col1:
                    # Download current page
                    csv_buffer = io.StringIO()
                    df.to_csv(csv_buffer, index=False, sep=';')
                    csv_data = csv_buffer.getvalue()
                    
                    st.download_button(
                        label=f"üì• –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ({len(df)} –∑–∞–ø–∏—Å–µ–π)",
                        data=csv_data,
                        file_name=f"{selected_table}_page_{page_number}.csv",
                        mime="text/csv",
                        key=f"download_page_{selected_table}_{page_number}"
                    )
                
                with download_col2:
                    # Download all data (with warning for large tables)
                    if total_records > 10000:
                        st.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {total_records} –∑–∞–ø–∏—Å–µ–π. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")
                    
                    if st.button(
                        f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–ª–Ω—É—é –≤—ã–≥—Ä—É–∑–∫—É ({total_records} –∑–∞–ø–∏—Å–µ–π)",
                        key=f"prepare_full_{selected_table}"
                    ):
                        with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è..."):
                            full_query = f'SELECT {columns_str} FROM "{selected_table}";'
                            full_df = db_connection.execute(full_query).fetchdf()
                            
                            full_csv_buffer = io.StringIO()
                            full_df.to_csv(full_csv_buffer, index=False, sep=';')
                            full_csv_data = full_csv_buffer.getvalue()
                            
                            st.download_button(
                                label=f"üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ ({len(full_df)} –∑–∞–ø–∏—Å–µ–π)",
                                data=full_csv_data,
                                file_name=f"{selected_table}_full_data.csv",
                                mime="text/csv",
                                key=f"download_full_{selected_table}"
                            )

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `{selected_table}`: {e}")
    else:
        if all_tables: # Only show if tables exist but none is selected (should not happen with index=0)
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.")

# No need to explicitly close connection here if using Streamlit's connection management or if pages handle it.
# If db_connection is a raw DuckDB connection, it's good practice to close it when done with the app/session.
# However, for Streamlit pages, the script reruns, so connection might be re-established anyway.
# For now, let's assume connect_db handles pooling or re-connection efficiently. 
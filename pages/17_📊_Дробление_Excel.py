"""
Streamlit page for splitting Excel files into chunks based on unique values in a specified column.

This page allows users to:
- Upload an Excel file
- Select a sheet and column for splitting
- Specify the number of unique values per chunk
- Download a ZIP archive with the split files

The splitting logic:
1. Reads the specified column and finds unique values
2. Groups rows by unique values (all rows with the same value stay together)
3. Creates chunks with the specified number of unique values
4. Generates separate Excel files for each chunk
5. Packages all files into a ZIP archive

Author: DataFox SL Project
Version: 1.0.0
"""

import streamlit as st
import pandas as pd
import os
from io import BytesIO
import traceback
from openpyxl import load_workbook, Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import tempfile
import zipfile
from typing import List, Dict, Any, Tuple
import time

# Page configuration
st.set_page_config(
    page_title="–î—Ä–æ–±–ª–µ–Ω–∏–µ Excel",
    page_icon="üìä",
    layout="wide"
)

st.title("üìä –î—Ä–æ–±–ª–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤")
st.markdown("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ")
st.markdown("---")

# Initialize session state
if 'uploaded_file' not in st.session_state:
    st.session_state.uploaded_file = None
if 'available_sheets' not in st.session_state:
    st.session_state.available_sheets = []
if 'selected_sheet' not in st.session_state:
    st.session_state.selected_sheet = None
if 'df_preview' not in st.session_state:
    st.session_state.df_preview = None
if 'column_names' not in st.session_state:
    st.session_state.column_names = []
if 'processing_config' not in st.session_state:
    st.session_state.processing_config = {}

def get_excel_sheets(file_bytes: bytes) -> List[str]:
    """Get list of sheets from Excel file"""
    try:
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp_file:
            tmp_file.write(file_bytes)
            tmp_file.flush()
            
            wb = load_workbook(tmp_file.name, read_only=True)
            sheets = wb.sheetnames
            wb.close()
            os.unlink(tmp_file.name)
            return sheets
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return []

def read_excel_sheet(file_bytes: bytes, sheet_name: str, header_row: int = 0) -> pd.DataFrame:
    """Read Excel sheet with proper header handling"""
    try:
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp_file:
            tmp_file.write(file_bytes)
            tmp_file.flush()
            
            df = pd.read_excel(tmp_file.name, sheet_name=sheet_name, header=header_row)
            os.unlink(tmp_file.name)
            return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ {sheet_name}: {str(e)}")
        return pd.DataFrame()

def get_unique_values_count(df: pd.DataFrame, column_name: str) -> int:
    """Get count of unique values in a column"""
    try:
        if column_name not in df.columns:
            return 0
        return df[column_name].nunique()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {str(e)}")
        return 0

def split_dataframe_by_unique_values(df: pd.DataFrame, column_name: str, chunk_size: int) -> List[pd.DataFrame]:
    """Split DataFrame into chunks based on unique values in specified column"""
    try:
        if column_name not in df.columns:
            st.error(f"–°—Ç–æ–ª–±–µ—Ü '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
            return []
        
        # Get unique values
        unique_values = df[column_name].unique()
        unique_values = [val for val in unique_values if pd.notna(val)]  # Remove NaN values
        
        if not unique_values:
            st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ")
            return []
        
        chunks = []
        for i in range(0, len(unique_values), chunk_size):
            chunk_values = unique_values[i:i + chunk_size]
            chunk_df = df[df[column_name].isin(chunk_values)].copy()
            if not chunk_df.empty:
                chunks.append(chunk_df)
        
        return chunks
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []

def create_zip_archive(chunks: List[pd.DataFrame], base_filename: str) -> BytesIO:
    """Create ZIP archive with Excel files for each chunk"""
    try:
        zip_buffer = BytesIO()
        
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            for i, chunk_df in enumerate(chunks, 1):
                # Create Excel file in memory
                excel_buffer = BytesIO()
                with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                    chunk_df.to_excel(writer, index=False, sheet_name='Data')
                
                # Add to ZIP
                filename = f"{base_filename}_chunk_{i}_of_{len(chunks)}.xlsx"
                zip_file.writestr(filename, excel_buffer.getvalue())
        
        zip_buffer.seek(0)
        return zip_buffer
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
        return None

# Main UI
st.subheader("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
    type=['xlsx', 'xls'],
    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã Excel (.xlsx, .xls)"
)

if uploaded_file is not None:
    st.session_state.uploaded_file = uploaded_file
    file_bytes = uploaded_file.read()
    
    # Get sheets
    sheets = get_excel_sheets(file_bytes)
    if sheets:
        st.session_state.available_sheets = sheets
        st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(sheets)}")
        
        # Sheet selection
        st.subheader("2. –í—ã–±–æ—Ä –ª–∏—Å—Ç–∞")
        selected_sheet = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            options=sheets,
            help="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç Excel –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"
        )
        
        if selected_sheet:
            st.session_state.selected_sheet = selected_sheet
            
            # Read and preview data
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                df = read_excel_sheet(file_bytes, selected_sheet)
                
            if not df.empty:
                st.session_state.df_preview = df
                st.session_state.column_names = list(df.columns)
                
                # Data preview
                st.subheader("3. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫", len(df))
                with col2:
                    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤", len(df.columns))
                with col3:
                    st.metric("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞", f"{len(file_bytes) / 1024:.1f} KB")
                
                # Show preview
                st.dataframe(df.head(10), use_container_width=True)
                
                # Configuration
                st.subheader("4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    selected_column = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏",
                        options=df.columns,
                        help="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü, –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
                    )
                
                with col2:
                    chunk_size = st.number_input(
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Ñ–∞–π–ª",
                        min_value=1,
                        max_value=1000,
                        value=100,
                        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª"
                    )
                
                if selected_column:
                    # Show statistics for selected column
                    unique_count = get_unique_values_count(df, selected_column)
                    estimated_files = (unique_count + chunk_size - 1) // chunk_size  # Ceiling division
                    
                    st.info(f"""
                    **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü—É '{selected_column}':**
                    - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {unique_count}
                    - –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {estimated_files}
                    - –°—Ç—Ä–æ–∫ –Ω–∞ —Ñ–∞–π–ª: –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Å—Ç–æ—Ç—ã –∑–Ω–∞—á–µ–Ω–∏–π)
                    """)
                    
                    # Show sample unique values
                    with st.expander("–ü—Ä–∏–º–µ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"):
                        sample_values = df[selected_column].unique()[:20]
                        st.write(", ".join([str(v) for v in sample_values if pd.notna(v)]))
                        if len(df[selected_column].unique()) > 20:
                            st.write("... –∏ –µ—â–µ", len(df[selected_column].unique()) - 20, "–∑–Ω–∞—á–µ–Ω–∏–π")
                    
                    # Processing button
                    st.subheader("5. –û–±—Ä–∞–±–æ—Ç–∫–∞")
                    
                    if st.button("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", type="primary"):
                        if unique_count == 0:
                            st.error("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")
                        else:
                            # Store configuration
                            st.session_state.processing_config = {
                                'column': selected_column,
                                'chunk_size': chunk_size,
                                'unique_count': unique_count,
                                'estimated_files': estimated_files
                            }
                            
                            # Process the file
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            try:
                                # Split data
                                status_text.text("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
                                progress_bar.progress(0.3)
                                
                                chunks = split_dataframe_by_unique_values(df, selected_column, chunk_size)
                                
                                if chunks:
                                    status_text.text("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤...")
                                    progress_bar.progress(0.6)
                                    
                                    # Create ZIP archive
                                    base_filename = os.path.splitext(uploaded_file.name)[0]
                                    zip_buffer = create_zip_archive(chunks, base_filename)
                                    
                                    if zip_buffer:
                                        progress_bar.progress(1.0)
                                        status_text.text("–ì–æ—Ç–æ–≤–æ!")
                                        
                                        # Success metrics
                                        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω!")
                                        
                                        col1, col2, col3 = st.columns(3)
                                        with col1:
                                            st.metric("–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤", len(chunks))
                                        with col2:
                                            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π", unique_count)
                                        with col3:
                                            st.metric("–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞", f"{len(zip_buffer.getvalue()) / 1024:.1f} KB")
                                        
                                        # Download button
                                        st.download_button(
                                            label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏",
                                            data=zip_buffer.getvalue(),
                                            file_name=f"{base_filename}_split_files.zip",
                                            mime="application/zip",
                                            type="primary"
                                        )
                                        
                                        # Show chunk details
                                        with st.expander("–î–µ—Ç–∞–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"):
                                            for i, chunk in enumerate(chunks, 1):
                                                unique_in_chunk = chunk[selected_column].nunique()
                                                st.write(f"–§–∞–π–ª {i}: {len(chunk)} —Å—Ç—Ä–æ–∫, {unique_in_chunk} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                                
                                else:
                                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
                                    
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
                                with st.expander("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏"):
                                    st.code(traceback.format_exc())
                            
                            finally:
                                progress_bar.empty()
                                status_text.empty()

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    # Help section
    with st.expander("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"):
        st.markdown("""
        ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
        
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª** - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã .xlsx –∏ .xls
        2. **–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç** –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        3. **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü** –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)
        4. **–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π** –Ω–∞ —Ñ–∞–π–ª
        5. **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏** –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
        6. **–°–∫–∞—á–∞–π—Ç–µ ZIP –∞—Ä—Ö–∏–≤** —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        
        ### –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
        - –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
        - –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "ABC123" –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ 50 —Å—Ç—Ä–æ–∫–∞—Ö, –≤—Å–µ 50 —Å—Ç—Ä–æ–∫ –ø–æ–ø–∞–¥—É—Ç –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
        - –§–∞–π–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É: N —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π = 1 —Ñ–∞–π–ª
        
        ### –ü—Ä–∏–º–µ—Ä:
        - –£ –≤–∞—Å –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü "–ê—Ä—Ç–∏–∫—É–ª" —Å 500 —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        - –í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ 100 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Ñ–∞–π–ª
        - –ü–æ–ª—É—á–∏—Ç–µ 5 —Ñ–∞–π–ª–æ–≤, –∫–∞–∂–¥—ã–π —Å 100 —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ (–∏ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏)
        """)
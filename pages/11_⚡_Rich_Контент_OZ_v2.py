"""
Rich Content OZ v2 - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ Ozon.

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –ú–∏–Ω–∏–º–∞–ª–∏–∑–º - —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
- –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å - –∏–∑–±–µ–≥–∞–µ–º —Ñ–∞–π–ª–æ–≤ 2000+ —Å—Ç—Ä–æ–∫  
- CSV-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å - —ç–∫—Å–ø–æ—Ä—Ç –≤–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
- –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ScoringConfig –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
- –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å - –ª–µ–≥–∫–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ –±—É–¥—É—â–µ–º
"""

import streamlit as st
import pandas as pd
import time
import logging
from typing import List, Optional

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from utils.db_connection import connect_db
from utils.rich_content_oz import ScoringConfig, RichContentProcessor
from utils.rich_content_processor_v2 import BatchProcessorV2
from utils.csv_exporter import RichContentCSVExporter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

if not logger.handlers:
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="‚ö° Rich Content OZ v2", 
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("‚ö° Rich Content OZ v2 - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
st.markdown("---")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_resource
def get_database_connection():
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    return connect_db()

conn = get_database_connection()
if not conn:
    st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    if st.button("üîß –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"):
        st.switch_page("pages/3_‚öôÔ∏è_–ù–∞—Å—Ç—Ä–æ–π–∫–∏.py")
    st.stop()

# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

def parse_vendor_codes(input_text: str) -> List[str]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not input_text.strip():
        return []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –æ—á–∏—â–∞–µ–º
    lines = input_text.strip().split('\n')
    vendor_codes = []
    
    for line in lines:
        code = line.strip()
        if code and len(code) > 2:  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            vendor_codes.append(code)
    
    return vendor_codes

def process_batch_v2(input_text: str, config: ScoringConfig):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ v2"""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    vendor_codes = parse_vendor_codes(input_text)
    
    if not vendor_codes:
        st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(vendor_codes)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    if st.session_state.batch_processor is None:
        st.session_state.batch_processor = BatchProcessorV2(conn, config)
    
    processor = st.session_state.batch_processor
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_container = st.container()
    log_container = st.container()
    
    with progress_container:
        progress_bar = st.progress(0)
        status_text = st.empty()
        
    with log_container:
        st.subheader("üìã –õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        log_placeholder = st.empty()
    
    try:
        start_time = time.time()
        
        # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        def progress_callback(current: int, total: int, message: str):
            progress = current / total if total > 0 else 0
            progress_bar.progress(progress)
            status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {current}/{total}: {message}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
            elapsed = time.time() - start_time
            avg_time = elapsed / current if current > 0 else 0
            estimated_remaining = avg_time * (total - current) if current > 0 else 0
            
            log_text = f"""
‚è±Ô∏è –í—Ä–µ–º—è: {elapsed:.1f}—Å | –û—Å—Ç–∞–ª–æ—Å—å: ~{estimated_remaining:.1f}—Å
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} ({progress*100:.1f}%)
üîÑ –¢–µ–∫—É—â–∏–π: {message}
‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_time:.2f}—Å/—Ç–æ–≤–∞—Ä
            """
            log_placeholder.text(log_text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(vendor_codes)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        results = processor.process_vendor_codes_list(
            vendor_codes, 
            progress_callback=progress_callback
        )
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        total_time = time.time() - start_time
        progress_bar.progress(1.0)
        status_text.text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.1f}—Å!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.session_state.processing_results = results
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {total_time:.1f}—Å")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        time.sleep(1)
        st.rerun()
        
    except Exception as e:
        progress_bar.progress(1.0)
        status_text.text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        log_placeholder.text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if 'processing_results' not in st.session_state:
    st.session_state.processing_results = None

if 'batch_processor' not in st.session_state:
    st.session_state.batch_processor = None

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---

# 1. –í–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
st.subheader("üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
vendor_codes_input = st.text_area(
    "**–°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):**",
    height=200,
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä:\nABC-123-XL\nDEF-456-M\nGHI-789-L\n...",
    help="–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã oz_category_products, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ"
)

# 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (—Å–≤–µ—Ä–Ω—É—Ç–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", expanded=False):
    st.markdown("**–°–∏—Å—Ç–µ–º–∞ –≤–µ—Å–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤:**")
    
    # –í—ã–±–æ—Ä –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    col1, col2 = st.columns([1, 1])
    
    with col1:
        config_preset = st.selectbox(
            "**–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**",
            ["default", "optimized", "balanced", "lenient"],
            index=1,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "optimized"
            help="""
            ‚Ä¢ **default** - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            ‚Ä¢ **optimized** - —É–ª—É—á—à–µ–Ω–Ω–∞—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π  
            ‚Ä¢ **balanced** - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–∂–¥—É –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å—Ç—Ä–æ–≥–æ—Å—Ç—å—é
            ‚Ä¢ **lenient** - –º—è–≥–∫–∞—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–∫–ª—é—á–∞—é—â–∞—è
            """
        )
    
    with col2:
        if config_preset == "optimized":
            st.success("üéØ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è** –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        elif config_preset == "balanced":
            st.info("‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥")
        elif config_preset == "lenient":
            st.warning("üîì –ú—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
        else:
            st.info("üìä –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        from utils.scoring_config_optimized import get_config_by_name
        config = get_config_by_name(config_preset)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        st.markdown("**–ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–ú–∏–Ω. –ø–æ—Ä–æ–≥", f"{config.min_score_threshold}")
        with col2:
            st.metric("–®—Ç—Ä–∞—Ñ –∑–∞ –∫–æ–ª–æ–¥–∫—É", f"{int((1-config.no_last_penalty)*100)}%")
        with col3:
            st.metric("–ú–∞–∫—Å. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", config.max_recommendations)
        with col4:
            st.metric("–ë–∞–∑–æ–≤—ã–π score", config.base_score)
        
    except ImportError:
        st.warning("‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é")
        config = render_scoring_config_ui()

# 3. –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
col1, col2 = st.columns([1, 1])

with col1:
    if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", type="primary", use_container_width=True):
        process_batch_v2(vendor_codes_input, config)

with col2:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    if vendor_codes_input.strip():
        vendor_codes = parse_vendor_codes(vendor_codes_input)
        if vendor_codes:
            st.success(f"üìä –ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: **{len(vendor_codes)}** —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    else:
        st.info("üëÜ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

# --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
if st.session_state.processing_results:
    st.markdown("---")
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    results = st.session_state.processing_results
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", len(results))
    
    with col2:
        successful = len([r for r in results if r.get('rich_content_json')])
        st.metric("–£—Å–ø–µ—à–Ω–æ", successful)
    
    with col3:
        failed = len(results) - successful
        st.metric("–û—à–∏–±–∫–∏", failed)
    
    with col4:
        success_rate = (successful / len(results) * 100) if results else 0
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{success_rate:.1f}%")
    
    # CSV —ç–∫—Å–ø–æ—Ä—Ç
    st.markdown("### üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    if successful > 0:
        exporter = RichContentCSVExporter()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        successful_results = [r for r in results if r.get('rich_content_json')]
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.success(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: **{len(successful_results)}** —Ç–æ–≤–∞—Ä–æ–≤ —Å Rich Content")
        
        with col2:
            exporter.create_download_button(
                successful_results, 
                filename=f"rich_content_export_{int(time.time())}.csv"
            )
        
        # –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
        with st.expander("üëÅÔ∏è –ü—Ä–µ–≤—å—é —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö", expanded=False):
            preview_df = pd.DataFrame([
                {
                    'oz_vendor_code': r['oz_vendor_code'],
                    'recommendations_count': r.get('recommendations_count', 0),
                    'processing_time_ms': round(r.get('processing_time', 0) * 1000, 1),
                    'has_rich_content': bool(r.get('rich_content_json'))
                }
                for r in successful_results[:20]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            ])
            
            st.dataframe(preview_df, use_container_width=True)
            
            if len(successful_results) > 20:
                st.caption(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(successful_results)} –∑–∞–ø–∏—Å–µ–π. Rich Content JSON –≤–∫–ª—é—á–µ–Ω –≤ –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç.")
    else:
        st.warning("‚ö†Ô∏è –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

# --- –°–ø—Ä–∞–≤–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ ---
with st.sidebar.expander("‚ùì –°–ø—Ä–∞–≤–∫–∞", expanded=False):
    st.markdown("""
    **‚ö° Rich Content OZ v2:**
    
    **–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è** –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.
    
    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
    1. –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)
    2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ—Å–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    3. –ù–∞–∂–º–∏—Ç–µ "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"
    4. –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ
    
    **–§–æ—Ä–º–∞—Ç CSV:**
    - –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü: `oz_vendor_code` (–∞—Ä—Ç–∏–∫—É–ª)
    - –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü: `rich_content_json` (JSON –∫–æ–Ω—Ç–µ–Ω—Ç)
    
    **–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:**
    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏: —Ç–∏–ø, –ø–æ–ª, –±—Ä–µ–Ω–¥, —Ä–∞–∑–º–µ—Ä
    - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: —Å–µ–∑–æ–Ω, —Ü–≤–µ—Ç, –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ–ª–æ–¥–∫–∏
    - –£—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
    
    **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
    - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    - ~0.2-1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    """)

# --- Footer ---
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>"
    "‚ö° Rich Content Generator v2 –¥–ª—è Ozon ‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è"
    "</div>", 
    unsafe_allow_html=True
)

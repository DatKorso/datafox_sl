"""
Streamlit page for cross-marketplace product search.

This page allows users to:
- Select a search criterion (WB SKU, Ozon SKU, Ozon Vendor Code, Barcode).
- Input search values (single or multiple).
- Select which information fields to display for matched products.
- View results in a table.

NEW FEATURES:
- Added support for oz_category_products table fields:
  * merge_on_card - –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
  * color_name - –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞  
  * manufacturer_size - –†–∞–∑–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
- These fields are linked via oz_vendor_code and are optional (not in default selection).
- Added session state support to preserve data when switching between display modes
"""
import streamlit as st
from utils.db_connection import connect_db
from utils.cross_marketplace_linker import CrossMarketplaceLinker
from utils.wb_photo_service import get_wb_photo_url
import pandas as pd

st.set_page_config(page_title="Cross-Marketplace Search - Marketplace Analyzer", layout="wide")
st.title("üîÑ Cross-Marketplace Product Search")
st.markdown("---")

# üîÑ Initialize session state for preserving data between interactions
if 'search_executed' not in st.session_state:
    st.session_state.search_executed = False
if 'search_results' not in st.session_state:
    st.session_state.search_results = None
if 'search_info' not in st.session_state:
    st.session_state.search_info = None

# --- Database Connection ---
conn = connect_db()
if not conn:
    st.error("Database not connected. Please configure the database in Settings.")
    if st.button("Go to Settings"):
        st.switch_page("pages/3_Settings.py")
    st.stop()

# --- UI Elements ---
st.subheader("Search Configuration")

col1, col2 = st.columns([1, 2])

with col1:
    search_criterion_options = {
        "–ê—Ä—Ç–∏–∫—É–ª WB": "wb_sku",
        "–ê—Ä—Ç–∏–∫—É–ª Ozon": "oz_sku",
        "–ö–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Ozon": "oz_vendor_code",
        "–®—Ç—Ä–∏—Ö–∫–æ–¥": "barcode"
    }
    
    # Use session state to remember selection
    default_index = 0
    if 'last_search_criterion' in st.session_state:
        for i, key in enumerate(search_criterion_options.keys()):
            if search_criterion_options[key] == st.session_state.last_search_criterion:
                default_index = i
                break
    
    search_criterion_label = st.selectbox(
        "–ü–æ –∫–∞–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫?",
        options=list(search_criterion_options.keys()),
        index=default_index,
        key="search_criterion_select"
    )
    search_criterion = search_criterion_options[search_criterion_label]

# Use session state to remember search input
search_values_input = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º):",
    height=100,
    help="–ù–∞–ø—Ä–∏–º–µ—Ä: 12345 67890",
    value=st.session_state.get('last_search_values', ''),
    key="search_values_textarea"
)

st.markdown("---")

# Define all possible fields that can be displayed
# Keys are user-friendly labels, values are (table_alias, column_name_in_db) or special identifiers
# This will be used later to construct the SELECT part of the SQL query dynamically
# and to name columns in the final DataFrame.
# 'common_barcode' is a special case that will be derived from the join.

# OZON Fields
ozon_fields_options = {
    "Oz: SKU": ("oz_products", "oz_sku"),
    "Oz: –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": ("oz_products", "oz_vendor_code"),
    "Oz: Product ID (oz_product_id)": ("oz_products", "oz_product_id"),
    "Oz: –ë—Ä–µ–Ω–¥ (oz_brand)": ("oz_products", "oz_brand"),
    "Oz: –°—Ç–∞—Ç—É—Å (oz_product_status)": ("oz_products", "oz_product_status"),
    "Oz: –¶–µ–Ω–∞ (oz_actual_price)": ("oz_products", "oz_actual_price"),
    "Oz: –û—Å—Ç–∞—Ç–æ–∫ (oz_fbo_stock)": ("oz_products", "oz_fbo_stock"),
    "Oz: –®—Ç—Ä–∏—Ö–∫–æ–¥ (oz_barcode)": ("oz_barcodes", "oz_barcode"), # From oz_barcodes table
    "Oz: –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ (merge_on_card)": ("oz_category_products", "merge_on_card"), # From oz_category_products table
    "Oz: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ (color_name)": ("oz_category_products", "color_name"), # From oz_category_products table
    "Oz: –†–∞–∑–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è (manufacturer_size)": ("oz_category_products", "manufacturer_size"), # From oz_category_products table
    "Oz: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (main_photo_url)": ("oz_category_products", "main_photo_url") # From oz_category_products table
}

# Wildberries Fields
wb_fields_options = {
    "WB: SKU": ("wb_products", "wb_sku"),
    "WB: –ë—Ä–µ–Ω–¥ (wb_brand)": ("wb_products", "wb_brand"),
    "WB: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (wb_category)": ("wb_products", "wb_category"),
    "WB: –®—Ç—Ä–∏—Ö–∫–æ–¥—ã (wb_barcodes)": ("wb_products", "wb_barcodes"), # Original string from wb_products
    "WB: –¶–µ–Ω–∞ (wb_full_price)": ("wb_prices", "wb_full_price"), # From wb_prices table
}

# Common/Derived Fields
common_fields_options = {
    "–û–±—â–∏–π –®–ö": "common_matched_barcode", # Special identifier
    "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥": "is_primary_barcode" # NEW: Special identifier for primary barcode status
}

all_display_options = list(common_fields_options.keys()) + list(ozon_fields_options.keys()) + list(wb_fields_options.keys())

# Default selections:
default_selections = [
    "–û–±—â–∏–π –®–ö",
    "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥",  # NEW: Add primary barcode status to default
    "Oz: SKU",
    "Oz: –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
    "Oz: –û—Å—Ç–∞—Ç–æ–∫",
    "WB: SKU",
]

# Use session state to remember field selections
default_selected = st.session_state.get('last_selected_fields', [opt for opt in default_selections if opt in all_display_options])

selected_display_fields_labels = st.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö:",
    options=all_display_options,
    default=default_selected,
    help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ.",
    key="selected_fields_multiselect"
)

st.markdown("---")

# Add buttons for search and clearing results
col_btn1, col_btn2 = st.columns([2, 1])

with col_btn1:
    search_button_clicked = st.button("üöÄ –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã", type="primary")

with col_btn2:
    if st.session_state.search_executed:
        clear_button_clicked = st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", help="–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ —Ñ–æ—Ä–º—É")
    else:
        clear_button_clicked = False

# Handle search button click
if search_button_clicked:
    if not search_values_input.strip():
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    elif not selected_display_fields_labels:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.")
    else:
        search_values = search_values_input.strip().split()
        
        # Save current form state to session state
        st.session_state.last_search_values = search_values_input
        st.session_state.last_search_criterion = search_criterion
        st.session_state.last_selected_fields = selected_display_fields_labels
        
        # Prepare selected_fields_map for the db_utils function
        selected_fields_map_for_query = {}
        for label in selected_display_fields_labels:
            if label in common_fields_options:
                selected_fields_map_for_query[label] = common_fields_options[label]
            elif label in ozon_fields_options:
                selected_fields_map_for_query[label] = ozon_fields_options[label]
            elif label in wb_fields_options:
                selected_fields_map_for_query[label] = wb_fields_options[label]

        with st.spinner("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
            linker = CrossMarketplaceLinker(conn)
            results_df = linker.find_marketplace_matches(
                search_criterion=search_criterion, # 'wb_sku', 'oz_sku', etc.
                search_values=search_values,
                selected_fields_map=selected_fields_map_for_query
            )

        # Save results and info to session state
        st.session_state.search_results = results_df
        st.session_state.search_info = {
            'criterion_label': search_criterion_label,
            'values': search_values,
            'fields_map': selected_fields_map_for_query,
            'selected_fields': selected_display_fields_labels
        }
        st.session_state.search_executed = True
        
        # Show immediate feedback
        st.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é: '{search_criterion_label}' –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π: {search_values}")

# Handle clear button click
if clear_button_clicked:
    # Clear all session state
    st.session_state.search_executed = False
    st.session_state.search_results = None
    st.session_state.search_info = None
    st.session_state.last_search_values = ''
    if 'last_search_criterion' in st.session_state:
        del st.session_state.last_search_criterion
    if 'last_selected_fields' in st.session_state:
        del st.session_state.last_selected_fields
    st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ —Ñ–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω—ã!")
    st.rerun()

# Display results if they exist in session state
if st.session_state.search_executed and st.session_state.search_results is not None:
    results_df = st.session_state.search_results
    search_info = st.session_state.search_info
    
    st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–æ–∏—Å–∫–∞")
    
    if not results_df.empty:
        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results_df)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
        
        # Display search criteria info
        with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∏—Å–∫–µ", expanded=False):
            st.info(f"""
            **–ö—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞**: {search_info['criterion_label']}  
            **–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞**: {', '.join(map(str, search_info['values']))}  
            **–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è**: {', '.join(search_info['selected_fields'])}
            """)
        
        # Function to add product photos (moved here from inside button block)
        def add_product_photos(df):
            """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ WB –≤ –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã."""
            # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å WB SKU - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
            wb_sku_column = None
            for col in df.columns:
                col_str = str(col).lower()
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å WB SKU
                if ('wb_sku' in col_str or 
                    '–∞—Ä—Ç–∏–∫—É–ª wb' in col_str or 
                    'wb: sku' in col_str or
                    col == 'WB: SKU'):
                    wb_sku_column = col
                    break
            
            if wb_sku_column and wb_sku_column in df.columns:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å URL –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                def get_photo_url(wb_sku):
                    if pd.isna(wb_sku) or str(wb_sku).strip() == '':
                        return None
                    
                    try:
                        photo_url = get_wb_photo_url(str(wb_sku))
                        return photo_url if photo_url else None
                    except Exception as e:
                        return None
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                df_with_photos = df.copy()
                df_with_photos.insert(0, 'üñºÔ∏è –§–æ—Ç–æ WB', df_with_photos[wb_sku_column].apply(get_photo_url))
                return df_with_photos
            
            return df
        
        # Reorder columns to have "Search_Value" first, then others as selected by user
        cols = list(results_df.columns)
        if "Search_Value" in cols:
            cols.insert(0, cols.pop(cols.index("Search_Value")))
            ordered_cols = ["Search_Value"]
            for label in search_info['selected_fields']:
                if label in results_df.columns and label != "Search_Value":
                    ordered_cols.append(label)
            # Add any remaining columns from results_df not in ordered_cols
            for col in results_df.columns:
                if col not in ordered_cols:
                    ordered_cols.append(col)
            results_df = results_df[ordered_cols]
        
        # üéØ –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ImageColumn –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        results_with_photos_df = add_product_photos(results_df)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        column_config = {}
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ—ë –∫–∞–∫ ImageColumn
        if 'üñºÔ∏è –§–æ—Ç–æ WB' in results_with_photos_df.columns:
            column_config['üñºÔ∏è –§–æ—Ç–æ WB'] = st.column_config.ImageColumn(
                "üñºÔ∏è –§–æ—Ç–æ WB",
                help="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–∞ WB",
                width="small"
            )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ —è—á–µ–π–∫–∞—Ö
        st.markdown("**üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ —è—á–µ–π–∫–∞—Ö:**")
        st.dataframe(
            results_with_photos_df, 
            use_container_width=True, 
            hide_index=True,
            column_config=column_config,
            height=400  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        )
                
    else:
        st.info("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

# Display helpful message when no search has been executed yet
elif not st.session_state.search_executed:
    st.markdown("### üîç –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫")
    st.info("üëÜ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'üöÄ –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã'** –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    
    # Show some helpful tips
    with st.expander("üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", expanded=False):
        st.markdown("""
        **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫:**
        
        1. **–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞** - –ø–æ –∫–∞–∫–æ–º—É –ø–æ–ª—é –∏—Å–∫–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        2. **–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è** - –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        3. **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è** - –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–∫–∞–∑–∞—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        4. **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞** - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:**
        - ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        - ‚úÖ –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        - ‚úÖ –ö–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        """)

if conn:
    conn.close() 
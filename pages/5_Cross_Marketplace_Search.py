"""
Streamlit page for cross-marketplace product search.

This page allows users to:
- Select a search criterion (WB SKU, Ozon SKU, Ozon Vendor Code, Barcode).
- Input search values (single or multiple).
- Select which information fields to display for matched products.
- View results in a table.
"""
import streamlit as st
from utils.db_connection import connect_db
from utils.db_search_helpers import find_cross_marketplace_matches
import pandas as pd

st.set_page_config(page_title="Cross-Marketplace Search - Marketplace Analyzer", layout="wide")
st.title("üîÑ Cross-Marketplace Product Search")
st.markdown("---")

# --- Database Connection ---
conn = connect_db()
if not conn:
    st.error("Database not connected. Please configure the database in Settings.")
    if st.button("Go to Settings"):
        st.switch_page("pages/3_Settings.py")
    st.stop()

# --- UI Elements ---
st.subheader("Search Configuration")

col1, col2 = st.columns([1, 2])

with col1:
    search_criterion_options = {
        "–ê—Ä—Ç–∏–∫—É–ª WB": "wb_sku",
        "–ê—Ä—Ç–∏–∫—É–ª Ozon": "oz_sku",
        "–ö–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Ozon": "oz_vendor_code",
        "–®—Ç—Ä–∏—Ö–∫–æ–¥": "barcode"
    }
    search_criterion_label = st.selectbox(
        "–ü–æ –∫–∞–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫?",
        options=list(search_criterion_options.keys()),
        index=0
    )
    search_criterion = search_criterion_options[search_criterion_label]

search_values_input = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º):",
    height=100,
    help="–ù–∞–ø—Ä–∏–º–µ—Ä: 12345 67890"
)

st.markdown("---")
st.subheader("Information to Display")

# Define all possible fields that can be displayed
# Keys are user-friendly labels, values are (table_alias, column_name_in_db) or special identifiers
# This will be used later to construct the SELECT part of the SQL query dynamically
# and to name columns in the final DataFrame.
# 'common_barcode' is a special case that will be derived from the join.

# OZON Fields
ozon_fields_options = {
    "Ozon: –ê—Ä—Ç–∏–∫—É–ª (oz_sku)": ("oz_products", "oz_sku"),
    "Ozon: –ö–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (oz_vendor_code)": ("oz_products", "oz_vendor_code"),
    "Ozon: Product ID (oz_product_id)": ("oz_products", "oz_product_id"),
    "Ozon: –ë—Ä–µ–Ω–¥ (oz_brand)": ("oz_products", "oz_brand"),
    "Ozon: –°—Ç–∞—Ç—É—Å (oz_product_status)": ("oz_products", "oz_product_status"),
    "Ozon: –¶–µ–Ω–∞ (oz_actual_price)": ("oz_products", "oz_actual_price"),
    "Ozon: –®—Ç—Ä–∏—Ö–∫–æ–¥ (oz_barcode)": ("oz_barcodes", "oz_barcode") # From oz_barcodes table
}

# Wildberries Fields
wb_fields_options = {
    "WB: –ê—Ä—Ç–∏–∫—É–ª (wb_sku)": ("wb_products", "wb_sku"),
    "WB: –ë—Ä–µ–Ω–¥ (wb_brand)": ("wb_products", "wb_brand"),
    "WB: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (wb_category)": ("wb_products", "wb_category"),
    "WB: –®—Ç—Ä–∏—Ö–∫–æ–¥—ã (wb_barcodes)": ("wb_products", "wb_barcodes"), # Original string from wb_products
    "WB: –¶–µ–Ω–∞ (wb_full_price)": ("wb_prices", "wb_full_price"), # From wb_prices table
}

# Common/Derived Fields
common_fields_options = {
    "–û–±—â–∏–π —à—Ç—Ä–∏—Ö–∫–æ–¥ (–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)": "common_matched_barcode" # Special identifier
}

all_display_options = list(common_fields_options.keys()) + list(ozon_fields_options.keys()) + list(wb_fields_options.keys())

# Default selections:
default_selections = [
    "–û–±—â–∏–π —à—Ç—Ä–∏—Ö–∫–æ–¥ (–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)",
    "Ozon: –ê—Ä—Ç–∏–∫—É–ª (oz_sku)",
    "Ozon: –ö–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (oz_vendor_code)",
    "WB: –ê—Ä—Ç–∏–∫—É–ª (wb_sku)",
]


selected_display_fields_labels = st.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö:",
    options=all_display_options,
    default=[opt for opt in default_selections if opt in all_display_options],
    help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ."
)

st.markdown("---")

if st.button("üöÄ –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã", type="primary"):
    if not search_values_input.strip():
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    elif not selected_display_fields_labels:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.")
    else:
        search_values = search_values_input.strip().split()
        
        st.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é: '{search_criterion_label}' –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π: {search_values}")
        # st.write(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {', '.join(selected_display_fields_labels)}")
        
        # Prepare selected_fields_map for the db_utils function
        selected_fields_map_for_query = {}
        for label in selected_display_fields_labels:
            if label in common_fields_options:
                selected_fields_map_for_query[label] = common_fields_options[label]
            elif label in ozon_fields_options:
                selected_fields_map_for_query[label] = ozon_fields_options[label]
            elif label in wb_fields_options:
                selected_fields_map_for_query[label] = wb_fields_options[label]

        with st.spinner("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."):
            results_df = find_cross_marketplace_matches(
                conn,
                search_criterion=search_criterion, # 'wb_sku', 'oz_sku', etc.
                search_values=search_values,
                selected_fields_map=selected_fields_map_for_query
            )

        st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–æ–∏—Å–∫–∞")
        if not results_df.empty:
            st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results_df)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
            # Reorder columns to have "Search_Value" first, then others as selected by user
            # The find_cross_marketplace_matches function already aliases the search criterion column to "Search_Value"
            # and other columns to their UI labels.
            
            # Ensure the "Search_Value" column (if it exists) is first.
            cols = list(results_df.columns)
            if "Search_Value" in cols:
                cols.insert(0, cols.pop(cols.index("Search_Value")))
                # Ensure other selected columns follow the order from multiselect if possible,
                # though dict ordering for selected_fields_map_for_query might not preserve it perfectly.
                # For now, just ensuring Search_Value is first and others follow is good.
                # A more robust reordering would map selected_display_fields_labels to the actual column names in results_df
                ordered_cols = ["Search_Value"]
                for label in selected_display_fields_labels: # These are the keys from selected_fields_map_for_query
                    if label in results_df.columns and label != "Search_Value":
                        ordered_cols.append(label)
                # Add any remaining columns from results_df not in ordered_cols (e.g. if a default field was added by search fn)
                for col in results_df.columns:
                    if col not in ordered_cols:
                        ordered_cols.append(col)
                results_df = results_df[ordered_cols]
            
            st.dataframe(results_df, use_container_width=True, hide_index=True)
        else:
            st.info("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

if conn:
    conn.close() 
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–±–æ—Ä–∞ wb_sku –ø–æ —Ç–µ–∫—É—â–µ–º—É –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É —Ç–æ–≤–∞—Ä–æ–≤ –û–∑–æ–Ω.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –°–±–æ—Ä wb_sku –¥–ª—è –≤—Å–µ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –û–∑–æ–Ω –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö oz_sku
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
- –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–≤—è–∑–µ–π
- –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel

–ê–≤—Ç–æ—Ä: DataFox SL Project
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import streamlit as st
import pandas as pd
import duckdb
from datetime import datetime
import io
from utils.db_connection import get_connection_and_ensure_schema
from utils.oz_to_wb_collector import (
    OzToWbCollector, 
    WbSkuCollectionResult,
    collect_wb_skus_for_all_oz_products,
    collect_wb_skus_for_oz_list
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–±–æ—Ä WB SKU –ø–æ –û–∑–æ–Ω",
    page_icon="üîó",
    layout="wide"
)

st.title("üîó –°–±–æ—Ä WB SKU –ø–æ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É –û–∑–æ–Ω")
st.markdown("""
–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ wb_sku –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –û–∑–æ–Ω, 
–∏—Å–ø–æ–ª—å–∑—É—è **–∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤** –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫.
""")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@st.cache_resource
def get_database_connection():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return get_connection_and_ensure_schema()

db_conn = get_database_connection()

if not db_conn:
    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    st.stop()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞")

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
collection_mode = st.sidebar.radio(
    "–†–µ–∂–∏–º —Å–±–æ—Ä–∞:",
    ["üîÑ –í–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –û–∑–æ–Ω", "üìù –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ oz_sku"],
    help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ oz_products –∏–ª–∏ —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö oz_sku
oz_skus_input = []
if collection_mode == "üìù –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ oz_sku":
    st.sidebar.subheader("üìù –°–ø–∏—Å–æ–∫ OZ SKU")
    
    # –°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞
    input_method = st.sidebar.radio(
        "–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ oz_sku:",
        ["‚úçÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥", "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"],
        help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —É–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ oz_sku –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    
    if input_method == "‚úçÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥":
        oz_skus_text = st.sidebar.text_area(
            "–í–≤–µ–¥–∏—Ç–µ oz_sku (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
            height=200,
            help="–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ oz_sku, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ"
        )
        
        if oz_skus_text.strip():
            oz_skus_input = [
                line.strip() for line in oz_skus_text.split('\n') 
                if line.strip() and line.strip().isdigit()
            ]
            st.sidebar.success(f"‚úÖ –í–≤–µ–¥–µ–Ω–æ {len(oz_skus_input)} oz_sku")
    
    elif input_method == "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞":
        uploaded_file = st.sidebar.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å oz_sku:",
            type=['txt', 'csv', 'xlsx'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å oz_sku –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –∏–ª–∏ –ø–æ —Å—Ç—Ä–æ—á–Ω–æ"
        )
        
        if uploaded_file:
            try:
                if uploaded_file.name.endswith('.txt'):
                    content = uploaded_file.read().decode('utf-8')
                    oz_skus_input = [
                        line.strip() for line in content.split('\n') 
                        if line.strip() and line.strip().isdigit()
                    ]
                elif uploaded_file.name.endswith('.csv'):
                    df = pd.read_csv(uploaded_file)
                    oz_skus_input = df.iloc[:, 0].astype(str).tolist()
                elif uploaded_file.name.endswith('.xlsx'):
                    df = pd.read_excel(uploaded_file)
                    oz_skus_input = df.iloc[:, 0].astype(str).tolist()
                
                oz_skus_input = [sku for sku in oz_skus_input if str(sku).strip().isdigit()]
                st.sidebar.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(oz_skus_input)} oz_sku")
                
            except Exception as e:
                st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
st.sidebar.subheader("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

include_details = st.sidebar.checkbox(
    "–í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ WB SKU",
    value=True,
    help="–í–∫–ª—é—á–∞–µ—Ç —Ü–µ–Ω—ã, –æ—Å—Ç–∞—Ç–∫–∏, –±—Ä–µ–Ω–¥—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö wb_sku"
)

auto_export = st.sidebar.checkbox(
    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel",
    value=False,
    help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel —Ñ–æ—Ä–º–∞—Ç–µ"
)

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if collection_mode == "üîÑ –í–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –û–∑–æ–Ω":
        st.info("üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã oz_products")
    else:
        if oz_skus_input:
            st.success(f"üìù –ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ {len(oz_skus_input)} oz_sku")
        else:
            st.warning("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ oz_sku –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

with col2:
    st.header("‚ÑπÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º")
    st.markdown("""
    **–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã:**
    - **WB**: –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ —á–µ—Ä–µ–∑ `;`
    - **OZ**: –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    
    **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
    - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ wb_sku
    - OZ –±–µ–∑ —Å–≤—è–∑–µ–π —Å WB  
    - –î—É–±–ª–∏–∫–∞—Ç—ã —Å–≤—è–∑–µ–π
    """)

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
if st.button("üîó –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä WB SKU", type="primary", use_container_width=True):
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if collection_mode == "üìù –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ oz_sku" and not oz_skus_input:
        st.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã oz_sku –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        st.stop()
    
    # –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞
    with st.spinner("üîÑ –°–±–æ—Ä wb_sku –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."):
        try:
            if collection_mode == "üîÑ –í–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –û–∑–æ–Ω":
                result = collect_wb_skus_for_all_oz_products(db_conn)
            else:
                result = collect_wb_skus_for_oz_list(db_conn, oz_skus_input)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—Å–∏–∏
            st.session_state.collection_result = result
            st.session_state.collection_timestamp = datetime.now()
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ wb_sku: {e}")
            st.stop()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if 'collection_result' in st.session_state:
    result: WbSkuCollectionResult = st.session_state.collection_result
    timestamp = st.session_state.collection_timestamp
    
    st.success("‚úÖ –°–±–æ—Ä wb_sku –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    st.caption(f"üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö WB SKU",
            result.stats['unique_wb_skus_found'],
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö wb_sku –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–ª—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞"
        )
    
    with col2:
        st.metric(
            "‚úÖ OZ SKU —Å–æ —Å–≤—è–∑—è–º–∏",
            result.stats['oz_skus_with_wb_links'],
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ oz_sku –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–π–¥–µ–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ wb_sku"
        )
    
    with col3:
        st.metric(
            "‚ùå OZ SKU –±–µ–∑ —Å–≤—è–∑–µ–π",
            result.stats['oz_skus_without_wb_links'],
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ oz_sku –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –Ω–∞–π–¥–µ–Ω—ã wb_sku"
        )
    
    with col4:
        st.metric(
            "üîÄ –î—É–±–ª–∏–∫–∞—Ç—ã —Å–≤—è–∑–µ–π",
            result.stats['duplicate_mappings_count'],
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ oz_sku —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ wb_sku"
        )
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.header("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    tab1, tab2, tab3, tab4 = st.tabs([
        "üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ WB SKU", 
        "‚ùå OZ SKU –±–µ–∑ —Å–≤—è–∑–µ–π", 
        "üîÄ –î—É–±–ª–∏–∫–∞—Ç—ã —Å–≤—è–∑–µ–π",
        "üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    ])
    
    with tab1:
        st.subheader("üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ WB SKU")
        
        if result.wb_skus:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            wb_skus_df = pd.DataFrame({
                'wb_sku': result.wb_skus
            })
            
            st.dataframe(
                wb_skus_df,
                use_container_width=True,
                height=400
            )
            
            st.caption(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(result.wb_skus)} wb_sku")
        else:
            st.info("üì≠ WB SKU –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    with tab2:
        st.subheader("‚ùå OZ SKU –±–µ–∑ —Å–≤—è–∑–µ–π —Å WB")
        
        if result.no_links_oz_skus:
            oz_without_wb_df = pd.DataFrame({
                'oz_sku': result.no_links_oz_skus
            })
            
            st.dataframe(
                oz_without_wb_df,
                use_container_width=True,
                height=400
            )
            
            st.caption(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(result.no_links_oz_skus)} oz_sku –±–µ–∑ —Å–≤—è–∑–µ–π")
        else:
            st.success("üéâ –í—Å–µ oz_sku –∏–º–µ—é—Ç —Å–≤—è–∑–∏ —Å wb_sku!")
    
    with tab3:
        st.subheader("üîÄ –î—É–±–ª–∏–∫–∞—Ç—ã —Å–≤—è–∑–µ–π")
        
        if result.duplicate_mappings:
            st.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã oz_sku —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ wb_sku")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ DataFrame
            duplicates_df = pd.DataFrame(result.duplicate_mappings)
            
            st.dataframe(
                duplicates_df,
                use_container_width=True,
                height=400
            )
            
            st.caption(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(result.duplicate_mappings)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–≤—è–∑–µ–π")
        else:
            st.success("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —Å–≤—è–∑–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    with tab4:
        st.subheader("üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        stats_df = pd.DataFrame([
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ OZ SKU', '–ó–Ω–∞—á–µ–Ω–∏–µ': result.stats['total_oz_skus_processed']},
            {'–ú–µ—Ç—Ä–∏–∫–∞': 'OZ SKU —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏', '–ó–Ω–∞—á–µ–Ω–∏–µ': result.stats['oz_skus_with_barcodes']},
            {'–ú–µ—Ç—Ä–∏–∫–∞': 'OZ SKU –±–µ–∑ —Å–≤—è–∑–µ–π WB', '–ó–Ω–∞—á–µ–Ω–∏–µ': len(result.no_links_oz_skus)},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö WB SKU –Ω–∞–π–¥–µ–Ω–æ', '–ó–Ω–∞—á–µ–Ω–∏–µ': result.stats['unique_wb_skus_found']},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–≤—è–∑–µ–π', '–ó–Ω–∞—á–µ–Ω–∏–µ': len(result.duplicate_mappings)},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–í—Å–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': result.stats['total_barcode_matches']},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–µ–∫)', '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{result.stats['processing_time_seconds']:.3f}"},
        ])
        
        st.dataframe(stats_df, use_container_width=True)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        if result.stats['total_oz_skus_processed'] > 0:
            oz_with_wb = result.stats['total_oz_skus_processed'] - len(result.no_links_oz_skus)
            coverage_percent = (oz_with_wb / result.stats['total_oz_skus_processed']) * 100
            st.metric(
                "üìà –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–≤—è–∑—è–º–∏",
                f"{coverage_percent:.1f}%",
                help="–ü—Ä–æ—Ü–µ–Ω—Ç oz_sku –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–π–¥–µ–Ω—ã wb_sku"
            )
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.header("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìÅ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel", type="secondary"):
            try:
                # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
                output = io.BytesIO()
                
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    # –õ–∏—Å—Ç 1: –ù–∞–π–¥–µ–Ω–Ω—ã–µ wb_sku
                    if result.wb_skus:
                        wb_skus_df = pd.DataFrame({
                            'wb_sku': result.wb_skus
                        })
                        wb_skus_df.to_excel(
                            writer, 
                            sheet_name='Found_WB_SKUs', 
                            index=False
                        )
                    
                    # –õ–∏—Å—Ç 2: OZ SKU –±–µ–∑ —Å–≤—è–∑–µ–π —Å WB
                    if result.no_links_oz_skus:
                        pd.DataFrame({
                            'oz_sku_without_wb_links': result.no_links_oz_skus
                        }).to_excel(
                            writer, 
                            sheet_name='OZ_No_Links', 
                            index=False
                        )
                    
                    # –õ–∏—Å—Ç 3: –î—É–±–ª–∏–∫–∞—Ç—ã —Å–≤—è–∑–µ–π
                    if result.duplicate_mappings:
                        duplicates_df = pd.DataFrame(result.duplicate_mappings)
                        duplicates_df.to_excel(
                            writer, 
                            sheet_name='Duplicate_Mappings', 
                            index=False
                        )
                    
                    # –õ–∏—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    stats_df.to_excel(writer, sheet_name='Statistics', index=False)
                
                output.seek(0)
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å
                filename = f"wb_sku_collection_{timestamp.strftime('%Y%m%d_%H%M%S')}.xlsx"
                
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                    data=output.getvalue(),
                    file_name=filename,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
                st.success("‚úÖ Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
    
    with col2:
        if st.button("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ WB SKU", type="secondary"):
            if result.wb_skus:
                wb_skus_text = '\n'.join(result.wb_skus)
                st.text_area(
                    "–°–ø–∏—Å–æ–∫ WB SKU (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ):",
                    value=wb_skus_text,
                    height=200
                )
            else:
                st.info("üì≠ –ù–µ—Ç WB SKU –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

# –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
with st.expander("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤"):
    st.markdown("""
    ### üîç –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
    
    **–ü—Ä–æ–±–ª–µ–º–∞:** –£ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤, –Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω.
    
    **–ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è Wildberries:**
    - –®—Ç—Ä–∏—Ö–∫–æ–¥—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–æ–ª–µ `wb_barcodes` –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ `;`
    - **–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥ = –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ**
    - –ü—Ä–∏–º–µ—Ä: `"123;456;789"` ‚Üí –∞–∫—Ç—É–∞–ª—å–Ω—ã–π `"789"`
    
    **–ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è Ozon:**
    - –®—Ç—Ä–∏—Ö–∫–æ–¥—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ `oz_barcodes`
    - **–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥ = –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É (ROWID)**
    - –ü—Ä–∏–º–µ—Ä: —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è `["4811566457476", "4815550273875", "4815694566628"]` ‚Üí –∞–∫—Ç—É–∞–ª—å–Ω—ã–π `"4815694566628"`
    
    **–õ–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:**
    - –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥ OZ –∏—â–µ—Ç—Å—è —Å—Ä–µ–¥–∏ **–≤—Å–µ—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ WB —Ç–æ–≤–∞—Ä–æ–≤** (–Ω–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö)
    - –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ú–ü –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    
    **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:**
    - ‚úÖ –ù–∞—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
    - ‚úÖ –ò–∑–±–µ–≥–∞–µ—Ç –ø–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–µ–π –∏–∑-–∑–∞ —Ä–∞–∑–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
    - ‚úÖ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ OZ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
    
    **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Å–≤—è–∑—è–º–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
    """)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
with st.expander("üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"):
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü")
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        tables_stats = []
        
        # oz_products
        oz_products_count = db_conn.execute("SELECT COUNT(*) FROM oz_products").fetchone()[0]
        tables_stats.append({"–¢–∞–±–ª–∏—Ü–∞": "oz_products", "–ó–∞–ø–∏—Å–µ–π": oz_products_count})
        
        # oz_barcodes  
        oz_barcodes_count = db_conn.execute("SELECT COUNT(*) FROM oz_barcodes").fetchone()[0]
        tables_stats.append({"–¢–∞–±–ª–∏—Ü–∞": "oz_barcodes", "–ó–∞–ø–∏—Å–µ–π": oz_barcodes_count})
        
        # wb_products
        wb_products_count = db_conn.execute("SELECT COUNT(*) FROM wb_products").fetchone()[0]
        tables_stats.append({"–¢–∞–±–ª–∏—Ü–∞": "wb_products", "–ó–∞–ø–∏—Å–µ–π": wb_products_count})
        
        stats_df = pd.DataFrame(tables_stats)
        st.dataframe(stats_df, use_container_width=True)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}") 
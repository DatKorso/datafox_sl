"""
Streamlit page for Cards Matcher - —Ç–æ–≤–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏.

–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è:
- –ó–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ Ozon
- –ê–Ω–∞–ª–∏–∑–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ–±—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é/—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
"""
import streamlit as st
import pandas as pd
import os
from utils.db_connection import connect_db
from utils.config_utils import get_report_path, set_report_path, get_data_filter
from utils.db_crud import import_data_from_dataframe
from utils.data_cleaner import apply_data_cleaning
from utils.db_schema import get_table_schema_definition

st.set_page_config(page_title="Cards Matcher - Marketplace Analyzer", layout="wide")
st.title("üÉè Cards Matcher - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏")
st.markdown("---")

# --- Database Connection ---
conn = connect_db()
if not conn:
    st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    if st.button("Go to Settings"):
        st.switch_page("pages/3_Settings.py")
    st.stop()

# --- Introduction ---
st.markdown("""
### üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è
Cards Matcher –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö:

**–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤**: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –æ–¥–Ω–æ–π —Å–µ—Ä–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏.

**–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤**: –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–∑ –æ–±—â–∏—Ö –≥—Ä—É–ø–ø –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.

**–ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤**: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ.
""")

# --- Tabs ---
tab1, tab2 = st.tabs(["üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ Ozon", "üîó –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"])

with tab1:
    st.header("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ Ozon")
    
    st.markdown("""
    ### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É
    - –§–æ—Ä–º–∞—Ç: `.xlsx`
    - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    - –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –¥–∞–ª–µ–µ: –¥–∞–Ω–Ω—ã–µ
    
    ### –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
    | –ö–æ–ª–æ–Ω–∫–∞ –≤ —Ñ–∞–π–ª–µ | –ü–æ–ª–µ –≤ –ë–î | –û–ø–∏—Å–∞–Ω–∏–µ |
    |---|---|---|
    | `RezonitemID` | `oz_sku` | SKU —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Ozon |
    | `–ê—Ä—Ç–∏–∫—É–ª` | `oz_vendor_code` | –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ |
    | `–†–µ–π—Ç–∏–Ω–≥ (1)` | `rating` | –†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ (1-5) |
    | `–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤` | `rev_number` | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ |
    """)
    
    # --- Brand Filter Information ---
    st.markdown("---")
    st.subheader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–µ–Ω–¥–æ–≤")
    
    brands_filter = get_data_filter("oz_category_products_brands")
    
    if brands_filter and brands_filter.strip():
        allowed_brands = [brand.strip() for brand in brands_filter.split(";") if brand.strip()]
        if allowed_brands:
            st.success(f"‚úÖ **–§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω**: –ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å–ª–µ–¥—É—é—â–∏—Ö –±—Ä–µ–Ω–¥–æ–≤:")
            st.info("üìã **–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã**: " + ", ".join(allowed_brands))
            
            with st.expander("üí° –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤"):
                st.markdown("""
                1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª **Settings** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
                2. –ù–∞–π–¥–∏—Ç–µ —Å–µ–∫—Ü–∏—é **Data Filters**
                3. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ–ª–µ **Ozon Category Products - Brands Filter**
                4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                
                **–§–æ—Ä–º–∞—Ç**: `–ë—Ä–µ–Ω–¥1;–ë—Ä–µ–Ω–¥2;–ë—Ä–µ–Ω–¥3` (—Ä–∞–∑–¥–µ–ª—è–π—Ç–µ —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π)
                """)
        else:
            st.info("üîç **–§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω** - –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        st.info("üîç **–§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω** - –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        
        with st.expander("‚öôÔ∏è –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤"):
            st.markdown("""
            –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±—Ä–µ–Ω–¥–∞–º:
            
            1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª **Settings** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
            2. –ù–∞–π–¥–∏—Ç–µ —Å–µ–∫—Ü–∏—é **Data Filters**
            3. –í –ø–æ–ª–µ **Ozon Category Products - Brands Filter** —É–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
            4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            
            **–ü—Ä–∏–º–µ—Ä**: `Shuzzi;Nike;Adidas` - –∑–∞–≥—Ä—É–∑—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —ç—Ç–∏—Ö –±—Ä–µ–Ω–¥–æ–≤
            """)
    
    # --- File Selection ---
    st.subheader("üìÅ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Get default path from settings
        default_path = get_report_path("oz_card_rating_xlsx")
        
        # File selection method
        file_source = st.radio(
            "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª:",
            ["üìÇ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫", "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"],
            index=0 if default_path else 1,
            key="rating_file_source"
        )
    
    with col2:
        st.info("üí° **–°–æ–≤–µ—Ç**: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–∞–∑–¥–µ–ª–µ Settings –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
    
    selected_file_path = None
    
    if file_source == "üìÇ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫":
        if default_path:
            if os.path.exists(default_path):
                selected_file_path = default_path
                st.success(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: `{os.path.basename(default_path)}`")
                st.caption(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {default_path}")
            else:
                st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {default_path}")
                st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")
        else:
            st.warning("‚ö†Ô∏è –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            
            # Allow setting path directly
            st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É")
            new_path = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ Ozon:",
                placeholder="/path/to/ozon_ratings.xlsx",
                help="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É .xlsx —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"
            )
            
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Ç—å", key="save_rating_path"):
                if new_path and new_path.strip():
                    try:
                        set_report_path("oz_card_rating_xlsx", new_path.strip())
                        st.success("‚úÖ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏: {e}")
                else:
                    st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
    
    else:  # Upload file
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ Ozon:",
            type=['xlsx'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ RezonitemID, –ê—Ä—Ç–∏–∫—É–ª, –†–µ–π—Ç–∏–Ω–≥ (1), –ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤",
            key="rating_file_uploader"
        )
        
        if uploaded_file is not None:
            # Save uploaded file temporarily
            temp_path = f"temp_oz_rating_{uploaded_file.name}"
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            selected_file_path = temp_path
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: `{uploaded_file.name}`")
    
    # --- Import Section ---
    if selected_file_path:
        st.markdown("---")
        st.subheader("üì• –ò–º–ø–æ—Ä—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.info("üìÅ **–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É**")
            st.caption(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {selected_file_path}")
            st.warning("‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")
        
        with col2:
            if st.button("üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏", type="primary", key="import_ratings"):
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
                    try:
                        # Read Excel file
                        schema_def = get_table_schema_definition("oz_card_rating")
                        read_params = schema_def.get("read_params", {})
                        
                        st.info("üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
                        import_df = pd.read_excel(selected_file_path, **read_params)
                        
                        if not import_df.empty:
                            # Show file statistics
                            st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(import_df)} –∑–∞–ø–∏—Å–µ–π")
                            
                            # Quick validation
                            required_cols = ['RezonitemID', '–ê—Ä—Ç–∏–∫—É–ª', '–†–µ–π—Ç–∏–Ω–≥ (1)', '–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤']
                            missing_cols = [col for col in required_cols if col not in import_df.columns]
                            
                            if missing_cols:
                                st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
                            else:
                                # Display quick stats
                                col1, col2, col3 = st.columns(3)
                                with col1:
                                    st.metric("üìä –°—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏", len(import_df))
                                with col2:
                                    unique_skus = len(import_df.get('RezonitemID', pd.Series()).dropna().unique())
                                    st.metric("üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SKU", unique_skus)
                                with col3:
                                    avg_rating = import_df.get('–†–µ–π—Ç–∏–Ω–≥ (1)', pd.Series()).mean()
                                    if pd.notna(avg_rating):
                                        st.metric("‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"{avg_rating:.2f}")
                                    else:
                                        st.metric("‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥", "N/A")
                                
                                # Migrate schema if needed
                                st.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã...")
                                from utils.db_crud import apply_brand_filter_for_rating, migrate_oz_card_rating_schema
                                migrate_oz_card_rating_schema(conn)
                                
                                # Apply brand filter if configured
                                st.info("üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤...")
                                import_df = apply_brand_filter_for_rating(import_df)
                                
                                if import_df.empty:
                                    st.warning("‚ö†Ô∏è –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
                                    st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
                                else:
                                    # Import data using existing infrastructure
                                    st.info("üíæ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É...")
                                    success, count, error_message = import_data_from_dataframe(
                                        con=conn,
                                        df=import_df,
                                        table_name="oz_card_rating"
                                    )
                                    
                                    if success:
                                        st.success("‚úÖ –†–µ–π—Ç–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
                                        st.info(f"üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É oz_card_rating")
                                        
                                        # Show preview of imported data
                                        with st.expander("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫)"):
                                            st.dataframe(import_df.head(10), use_container_width=True, hide_index=True)
                                        
                                        # Cleanup temp file if it was uploaded
                                        if selected_file_path.startswith("temp_"):
                                            try:
                                                os.remove(selected_file_path)
                                            except:
                                                pass
                                    else:
                                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {error_message}")
                        else:
                            st.error("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
                            
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
                        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö")
        
        # Add info section about what happens during import
        with st.expander("‚ÑπÔ∏è –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ"):
            st.markdown("""
            **–≠—Ç–∞–ø—ã –∏–º–ø–æ—Ä—Ç–∞:**
            1. üìñ **–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel** —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (–∑–∞–ø—è—Ç–∞—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
            2. ‚úÖ **–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            3. üéØ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤** (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Settings)
            4. üóëÔ∏è **–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã** - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            5. üíæ **–ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö** –≤ —Ç–∞–±–ª–∏—Ü—É oz_card_rating
            6. ‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞** —Å –ø–æ–∫–∞–∑–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
            **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**
            - `RezonitemID` ‚Üí BIGINT (SKU —Ç–æ–≤–∞—Ä–∞)
            - `–ê—Ä—Ç–∏–∫—É–ª` ‚Üí VARCHAR (–∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)  
            - `–†–µ–π—Ç–∏–Ω–≥ (1)` ‚Üí DECIMAL(3,2) (—Ä–µ–π—Ç–∏–Ω–≥ 0.00-5.00)
            - `–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤` ‚Üí INTEGER (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤)
            """)
    else:
        st.info("üëÜ **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –≤—ã—à–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∞**")

with tab2:
    st.header("üîó –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    
    # Check if rating data is available
    try:
        rating_check = conn.execute("SELECT COUNT(*) FROM oz_card_rating").fetchone()
        has_rating_data = rating_check and rating_check[0] > 0
    except:
        has_rating_data = False
    
    if not has_rating_data:
        st.info("üì≠ **–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤.** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ Ozon.")
        
        st.markdown("""
        ### –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
        
        #### üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤
        - –í–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ WB (wb_sku)
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ Ozon —á–µ—Ä–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
        - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ wb_sku –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö oz_sku
        - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏–∑ punta_table (–º–æ–¥–µ–ª—å, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –¥—Ä.)
        
        #### üìä –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø—ã
        - –í—ã—è–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º: —Ä–∞–∑–º–µ—Ä, —Ä–µ–π—Ç–∏–Ω–≥–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        """)
    else:
        # Import new helper functions
        from utils.cards_matcher_helpers import (
            get_wb_sku_ratings_with_oz_data, get_punta_table_data_for_wb_skus,
            create_product_groups, get_available_grouping_columns, analyze_group_quality,
            test_wb_sku_connections
        )
        
        st.markdown("### üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        
        # Input section for WB SKUs
        col1, col2 = st.columns([2, 1])
        
        with col1:
            wb_skus_input = st.text_area(
                "**–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã WB (wb_sku):**",
                height=150,
                help="–í–≤–µ–¥–∏—Ç–µ wb_sku —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.\n–ü—Ä–∏–º–µ—Ä: 123456 789012 –∏–ª–∏\n123456\n789012",
                placeholder="123456 789012\n345678\n901234"
            )
        
        with col2:
            st.info("""
            **üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
            
            1. –í–≤–æ–¥–∏—Ç–µ wb_sku
            2. –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ oz_sku —á–µ—Ä–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
            3. –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ wb_sku
            4. –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            """)
        
        # Parse WB SKUs from input
        wb_skus = []
        if wb_skus_input.strip():
            # Parse input - support spaces, commas, and newlines
            import re
            wb_skus_raw = re.split(r'[,\s\n]+', wb_skus_input.strip())
            wb_skus = [sku.strip() for sku in wb_skus_raw if sku.strip().isdigit()]
        
        if wb_skus:
            st.success(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(wb_skus)} –≤–∞–ª–∏–¥–Ω—ã—Ö wb_sku")
            
            # Show preview of parsed SKUs
            with st.expander("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö wb_sku"):
                st.write(", ".join(wb_skus[:20]) + ("..." if len(wb_skus) > 20 else ""))
        
        # Grouping configuration
        st.markdown("---")
        st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        
        # Get available columns from punta_table
        available_columns = get_available_grouping_columns(conn) if wb_skus else []
        
        col1, col2 = st.columns(2)
        
        with col1:
            min_group_rating = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã", 
                0.0, 5.0, 3.0, 0.1,
                help="–ò–∑ –≥—Ä—É–ø–ø –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã wb_sku —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —ç—Ç–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"
            )
        
        with col2:
            # Grouping columns selection
            if available_columns:
                st.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(available_columns)} –∫–æ–ª–æ–Ω–æ–∫ –≤ punta_table")
                
                grouping_columns = st.multiselect(
                    "–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑ punta_table:",
                    options=available_columns,
                    default=available_columns[:2] if len(available_columns) >= 2 else available_columns,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—ã"
                )
            else:
                grouping_columns = []
                if wb_skus:
                    st.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ punta_table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º.")
        
        # Analysis and grouping
        if wb_skus:
            st.markdown("---")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            with st.expander("üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", expanded=False):
                st.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö wb_sku")
                
                test_wb_sku = st.text_input(
                    "–¢–µ—Å—Ç–æ–≤—ã–π wb_sku:",
                    value="191826729",
                    help="–í–≤–µ–¥–∏—Ç–µ wb_sku –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö oz_sku"
                )
                
                if st.button("üîç –ù–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", key="test_linked"):
                    if test_wb_sku.strip():
                        with st.spinner("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤..."):
                            from utils.cards_matcher_helpers import test_wb_sku_connections
                            
                            # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                            test_results = test_wb_sku_connections(conn, test_wb_sku.strip(), show_debug=True)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                            
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("–®—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ WB", test_results['wb_barcodes_count'])
                            with col2:
                                st.metric("–°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", test_results['linked_products_count'])
                            with col3:
                                st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö OZ SKU", test_results['unique_oz_sku_count'])
                            with col4:
                                st.metric("–° —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏", test_results['rated_oz_sku_count'])
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            st.subheader("üîç –ü–æ—à–∞–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
                            for info in test_results['debug_info']:
                                if info.startswith("‚úÖ"):
                                    st.success(info)
                                elif info.startswith("‚ùå"):
                                    st.error(info)
                                else:
                                    st.info(info)
                            
                            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            if test_results['final_rating_data'] is not None and not test_results['final_rating_data'].empty:
                                st.subheader("üìã –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                                st.dataframe(test_results['final_rating_data'], use_container_width=True)
                                
                                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                row = test_results['final_rating_data'].iloc[0]
                                st.info(f"""
                                **WB SKU:** {row['wb_sku']}  
                                **–°–≤—è–∑–∞–Ω–Ω—ã–µ OZ SKU:** {row['oz_skus_list']}  
                                **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ OZ SKU:** {row['oz_sku_count']}  
                                **–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:** {row['avg_rating']}  
                                **–î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:** {row['min_rating']} - {row['max_rating']}  
                                **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤:** {row['total_reviews']}
                                """)
                            else:
                                st.warning("‚ùå –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã")
                    else:
                        st.warning("–í–≤–µ–¥–∏—Ç–µ wb_sku –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤", type="primary", key="create_groups"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø..."):
                    
                    # Step 1: Get WB SKU ratings
                    wb_ratings_df = get_wb_sku_ratings_with_oz_data(conn, wb_skus)
                    
                    if wb_ratings_df.empty:
                        st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã Ozon –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö wb_sku")
                        st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
                        st.info("‚Ä¢ –£–∫–∞–∑–∞–Ω–Ω—ã–µ wb_sku —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        st.info("‚Ä¢ –£ —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å—Ç—å –æ–±—â–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ Ozon")
                        st.info("‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö oz_sku")
                    else:
                        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è {len(wb_ratings_df)} wb_sku")
                        
                        # Step 2: Create groups
                        groups_df = create_product_groups(
                            conn=conn,
                            wb_skus=wb_skus,
                            grouping_columns=grouping_columns,
                            min_group_rating=min_group_rating
                        )
                        
                        if groups_df.empty:
                            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
                            st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
                            st.info("‚Ä¢ –°–Ω–∏–∑–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥")
                            st.info("‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∏–∑–∫–æ—Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
                            st.info("‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                        else:
                            # Step 3: Show results
                            st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                            
                            # Quality analysis
                            quality_metrics = analyze_group_quality(groups_df)
                            
                            if quality_metrics:
                                # Show summary metrics
                                col1, col2, col3, col4 = st.columns(4)
                                
                                with col1:
                                    st.metric("üîó –í—Å–µ–≥–æ –≥—Ä—É–ø–ø", quality_metrics['total_groups'])
                                
                                with col2:
                                    st.metric("üì¶ –¢–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", quality_metrics['total_products'])
                                
                                with col3:
                                    st.metric("‚≠ê –°—Ä. —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø", quality_metrics['avg_group_rating'])
                                
                                with col4:
                                    st.metric("üèÜ –û—Ç–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø", quality_metrics['excellent_groups_count'])
                                
                                # Show detailed results table
                                st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º")
                                
                                # Prepare display columns
                                display_columns = [
                                    'group_id', 'wb_sku', 'avg_rating', 'oz_sku_count', 
                                    'oz_skus_list', 'total_reviews', 'wb_count', 
                                    'group_avg_rating', 'total_oz_sku_count', 'group_total_reviews',
                                    'group_recommendation'
                                ]
                                
                                # Add grouping columns if they exist
                                if grouping_columns:
                                    for col in grouping_columns:
                                        if col in groups_df.columns:
                                            display_columns.insert(-1, col)  # Insert before recommendation
                                
                                # Filter available columns
                                available_display_columns = [col for col in display_columns if col in groups_df.columns]
                                
                                # Configure column names for display
                                column_config = {
                                    'group_id': st.column_config.NumberColumn('–ì—Ä—É–ø–ø–∞ ‚Ññ', width="small"),
                                    'wb_sku': 'WB SKU',
                                    'avg_rating': st.column_config.NumberColumn('–†–µ–π—Ç–∏–Ω–≥ WB', format="%.2f"),
                                    'oz_sku_count': st.column_config.NumberColumn('–ö–æ–ª-–≤–æ OZ SKU', width="small"),
                                    'oz_skus_list': st.column_config.TextColumn('OZ SKU —Å–ø–∏—Å–æ–∫', width="medium"),
                                    'total_reviews': st.column_config.NumberColumn('–û—Ç–∑—ã–≤–æ–≤', width="small"),
                                    'wb_count': st.column_config.NumberColumn('WB –≤ –≥—Ä—É–ø–ø–µ', width="small"),
                                    'group_avg_rating': st.column_config.NumberColumn('–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã', format="%.2f"),
                                    'total_oz_sku_count': st.column_config.NumberColumn('–í—Å–µ–≥–æ OZ SKU', width="small"),
                                    'group_total_reviews': st.column_config.NumberColumn('–û—Ç–∑—ã–≤–æ–≤ –≥—Ä—É–ø–ø—ã', width="small"),
                                    'group_recommendation': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'
                                }
                                
                                st.dataframe(
                                    groups_df[available_display_columns],
                                    use_container_width=True,
                                    hide_index=True,
                                    column_config=column_config
                                )
                                
                                # Group analysis by recommendations
                                st.markdown("### üéØ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
                                
                                recommendations = groups_df['group_recommendation'].value_counts()
                                
                                for recommendation, count in recommendations.items():
                                    color = "green" if "–û—Ç–ª–∏—á–Ω–∞—è" in recommendation else \
                                           "blue" if "–•–æ—Ä–æ—à–∞—è" in recommendation else \
                                           "orange" if "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è" in recommendation else \
                                           "red" if "–ò—Å–∫–ª—é—á–∏—Ç—å" in recommendation else "gray"
                                    
                                    st.markdown(f":{color}[**{recommendation}**: {count} –≥—Ä—É–ø–ø]")
                                
                                # Export functionality
                                st.markdown("---")
                                col1, col2 = st.columns(2)
                                
                                with col1:
                                    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel"):
                                        try:
                                            from datetime import datetime
                                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                                            filename = f"product_groups_{timestamp}.xlsx"
                                            
                                            groups_df.to_excel(filename, index=False)
                                            
                                            with open(filename, "rb") as file:
                                                st.download_button(
                                                    label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª Excel",
                                                    data=file.read(),
                                                    file_name=filename,
                                                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                                                )
                                        except Exception as e:
                                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
                                
                                with col2:
                                    st.info("üí° **–°–æ–≤–µ—Ç**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ")
        
        else:
            st.info("üëÜ **–í–≤–µ–¥–∏—Ç–µ wb_sku –≤—ã—à–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤**")

# --- Current Data Statistics ---
if conn:
    st.markdown("---")
    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # Check if table exists and get statistics
        rating_stats = conn.execute("""
            SELECT 
                COUNT(*) as total_records,
                COUNT(DISTINCT oz_sku) as unique_skus,
                AVG(rating) as avg_rating,
                MIN(rating) as min_rating,
                MAX(rating) as max_rating,
                SUM(rev_number) as total_reviews
            FROM oz_card_rating
        """).fetchone()
        
        if rating_stats and rating_stats[0] > 0:
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üìä –ó–∞–ø–∏—Å–µ–π —Ä–µ–π—Ç–∏–Ω–≥–æ–≤", rating_stats[0])
            with col2:
                st.metric("üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SKU", rating_stats[1])
            with col3:
                avg_rating = rating_stats[2]
                st.metric("‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"{avg_rating:.2f}" if avg_rating else "N/A")
            with col4:
                st.metric("üí¨ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", rating_stats[5] if rating_stats[5] else 0)
            
            # Rating distribution
            with st.expander("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤", expanded=False):
                rating_dist = conn.execute("""
                    SELECT rating, COUNT(*) as count
                    FROM oz_card_rating
                    WHERE rating IS NOT NULL
                    GROUP BY rating
                    ORDER BY rating
                """).fetchdf()
                
                if not rating_dist.empty:
                    st.bar_chart(rating_dist.set_index('rating'))
                else:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        else:
            st.info("üì≠ –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ Ozon' –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")
            
    except Exception as e:
        if "no such table" in str(e).lower():
            st.info("üì≠ –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞.")
        else:
            st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")

# Close connection
if conn:
    conn.close() 
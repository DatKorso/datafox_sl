"""
Streamlit page for WB Recommendations - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è WB —Ç–æ–≤–∞—Ä–æ–≤.

–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è:
- –ü–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ WB SKU –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –≠–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É Excel/CSV
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞

–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ WB SKU
2. –°–∏—Å—Ç–µ–º–∞ –æ–±–æ–≥–∞—â–∞–µ—Ç WB —Ç–æ–≤–∞—Ä—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Ozon —á–µ—Ä–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
3. –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
4. –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
"""

import streamlit as st
import pandas as pd
import time
import io
import logging
from typing import List, Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Streamlit
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('wb_recommendations.log')
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from utils.db_connection import connect_db
from utils.wb_recommendations import (
    WBRecommendationProcessor, WBScoringConfig, WBProcessingStatus,
    WBProcessingResult, WBBatchResult
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üéØ WB –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", 
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üéØ WB –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
st.markdown("---")

# –î–æ–±–∞–≤–ª—è–µ–º debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
if st.checkbox("üêõ Debug —Ä–µ–∂–∏–º", value=False):
    st.subheader("üîç Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    debug_container = st.container()
    
    with debug_container:
        st.write("**–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**")
        st.json({
            "session_state_keys": list(st.session_state.keys()),
            "wb_recommendation_processor": st.session_state.get('wb_recommendation_processor') is not None,
            "wb_batch_result": st.session_state.get('wb_batch_result') is not None,
            "wb_skus_input": len(st.session_state.get('wb_skus_input', ''))
        })

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_resource
def get_database_connection():
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        conn = connect_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        return conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

logger.info("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã WB –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

with st.spinner("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."):
    conn = get_database_connection()

if not conn:
    st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    if st.button("üîß –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"):
        st.switch_page("pages/3_‚öôÔ∏è_–ù–∞—Å—Ç—Ä–æ–π–∫–∏.py")
    st.stop()
else:
    st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if 'wb_recommendation_processor' not in st.session_state:
    st.session_state.wb_recommendation_processor = None
    logger.info("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è wb_recommendation_processor")

if 'wb_batch_result' not in st.session_state:
    st.session_state.wb_batch_result = None
    logger.info("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è wb_batch_result")

if 'wb_skus_input' not in st.session_state:
    st.session_state.wb_skus_input = ""
    logger.info("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è wb_skus_input")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è UI ---
def render_scoring_config_ui() -> WBScoringConfig:
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    logger.info("‚öôÔ∏è –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    st.subheader("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    
    # –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞
    preset = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç:",
        ["balanced", "size_focused", "price_focused", "quality_focused", "conservative"],
        format_func=lambda x: {
            "balanced": "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
            "size_focused": "üìè –§–æ–∫—É—Å –Ω–∞ —Ä–∞–∑–º–µ—Ä–µ",
            "price_focused": "üí∞ –§–æ–∫—É—Å –Ω–∞ —Ü–µ–Ω–µ",
            "quality_focused": "‚≠ê –§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ",
            "conservative": "üîí –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π"
        }[x],
        help="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞"
    )
    
    logger.info(f"üìä –í—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç: {preset}")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        config = WBScoringConfig.get_preset(preset)
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {preset}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        config = WBScoringConfig()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
            config.max_recommendations = st.slider(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:",
                min_value=5, max_value=50, value=config.max_recommendations,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 20)"
            )
            
            config.min_recommendations = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:",
                min_value=1, max_value=25, value=config.min_recommendations,
                help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-10)"
            )
            
            config.min_score_threshold = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ score:",
                min_value=0.0, max_value=200.0, value=config.min_score_threshold,
                help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            )
        
        with col2:
            st.write("**–í–µ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:**")
            config.exact_size_weight = st.slider(
                "–¢–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä:", 
                min_value=0, max_value=200, value=config.exact_size_weight
            )
            
            config.season_match_bonus = st.slider(
                "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:", 
                min_value=0, max_value=150, value=config.season_match_bonus
            )
            
            config.price_similarity_bonus = st.slider(
                "–°—Ö–æ–∂–µ—Å—Ç—å —Ü–µ–Ω—ã:", 
                min_value=0, max_value=50, value=config.price_similarity_bonus
            )
    
    logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞: max_rec={config.max_recommendations}, min_rec={config.min_recommendations}")
    return config

def parse_wb_skus(input_text: str) -> List[str]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ WB SKU –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    logger.info(f"üìù –ü–∞—Ä—Å–∏–Ω–≥ WB SKU –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(input_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    if not input_text.strip():
        logger.info("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return []
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫, –∑–∞–ø—è—Ç—ã–º, –ø—Ä–æ–±–µ–ª–∞–º
    import re
    skus = re.split(r'[\n,;\s]+', input_text.strip())
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º
    cleaned_skus = []
    for sku in skus:
        sku = sku.strip()
        if sku and sku.isdigit():
            cleaned_skus.append(sku)
    
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cleaned_skus)} –≤–∞–ª–∏–¥–Ω—ã—Ö WB SKU")
    return cleaned_skus

def render_wb_skus_input() -> List[str]:
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI –¥–ª—è –≤–≤–æ–¥–∞ WB SKU"""
    logger.info("üìù –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI –¥–ª—è –≤–≤–æ–¥–∞ WB SKU")
    st.subheader("üìù –í–≤–æ–¥ WB SKU")
    
    # –°–ø–æ—Å–æ–±—ã –≤–≤–æ–¥–∞
    input_method = st.radio(
        "–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:",
        ["text", "file"],
        format_func=lambda x: {
            "text": "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥",
            "file": "üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"
        }[x]
    )
    
    wb_skus = []
    
    if input_method == "text":
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        input_text = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ WB SKU (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            value=st.session_state.wb_skus_input,
            height=200,
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä:\n123456789\n987654321\n555666777",
            help="–í–≤–æ–¥–∏—Ç–µ WB SKU –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
        )
        
        st.session_state.wb_skus_input = input_text
        wb_skus = parse_wb_skus(input_text)
        
    else:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å WB SKU:",
            type=['txt', 'csv', 'xlsx'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã: TXT, CSV, XLSX"
        )
        
        if uploaded_file:
            logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {uploaded_file.name}, —Ç–∏–ø: {uploaded_file.type}")
            try:
                if uploaded_file.type == "text/plain":
                    # TXT —Ñ–∞–π–ª
                    content = uploaded_file.read().decode('utf-8')
                    wb_skus = parse_wb_skus(content)
                
                elif uploaded_file.type == "text/csv":
                    # CSV —Ñ–∞–π–ª
                    df = pd.read_csv(uploaded_file)
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                    wb_skus = df.iloc[:, 0].astype(str).tolist()
                
                elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                    # XLSX —Ñ–∞–π–ª
                    df = pd.read_excel(uploaded_file)
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                    wb_skus = df.iloc[:, 0].astype(str).tolist()
                
                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
                wb_skus = [sku.strip() for sku in wb_skus if sku.strip().isdigit()]
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(wb_skus)} WB SKU –∏–∑ —Ñ–∞–π–ª–∞")
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(wb_skus)} WB SKU –∏–∑ —Ñ–∞–π–ª–∞")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                wb_skus = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö SKU
    if wb_skus:
        st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(wb_skus)} –≤–∞–ª–∏–¥–Ω—ã—Ö WB SKU")
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª {len(wb_skus)} WB SKU")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if len(wb_skus) <= 10:
            st.write("**–°–ø–∏—Å–æ–∫ WB SKU:**")
            for i, sku in enumerate(wb_skus, 1):
                st.write(f"{i}. {sku}")
        else:
            st.write("**–ü—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö 10 WB SKU:**")
            for i, sku in enumerate(wb_skus[:10], 1):
                st.write(f"{i}. {sku}")
            st.write(f"... –∏ –µ—â–µ {len(wb_skus) - 10} SKU")
    
    return wb_skus

def render_batch_results(batch_result: WBBatchResult):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("üìä –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", len(batch_result.processed_items))
    
    with col2:
        st.metric("–£—Å–ø–µ—à–Ω–æ", batch_result.success_count)
    
    with col3:
        st.metric("–û—à–∏–±–æ–∫", batch_result.error_count)
    
    with col4:
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{batch_result.success_rate:.1f}%")
    
    # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    st.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {batch_result.total_processing_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    results_data = []
    for result in batch_result.processed_items:
        results_data.append({
            "WB SKU": result.wb_sku,
            "–°—Ç–∞—Ç—É—Å": result.status.value,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π": len(result.recommendations),
            "–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å)": f"{result.processing_time:.2f}",
            "–û—à–∏–±–∫–∞": result.error_message or ""
        })
    
    results_df = pd.DataFrame(results_data)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status_filter = st.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:",
        ["–í—Å–µ"] + [status.value for status in WBProcessingStatus],
        format_func=lambda x: {
            "–í—Å–µ": "üîç –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "success": "‚úÖ –£—Å–ø–µ—à–Ω—ã–µ",
            "no_similar": "‚ö†Ô∏è –ù–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö",
            "insufficient_recommendations": "üìâ –ú–∞–ª–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
            "error": "‚ùå –û—à–∏–±–∫–∏",
            "no_data": "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "no_ozon_link": "üîó –ù–µ—Ç —Å–≤—è–∑–∏ —Å Ozon"
        }.get(x, x)
    )
    
    if status_filter != "–í—Å–µ":
        filtered_df = results_df[results_df["–°—Ç–∞—Ç—É—Å"] == status_filter]
    else:
        filtered_df = results_df
    
    st.dataframe(filtered_df, use_container_width=True)
    
    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
        csv = results_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=f"wb_recommendations_detailed_{int(time.time())}.csv",
            mime="text/csv"
        )

def create_recommendations_table(batch_result: WBBatchResult) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    table_data = []
    
    for result in batch_result.processed_items:
        if result.success and result.recommendations:
            wb_sku = result.wb_sku
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            for i, recommendation in enumerate(result.recommendations, 1):
                table_data.append({
                    "–ò—Å—Ö–æ–¥–Ω—ã–π WB SKU": wb_sku,
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ": i,
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π WB SKU": recommendation.product_info.wb_sku,
                    "Score": round(recommendation.score, 1),
                    "–ë—Ä–µ–Ω–¥": recommendation.product_info.wb_brand,
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": recommendation.product_info.wb_category,
                    "–†–∞–∑–º–µ—Ä—ã": recommendation.product_info.get_size_range_str(),
                    "–û—Å—Ç–∞—Ç–æ–∫": recommendation.product_info.wb_fbo_stock,
                    "–¶–µ–Ω–∞": recommendation.product_info.wb_full_price,
                    "–¢–∏–ø": recommendation.product_info.enriched_type,
                    "–ü–æ–ª": recommendation.product_info.enriched_gender,
                    "–°–µ–∑–æ–Ω": recommendation.product_info.enriched_season,
                    "–¶–≤–µ—Ç": recommendation.product_info.enriched_color,
                    "–ú–∞—Ç–µ—Ä–∏–∞–ª": recommendation.product_info.punta_material_short,
                    "–ö–æ–ª–æ–¥–∫–∞ MEGA": recommendation.product_info.punta_mega_last,
                    "–ö–æ–ª–æ–¥–∫–∞ BEST": recommendation.product_info.punta_best_last,
                    "–ö–æ–ª–æ–¥–∫–∞ NEW": recommendation.product_info.punta_new_last,
                    "–ö–∞—á–µ—Å—Ç–≤–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è": f"{recommendation.product_info.get_enrichment_score():.1%}",
                    "–ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–æ–≥–∞—â–µ–Ω–∏—è": recommendation.product_info.enrichment_source,
                    "–î–µ—Ç–∞–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è": recommendation.match_details.split('\n')[0] if recommendation.match_details else ""
                })
    
    logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å {len(table_data)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")
    return pd.DataFrame(table_data)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
logger.info("üéõÔ∏è –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
st.subheader("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
try:
    config = render_scoring_config_ui()
    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–æ—Ç–æ–≤–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {e}")
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {e}")
    st.stop()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"):
    logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    try:
        with st.spinner("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞..."):
            st.session_state.wb_recommendation_processor = WBRecommendationProcessor(conn, config)
        logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω")
        st.success("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if st.session_state.wb_recommendation_processor is None:
    logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–ø–µ—Ä–≤—ã–π —Ä–∞–∑)...")
    try:
        with st.spinner("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞..."):
            st.session_state.wb_recommendation_processor = WBRecommendationProcessor(conn, config)
        logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        st.stop()

processor = st.session_state.wb_recommendation_processor

st.markdown("---")

# –í–≤–æ–¥ WB SKU
logger.info("üìù –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–≤–æ–¥–∞ WB SKU")
wb_skus = render_wb_skus_input()

# –û–±—Ä–∞–±–æ—Ç–∫–∞
if wb_skus:
    st.markdown("---")
    st.subheader("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary", use_container_width=True):
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {len(wb_skus)} WB SKU")
            
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_container = st.container()
            
            with progress_container:
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                def progress_callback(current: int, total: int, message: str):
                    progress = current / total
                    progress_bar.progress(progress)
                    status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {current}/{total}: {message}")
                    logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} - {message}")
                
                start_time = time.time()
                
                # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–∞–∫–µ—Ç–∞
                    if len(wb_skus) >= 50:
                        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {len(wb_skus)} —Ç–æ–≤–∞—Ä–æ–≤...")
                        st.info(f"üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç ({len(wb_skus)} —Ç–æ–≤–∞—Ä–æ–≤) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º")
                        batch_result = processor.process_batch_optimized(wb_skus, progress_callback)
                    else:
                        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {len(wb_skus)} —Ç–æ–≤–∞—Ä–æ–≤...")
                        batch_result = processor.process_batch(wb_skus, progress_callback)
                    
                    processing_time = time.time() - start_time
                    st.session_state.wb_batch_result = batch_result
                    
                    # –†–∞—Å—á–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
                    if len(wb_skus) >= 50:
                        estimated_old_time = len(wb_skus) * 3  # –ü—Ä–∏–º–µ—Ä–Ω–æ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Ç–æ–≤–∞—Ä
                        speedup = estimated_old_time / processing_time
                        logger.info(f"‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å (—É—Å–∫–æ—Ä–µ–Ω–∏–µ: ~{speedup:.1f}x)")
                        st.success(f"üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å! –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ~{speedup:.1f}x")
                        st.info(f"üí° –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –±—ã ~{estimated_old_time/60:.1f} –º–∏–Ω—É—Ç")
                    else:
                        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å")
                        st.success(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å!")
                    
                    st.rerun()
                    
                except Exception as e:
                    processing_time = time.time() - start_time
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    with col2:
        st.info(f"**–ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ:** {len(wb_skus)} WB SKU")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True):
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            st.session_state.wb_batch_result = None
            st.rerun()

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
if st.session_state.wb_batch_result:
    st.markdown("---")
    render_batch_results(st.session_state.wb_batch_result)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    st.markdown("---")
    st.subheader("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    recommendations_df = create_recommendations_table(st.session_state.wb_batch_result)
    
    if not recommendations_df.empty:
        st.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å {len(recommendations_df)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        st.dataframe(recommendations_df.head(20), use_container_width=True)
        
        if len(recommendations_df) > 20:
            st.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –∏–∑ {len(recommendations_df)}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        col1, col2 = st.columns(2)
        
        with col1:
            # CSV —ç–∫—Å–ø–æ—Ä—Ç
            csv = recommendations_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name=f"wb_recommendations_{int(time.time())}.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        with col2:
            # Excel —ç–∫—Å–ø–æ—Ä—Ç
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                recommendations_df.to_excel(writer, index=False, sheet_name='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å Excel",
                data=output.getvalue(),
                file_name=f"wb_recommendations_{int(time.time())}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )
    else:
        st.warning("‚ö†Ô∏è –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
st.markdown("---")
st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")

try:
    logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    stats_start = time.time()
    
    with st.spinner("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."):
        stats = processor.get_statistics()
    
    stats_time = time.time() - stats_start
    logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {stats_time:.2f}—Å")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ WB —Ç–æ–≤–∞—Ä–æ–≤", stats.get('total_wb_products', 0))
    
    with col2:
        st.metric("WB —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏", stats.get('wb_products_in_stock', 0))
    
    with col3:
        st.metric("–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å Ozon", stats.get('wb_products_linked_to_ozon', 0))
    
    with col4:
        st.metric("–ü–æ–∫—Ä—ã—Ç–∏–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è", f"{stats.get('linking_coverage', 0):.1f}%")

except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    st.info("üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å SQL –∑–∞–ø—Ä–æ—Å–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")

# --- –°–ø—Ä–∞–≤–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ ---
with st.sidebar.expander("‚ùì –°–ø—Ä–∞–≤–∫–∞", expanded=False):
    st.markdown("""
    **üéØ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:**
    1. –û–±–æ–≥–∞—â–µ–Ω–∏–µ WB —Ç–æ–≤–∞—Ä–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Ozon —á–µ—Ä–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
    2. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö WB —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    3. –û—Ü–µ–Ω–∫–∞ similarity score –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
    
    **üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**
    - **–ú–∞–ª—ã–µ –ø–∞–∫–µ—Ç—ã (<50 —Ç–æ–≤–∞—Ä–æ–≤)**: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    - **–ë–æ–ª—å—à–∏–µ –ø–∞–∫–µ—Ç—ã (‚â•50 —Ç–æ–≤–∞—Ä–æ–≤)**: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    - **–£—Å–∫–æ—Ä–µ–Ω–∏–µ**: –≤ 5-20 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
    - **920 —Ç–æ–≤–∞—Ä–æ–≤**: ~5-10 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ —á–∞—Å–æ–≤
    
    **üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
    - WB —Ç–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å Ozon —Ç–æ–≤–∞—Ä–∞–º–∏
    - –ù–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ Ozon (—Ç–∏–ø, –ø–æ–ª, –±—Ä–µ–Ω–¥)
    - –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ WB > 0
    
    **‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: 5-50
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score: 0-200
    - –í–µ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: —Ä–∞–∑–º–µ—Ä, —Å–µ–∑–æ–Ω, —Ü–µ–Ω–∞, –∫–∞—á–µ—Å—Ç–≤–æ
    
    **üìä –≠–∫—Å–ø–æ—Ä—Ç:**
    - CSV: –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel
    - Excel: –≥–æ—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """)

# --- –õ–æ–≥–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ ---
with st.sidebar.expander("üìù –õ–æ–≥–∏", expanded=False):
    st.markdown("""
    **üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª:**
    - `wb_recommendations.log` - –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - `streamlit.log` - –ª–æ–≥–∏ Streamlit
    
    **üîç –î–ª—è –æ—Ç–ª–∞–¥–∫–∏:**
    - –í–∫–ª—é—á–∏—Ç–µ Debug —Ä–µ–∂–∏–º –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
    - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    """)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
    try:
        with open('wb_recommendations.log', 'r') as f:
            lines = f.readlines()
        last_lines = lines[-10:] if len(lines) > 10 else lines
        st.code('\n'.join(last_lines), language='text')
    except:
        st.info("–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- Footer ---
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>"
    "üéØ WB Recommendations Engine ‚Ä¢ Powered by Cross-Platform Analytics"
    "</div>", 
    unsafe_allow_html=True
)

logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞") 
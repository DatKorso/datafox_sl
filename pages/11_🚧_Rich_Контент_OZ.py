"""
Streamlit page for OZ Rich Content - —Å–æ–∑–¥–∞–Ω–∏–µ rich-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –û–∑–æ–Ω–µ.

–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
- –°–æ–∑–¥–∞–Ω–∏—è Rich Content JSON –¥–ª—è Ozon
- –ü–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –ü—Ä–µ–≤—å—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""
import streamlit as st
import pandas as pd
import time
from typing import Optional, List

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from utils.db_connection import connect_db
from utils.config_utils import get_db_path
from utils.rich_content_oz import (
    RichContentProcessor, ScoringConfig, ProcessingResult, 
    BatchResult, ProcessingStatus
)
from utils.rich_content_oz_ui import (
    render_scoring_config_ui, render_product_selector,
    render_rich_content_preview, render_processing_results,
    render_batch_results, render_processing_statistics
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤
import logging
import io
import contextlib

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤
@contextlib.contextmanager
def capture_logs():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤ –≤ Streamlit"""
    # –°–æ–∑–¥–∞–µ–º StringIO –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤
    log_buffer = io.StringIO()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π handler –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
    handler = logging.StreamHandler(log_buffer)
    handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä rich_content_oz
    logger = logging.getLogger('utils.rich_content_oz')
    logger.addHandler(handler)
    
    try:
        yield log_buffer
    finally:
        # –£–¥–∞–ª—è–µ–º handler –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        logger.removeHandler(handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="‚ú® OZ Rich Content", 
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("‚ú® OZ Rich Content - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è Ozon")
st.markdown("---")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_resource
def get_database_connection():
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    return connect_db()

conn = get_database_connection()
if not conn:
    st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    if st.button("üîß –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"):
        st.switch_page("pages/3_‚öôÔ∏è_–ù–∞—Å—Ç—Ä–æ–π–∫–∏.py")
    st.stop()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if 'rich_content_processor' not in st.session_state:
    st.session_state.rich_content_processor = None

if 'last_single_result' not in st.session_state:
    st.session_state.last_single_result = None

if 'last_batch_result' not in st.session_state:
    st.session_state.last_batch_result = None

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
st.subheader("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

# –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
control_col1, control_col2 = st.columns([1, 2])

with control_col1:
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    mode = st.radio(
        "**–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:**",
        ["single", "batch", "statistics"],
        format_func=lambda x: {
            "single": "üéØ –û–¥–∏–Ω —Ç–æ–≤–∞—Ä",
            "batch": "üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", 
            "statistics": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        }[x]
    )

with control_col2:
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    with st.expander("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞", expanded=False):
        config = render_scoring_config_ui()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"):
            st.session_state.rich_content_processor = RichContentProcessor(conn, config)
            st.success("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")

st.markdown("---")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if st.session_state.rich_content_processor is None:
    st.session_state.rich_content_processor = RichContentProcessor(conn, config)

processor = st.session_state.rich_content_processor

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ---

if mode == "single":
    st.header("üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
        
        # –í–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞
        vendor_code = st.text_input(
            "–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (oz_vendor_code):",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: ABC-123-XL",
            help="–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã oz_category_products"
        )
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
        template_type = st.selectbox(
            "–¢–∏–ø —à–∞–±–ª–æ–Ω–∞ Rich Content:",
            ["ozon_showcase", "recommendations_carousel", "recommendations_grid"],
            format_func=lambda x: {
                "ozon_showcase": "üè™ –í–∏—Ç—Ä–∏–Ω–∞ Ozon (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                "recommendations_carousel": "üé† –ö–∞—Ä—É—Å–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
                "recommendations_grid": "üì± –°–µ—Ç–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            }[x],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å Rich Content", type="primary", use_container_width=True):
            if not vendor_code.strip():
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞")
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ª–æ–≥–æ–≤
                progress_container = st.container()
                log_container = st.container()
                
                with progress_container:
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                
                with log_container:
                    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    log_placeholder = st.empty()
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
                    with capture_logs() as log_buffer:
                        
                        status_text.text("üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–≤–∞—Ä–∞...")
                        progress_bar.progress(10)
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ (–∑–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞—Ö–≤–∞—á–µ–Ω—ã –≤—Å–µ –ª–æ–≥–∏)
                        result = processor.process_single_product(vendor_code.strip())
                        
                        progress_bar.progress(90)
                        status_text.text("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Rich Content JSON...")
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Rich Content JSON —Å –Ω—É–∂–Ω—ã–º —Ç–∏–ø–æ–º —à–∞–±–ª–æ–Ω–∞
                        if result.success and result.recommendations:
                            updated_json = processor.content_generator.generate_rich_content_json(
                                result.recommendations, 
                                template_type
                            )
                            result.rich_content_json = updated_json
                        
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
                        captured_logs = log_buffer.getvalue()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    st.session_state.last_single_result = result
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–∏
                    if captured_logs:
                        log_placeholder.text(captured_logs)
                    else:
                        log_placeholder.text("–õ–æ–≥–∏ –Ω–µ –∑–∞—Ö–≤–∞—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
                    
                    progress_bar.progress(100)
                    if result.success:
                        status_text.text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {result.processing_time:.2f}—Å!")
                    else:
                        status_text.text(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –∑–∞ {result.processing_time:.2f}—Å")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    time.sleep(1)
                    st.rerun()
                        
                except Exception as e:
                    progress_bar.progress(100)
                    status_text.text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
                    log_placeholder.text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (st.session_state.last_single_result and 
            st.session_state.last_single_result.success):
            
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", use_container_width=True):
                with st.spinner("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."):
                    success = processor.save_rich_content_to_database(
                        st.session_state.last_single_result
                    )
                    if success:
                        st.success("‚úÖ Rich Content —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î!")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
    
    with col2:
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç")
        
        if st.session_state.last_single_result:
            render_processing_results(st.session_state.last_single_result)
        else:
            st.info("üëÜ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å Rich Content'")

elif mode == "batch":
    st.header("üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
    selection_mode, selected_products = render_product_selector(conn)
    
    if selected_products:
        st.markdown("---")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            template_type = st.selectbox(
                "–¢–∏–ø —à–∞–±–ª–æ–Ω–∞:",
                ["ozon_showcase", "recommendations_carousel", "recommendations_grid"],
                format_func=lambda x: {
                    "ozon_showcase": "üè™ –í–∏—Ç—Ä–∏–Ω–∞ Ozon",
                    "recommendations_carousel": "üé† –ö–∞—Ä—É—Å–µ–ª—å",
                    "recommendations_grid": "üì± –°–µ—Ç–∫–∞"
                }[x]
            )
            
            auto_save = st.checkbox(
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î",
                value=True,
                help="–°–æ—Ö—Ä–∞–Ω—è—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary"):
                # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_container = st.container()
                
                with progress_container:
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    def progress_callback(current: int, total: int, message: str):
                        progress = current / total
                        progress_bar.progress(progress)
                        status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {current}/{total}: {message}")
                    
                    start_time = time.time()
                    
                    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    batch_result = processor.process_batch(
                        selected_products, 
                        progress_callback
                    )
                    
                    processing_time = time.time() - start_time
                    st.session_state.last_batch_result = batch_result
                    
                    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    if auto_save:
                        saved_count = 0
                        save_progress = st.progress(0)
                        save_status = st.empty()
                        
                        for i, result in enumerate(batch_result.processed_items):
                            if result.success:
                                success = processor.save_rich_content_to_database(result)
                                if success:
                                    saved_count += 1
                            
                            save_progress.progress((i + 1) / len(batch_result.processed_items))
                            save_status.text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∏–∑ {len(batch_result.processed_items)}")
                        
                        st.success(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å. "
                                 f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤.")
                    else:
                        st.success(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å.")
        
        with col2:
            st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.info(f"**–í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:** {len(selected_products)}")
            st.info(f"**–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞:** {selection_mode}")
            
            if len(selected_products) <= 10:
                with st.expander("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"):
                    for i, product in enumerate(selected_products, 1):
                        st.write(f"{i}. {product}")
            else:
                st.warning(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(selected_products)} —Ç–æ–≤–∞—Ä–æ–≤:")
                with st.expander("üìã –ü—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–æ–≤"):
                    for i, product in enumerate(selected_products[:10], 1):
                        st.write(f"{i}. {product}")
                    st.write(f"... –∏ –µ—â–µ {len(selected_products) - 10} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if st.session_state.last_batch_result:
        st.markdown("---")
        render_batch_results(st.session_state.last_batch_result)

elif mode == "statistics":
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
    render_processing_statistics(processor)
    
    st.markdown("---")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
        try:
            brands_query = """
            SELECT 
                ocp.oz_brand,
                COUNT(*) as total_products,
                COUNT(CASE WHEN ocp.rich_content_json IS NOT NULL AND ocp.rich_content_json != '' 
                      THEN 1 END) as with_rich_content,
                COUNT(CASE WHEN op.oz_fbo_stock > 0 THEN 1 END) as in_stock
            FROM oz_category_products ocp
            LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
            WHERE ocp.oz_brand IS NOT NULL
            GROUP BY ocp.oz_brand
            ORDER BY total_products DESC
            LIMIT 10
            """
            
            brands_df = pd.read_sql(brands_query, conn)
            
            if not brands_df.empty:
                brands_df['coverage_%'] = (brands_df['with_rich_content'] / brands_df['total_products'] * 100).round(1)
                
                st.write("**–¢–û–ü-10 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:**")
                st.dataframe(
                    brands_df[['oz_brand', 'total_products', 'with_rich_content', 'coverage_%']],
                    use_container_width=True
                )
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—Ä–µ–Ω–¥–∞–º: {e}")
    
    with col2:
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", use_container_width=True):
            st.rerun()
        
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", use_container_width=True):
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            if hasattr(processor, 'data_collector'):
                processor.data_collector.clear_cache()
            st.success("–ö—ç—à –æ—á–∏—â–µ–Ω!")
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.session_state.last_batch_result:
            st.write("**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = []
            for result in st.session_state.last_batch_result.processed_items:
                export_data.append({
                    'oz_vendor_code': result.oz_vendor_code,
                    'status': result.status.value,
                    'recommendations_count': len(result.recommendations),
                    'processing_time_ms': round(result.processing_time * 1000, 1),
                    'has_rich_content': bool(result.rich_content_json),
                    'error_message': result.error_message or ''
                })
            
            if export_data:
                export_df = pd.DataFrame(export_data)
                csv = export_df.to_csv(index=False).encode('utf-8')
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã CSV",
                    data=csv,
                    file_name=f"rich_content_results_{int(time.time())}.csv",
                    mime="text/csv",
                    use_container_width=True
                )

# --- –°–ø—Ä–∞–≤–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ ---
with st.sidebar.expander("‚ùì –°–ø—Ä–∞–≤–∫–∞", expanded=False):
    st.markdown("""
    **üéØ –û–¥–∏–Ω —Ç–æ–≤–∞—Ä:**
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
    - –ü—Ä–µ–≤—å—é Rich Content JSON
    - –†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    
    **üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:**
    - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    - –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
    - –ü–æ–∫—Ä—ã—Ç–∏–µ Rich Content
    - –ê–Ω–∞–ª–∏–∑ –ø–æ –±—Ä–µ–Ω–¥–∞–º
    - –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    **‚öôÔ∏è –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    """)

# --- Footer ---
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>"
    "üöÄ Rich Content Generator –¥–ª—è Ozon ‚Ä¢ Powered by AI Recommendations"
    "</div>", 
    unsafe_allow_html=True
) 
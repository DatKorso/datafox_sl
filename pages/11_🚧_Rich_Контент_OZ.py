"""
Streamlit page for OZ Rich Content - —Å–æ–∑–¥–∞–Ω–∏–µ rich-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –û–∑–æ–Ω–µ.

–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
- –°–æ–∑–¥–∞–Ω–∏—è Rich Content JSON –¥–ª—è Ozon
- –ü–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –ü—Ä–µ–≤—å—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""
import streamlit as st
import pandas as pd
import time
from typing import Optional, List

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from utils.db_connection import connect_db
from utils.config_utils import get_db_path
from utils.rich_content_oz import (
    RichContentProcessor, ScoringConfig, ProcessingResult, 
    BatchResult, ProcessingStatus
)
from utils.rich_content_oz_ui import (
    render_scoring_config_ui, render_product_selector,
    render_rich_content_preview, render_processing_results,
    render_batch_results, render_processing_statistics
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤
import logging
import io
import contextlib

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤
@contextlib.contextmanager
def capture_logs():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤ –≤ Streamlit"""
    # –°–æ–∑–¥–∞–µ–º StringIO –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤
    log_buffer = io.StringIO()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π handler –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
    handler = logging.StreamHandler(log_buffer)
    handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä rich_content_oz
    logger = logging.getLogger('utils.rich_content_oz')
    logger.addHandler(handler)
    
    try:
        yield log_buffer
    finally:
        # –£–¥–∞–ª—è–µ–º handler –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        logger.removeHandler(handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="‚ú® OZ Rich Content", 
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("‚ú® OZ Rich Content - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è Ozon")
st.markdown("---")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_resource
def get_database_connection():
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    return connect_db()

conn = get_database_connection()
if not conn:
    st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    if st.button("üîß –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"):
        st.switch_page("pages/3_‚öôÔ∏è_–ù–∞—Å—Ç—Ä–æ–π–∫–∏.py")
    st.stop()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if 'rich_content_processor' not in st.session_state:
    st.session_state.rich_content_processor = None

if 'last_single_result' not in st.session_state:
    st.session_state.last_single_result = None

if 'last_batch_result' not in st.session_state:
    st.session_state.last_batch_result = None

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
st.subheader("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

# –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
control_col1, control_col2 = st.columns([1, 2])

with control_col1:
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    mode = st.radio(
        "**–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:**",
        ["single", "batch", "statistics"],
        format_func=lambda x: {
            "single": "üéØ –û–¥–∏–Ω —Ç–æ–≤–∞—Ä",
            "batch": "üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", 
            "statistics": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        }[x]
    )

with control_col2:
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    with st.expander("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞", expanded=False):
        config = render_scoring_config_ui()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"):
            st.session_state.rich_content_processor = RichContentProcessor(conn, config)
            st.success("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")

st.markdown("---")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if st.session_state.rich_content_processor is None:
    st.session_state.rich_content_processor = RichContentProcessor(conn, config)

processor = st.session_state.rich_content_processor

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ---

if mode == "single":
    st.header("üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
        
        # –í–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞
        vendor_code = st.text_input(
            "–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (oz_vendor_code):",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: ABC-123-XL",
            help="–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã oz_category_products"
        )
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
        template_type = st.selectbox(
            "–¢–∏–ø —à–∞–±–ª–æ–Ω–∞ Rich Content:",
            ["ozon_showcase", "recommendations_carousel", "recommendations_grid"],
            format_func=lambda x: {
                "ozon_showcase": "üè™ –í–∏—Ç—Ä–∏–Ω–∞ Ozon (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                "recommendations_carousel": "üé† –ö–∞—Ä—É—Å–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
                "recommendations_grid": "üì± –°–µ—Ç–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            }[x],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å Rich Content", type="primary", use_container_width=True):
            if not vendor_code.strip():
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞")
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ª–æ–≥–æ–≤
                progress_container = st.container()
                log_container = st.container()
                
                with progress_container:
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                
                with log_container:
                    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    log_placeholder = st.empty()
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
                    with capture_logs() as log_buffer:
                        
                        status_text.text("üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–≤–∞—Ä–∞...")
                        progress_bar.progress(10)
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ (–∑–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞—Ö–≤–∞—á–µ–Ω—ã –≤—Å–µ –ª–æ–≥–∏)
                        result = processor.process_single_product(vendor_code.strip())
                        
                        progress_bar.progress(90)
                        status_text.text("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Rich Content JSON...")
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Rich Content JSON —Å –Ω—É–∂–Ω—ã–º —Ç–∏–ø–æ–º —à–∞–±–ª–æ–Ω–∞
                        if result.success and result.recommendations:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ç–æ–≤–∞—Ä–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                            source_product = processor.recommendation_engine.data_collector.get_full_product_info(vendor_code.strip())
                            updated_json = processor.content_generator.generate_rich_content_json(
                                result.recommendations, 
                                template_type,
                                parent_product=source_product
                            )
                            result.rich_content_json = updated_json
                        
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
                        captured_logs = log_buffer.getvalue()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    st.session_state.last_single_result = result
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–∏
                    if captured_logs:
                        log_placeholder.text(captured_logs)
                    else:
                        log_placeholder.text("–õ–æ–≥–∏ –Ω–µ –∑–∞—Ö–≤–∞—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
                    
                    progress_bar.progress(100)
                    if result.success:
                        status_text.text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {result.processing_time:.2f}—Å!")
                    else:
                        status_text.text(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –∑–∞ {result.processing_time:.2f}—Å")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    time.sleep(1)
                    st.rerun()
                        
                except Exception as e:
                    progress_bar.progress(100)
                    status_text.text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
                    log_placeholder.text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (st.session_state.last_single_result and 
            st.session_state.last_single_result.success):
            
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", use_container_width=True):
                with st.spinner("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."):
                    success = processor.save_rich_content_to_database(
                        st.session_state.last_single_result
                    )
                    if success:
                        st.success("‚úÖ Rich Content —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î!")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
    
    with col2:
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç")
        
        if st.session_state.last_single_result:
            render_processing_results(st.session_state.last_single_result)
        else:
            st.info("üëÜ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å Rich Content'")

elif mode == "batch":
    st.header("üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
    selection_mode, selected_products = render_product_selector(conn)
    
    if selected_products:
        st.markdown("---")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            template_type = st.selectbox(
                "–¢–∏–ø —à–∞–±–ª–æ–Ω–∞:",
                ["ozon_showcase", "recommendations_carousel", "recommendations_grid"],
                format_func=lambda x: {
                    "ozon_showcase": "üè™ –í–∏—Ç—Ä–∏–Ω–∞ Ozon",
                    "recommendations_carousel": "üé† –ö–∞—Ä—É—Å–µ–ª—å",
                    "recommendations_grid": "üì± –°–µ—Ç–∫–∞"
                }[x]
            )
            
            # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_mode = st.radio(
                "–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                ["standard", "optimized", "memory_safe"],
                format_func=lambda x: {
                    "standard": "üêå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                    "optimized": "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                    "memory_safe": "üíæ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º (–¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤)"
                }[x],
                index=1,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
                help="–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è >1000 —Ç–æ–≤–∞—Ä–æ–≤ - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ä–∞–∑—É –≤ –ë–î –±–µ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏"
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            batch_size = 50
            if processing_mode == "optimized":
                batch_size = st.number_input(
                    "–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞:",
                    min_value=10,
                    max_value=200,
                    value=50,
                    step=10,
                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ–¥–Ω–æ–º –±–∞—Ç—á–µ. –ë–æ–ª—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –±–æ–ª—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø–∞–º—è—Ç—å"
                )
            
            auto_save = st.checkbox(
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î",
                value=True,
                help="–°–æ—Ö—Ä–∞–Ω—è—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary"):
                # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_container = st.container()
                
                with progress_container:
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    def progress_callback(current: int, total: int, message: str):
                        progress = current / total
                        progress_bar.progress(progress)
                        status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {current}/{total}: {message}")
                    
                    start_time = time.time()
                    
                    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    if processing_mode == "memory_safe":
                        st.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î")
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
                        stats = {
                            'total': len(selected_products),
                            'successful': 0,
                            'errors': 0,
                            'start_time': time.time()
                        }
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É —Å –ø—Ä—è–º—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                        for i, vendor_code in enumerate(selected_products):
                            try:
                                progress_callback(i + 1, len(selected_products), f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {vendor_code}")
                                
                                result = processor.process_single_product(vendor_code)
                                
                                if result.success and auto_save:
                                    success = processor.save_rich_content_to_database(result)
                                    if success:
                                        stats['successful'] += 1
                                    else:
                                        stats['errors'] += 1
                                elif result.success:
                                    stats['successful'] += 1
                                else:
                                    stats['errors'] += 1
                                    
                            except Exception as e:
                                stats['errors'] += 1
                                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {vendor_code}: {e}")
                        
                        stats['processing_time'] = time.time() - stats['start_time']
                        
                        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                        batch_result = type('BatchResult', (), {
                            'total_items': stats['total'],
                            'processed_items': [],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                            'stats': {
                                'successful': stats['successful'],
                                'errors': stats['errors'],
                                'success_rate': round(stats['successful'] / stats['total'] * 100, 2) if stats['total'] > 0 else 0
                            },
                            'success': stats['successful'] > 0,
                            'is_memory_safe': True
                        })()
                        
                        st.session_state.last_batch_result = batch_result
                        
                    elif processing_mode == "optimized":
                        st.info(f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size})")
                        batch_result = processor.process_batch_optimized(
                            selected_products, 
                            progress_callback,
                            batch_size=batch_size
                        )
                    else:
                        st.info("üêå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
                        batch_result = processor.process_batch(
                            selected_products, 
                            progress_callback
                        )
                    
                    processing_time = time.time() - start_time
                    
                    # –°–æ–∑–¥–∞–µ–º –ª–µ–≥–∫–æ–≤–µ—Å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
                    if len(batch_result.processed_items) > 1000:
                        st.warning("‚ö†Ô∏è **–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω** - —Å–æ–∑–¥–∞–µ–º –ª–µ–≥–∫–æ–≤–µ—Å–Ω—É—é –≤–µ—Ä—Å–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏.")
                        
                        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ heavy –¥–∞–Ω–Ω—ã—Ö
                        lightweight_items = []
                        for item in batch_result.processed_items:
                            lightweight_item = type('ProcessingResult', (), {
                                'oz_vendor_code': item.oz_vendor_code,
                                'status': item.status,
                                'success': item.success,
                                'processing_time': item.processing_time,
                                'error_message': item.error_message,
                                'recommendations': [],  # –û—á–∏—â–∞–µ–º —Ç—è–∂–µ–ª—ã–µ –¥–∞–Ω–Ω—ã–µ
                                'rich_content_json': None  # –£–±–∏—Ä–∞–µ–º JSON –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                            })()
                            lightweight_items.append(lightweight_item)
                        
                        # –°–æ–∑–¥–∞–µ–º –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π batch_result
                        lightweight_batch_result = type('BatchResult', (), {
                            'total_items': batch_result.total_items,
                            'processed_items': lightweight_items,
                            'stats': batch_result.stats,
                            'success': batch_result.success,
                            'is_lightweight': True  # –ú–µ—Ç–∫–∞ —á—Ç–æ —ç—Ç–æ –ª–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è
                        })()
                        
                        st.session_state.last_batch_result = lightweight_batch_result
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ
                        st.info(f"üíæ **–ü–∞–º—è—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ. –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î'.")
                        
                    else:
                        st.session_state.last_batch_result = batch_result
                    
                    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    if auto_save:
                        saved_count = 0
                        save_progress = st.progress(0)
                        save_status = st.empty()
                        
                        for i, result in enumerate(batch_result.processed_items):
                            if result.success:
                                success = processor.save_rich_content_to_database(result)
                                if success:
                                    saved_count += 1
                            
                            save_progress.progress((i + 1) / len(batch_result.processed_items))
                            save_status.text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∏–∑ {len(batch_result.processed_items)}")
                        
                        st.success(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å. "
                                 f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤.")
                    else:
                        st.success(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å.")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
                    if len(batch_result.processed_items) > 1000:
                        st.info("üí° **–°–æ–≤–µ—Ç:** –ü–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
                        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å (–¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –ë–î)", 
                                   help="–û—á–∏—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ø–∞–º—è—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞, –Ω–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"):
                            # –°–æ–∑–¥–∞–µ–º lightweight –≤–µ—Ä—Å–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                            lightweight_result = type('BatchResult', (), {
                                'total_items': batch_result.total_items,
                                'processed_items': [],  # –û—á–∏—â–∞–µ–º —Ç—è–∂–µ–ª—ã–µ –¥–∞–Ω–Ω—ã–µ
                                'stats': batch_result.stats,
                                'success': batch_result.success
                            })()
                            st.session_state.last_batch_result = lightweight_result
                            st.rerun()
        
        with col2:
            st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.info(f"**–í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:** {len(selected_products)}")
            st.info(f"**–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞:** {selection_mode}")
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if len(selected_products) > 0:
                if processing_mode == "optimized":
                    estimated_time = len(selected_products) * 0.2  # ~0.2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Ç–æ–≤–∞—Ä
                    st.success(f"‚ö° **–ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è):** ~{estimated_time:.1f} —Å–µ–∫")
                else:
                    estimated_time = len(selected_products) * 1.0  # ~1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
                    st.warning(f"üêå **–ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è):** ~{estimated_time:.1f} —Å–µ–∫")
            
            if len(selected_products) <= 10:
                with st.expander("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"):
                    for i, product in enumerate(selected_products, 1):
                        st.write(f"{i}. {product}")
            else:
                st.warning(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(selected_products)} —Ç–æ–≤–∞—Ä–æ–≤:")
                with st.expander("üìã –ü—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–æ–≤"):
                    for i, product in enumerate(selected_products[:10], 1):
                        st.write(f"{i}. {product}")
                    st.write(f"... –∏ –µ—â–µ {len(selected_products) - 10} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if st.session_state.last_batch_result:
        st.markdown("---")
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç WebSocket –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–æ–ª—å—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        try:
            render_batch_results(st.session_state.last_batch_result)
        except Exception as e:
            st.error(f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:** {str(e)}")
            st.warning("""
            üîß **–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:**
            1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5)
            2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î' –Ω–∏–∂–µ
            3. –û—á–∏—Å—Ç–∏—Ç–µ –ø–∞–º—è—Ç—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ
            """)
            
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å"):
                st.session_state.last_batch_result = None
                st.rerun()
        
        # –≠–∫—Å–ø–æ—Ä—Ç Rich Content CSV
        st.markdown("---")
        st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç Rich Content")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        total_processed = len(st.session_state.last_batch_result.processed_items)
        st.info(f"üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:** –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_processed}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è –ª–∏ –≤–µ—Ä—Å–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        is_lightweight = getattr(st.session_state.last_batch_result, 'is_lightweight', False)
        is_memory_safe = getattr(st.session_state.last_batch_result, 'is_memory_safe', False)
        
        if is_lightweight or is_memory_safe:
            st.warning("""
            ‚ö†Ô∏è **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤**
            
            –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ Rich Content –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä.
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **'–≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î'** –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
            """)
            successful_results = []
            empty_rich_content_count = 0
        else:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Rich Content —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            successful_results = []
            empty_rich_content_count = 0
            
            for result in st.session_state.last_batch_result.processed_items:
                if result.success:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ rich_content_json –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                    if result.rich_content_json and result.rich_content_json.strip():
                        successful_results.append(result)
                    else:
                        empty_rich_content_count += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        success_count = sum(1 for r in st.session_state.last_batch_result.processed_items if r.success)
        st.info(f"‚úÖ **–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {success_count} —Ç–æ–≤–∞—Ä–æ–≤")
        st.info(f"üìÑ **–° Rich Content JSON:** {len(successful_results)} —Ç–æ–≤–∞—Ä–æ–≤")
        if empty_rich_content_count > 0:
            st.warning(f"‚ö†Ô∏è **–ü—É—Å—Ç–æ–π Rich Content:** {empty_rich_content_count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.markdown("### üöÄ –í–∞—Ä–∏–∞–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ Rich Content")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_col1, export_col2, export_col3 = st.columns(3)
        
        with export_col1:
            st.markdown("#### üìã –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç")
            st.caption("–î–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)")
            
            if successful_results:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                estimated_size_mb = len(successful_results) * 10 / 1024  # –ü—Ä–∏–º–µ—Ä–Ω–æ 10 KB –Ω–∞ —Ç–æ–≤–∞—Ä
                if estimated_size_mb > 50:
                    st.warning(f"‚ö†Ô∏è **–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º:** ~{estimated_size_mb:.1f} –ú–ë")
                
                st.success(f"üì• **–î–æ—Å—Ç—É–ø–Ω–æ:** {len(successful_results)} —Ç–æ–≤–∞—Ä–æ–≤")
                
                if st.button("üì• –°–∫–∞—á–∞—Ç—å (–∏–∑ –ø–∞–º—è—Ç–∏)", use_container_width=True):
                    try:
                        with st.spinner("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞..."):
                            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞–∫–µ—Ç–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
                            vendor_codes = [result.oz_vendor_code for result in successful_results]
                            
                            # –ü–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö oz_sku –∏–∑ oz_products
                            if vendor_codes:
                                placeholders = ','.join(['?' for _ in vendor_codes])
                                sku_query = f"""
                                SELECT oz_vendor_code, oz_sku 
                                FROM oz_products 
                                WHERE oz_vendor_code IN ({placeholders})
                                """
                                sku_results = conn.execute(sku_query, vendor_codes).fetchall()
                                sku_map = {row[0]: row[1] if row[1] else "" for row in sku_results}
                            else:
                                sku_map = {}
                            
                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                            rich_content_data = []
                            progress_bar = st.progress(0)
                            
                            for i, result in enumerate(successful_results):
                                oz_sku = sku_map.get(result.oz_vendor_code, "")
                                
                                rich_content_data.append({
                                    'oz_vendor_code': result.oz_vendor_code,
                                    'oz_sku': oz_sku,
                                    'rich_content': result.rich_content_json
                                })
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ç–æ–≤–∞—Ä–æ–≤
                                if i % 100 == 0:
                                    progress_bar.progress((i + 1) / len(successful_results))
                            
                            progress_bar.progress(1.0)
                            
                            if rich_content_data:
                                # –°–æ–∑–¥–∞–µ–º DataFrame –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
                                rich_content_df = pd.DataFrame(rich_content_data)
                                csv_content = rich_content_df.to_csv(index=False).encode('utf-8')
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞
                                file_size_mb = len(csv_content) / (1024 * 1024)
                                st.info(f"üìä **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {file_size_mb:.2f} –ú–ë")
                                
                                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                                st.download_button(
                                    label="üíæ –°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª",
                                    data=csv_content,
                                    file_name=f"rich_content_export_{int(time.time())}.csv",
                                    mime="text/csv",
                                    use_container_width=True
                                )
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
                                with st.expander("üëÅÔ∏è –ü—Ä–µ–≤—å—é —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö", expanded=False):
                                    st.dataframe(
                                        rich_content_df[['oz_vendor_code', 'oz_sku']].head(20),
                                        use_container_width=True
                                    )
                                    st.caption(f"Rich Content JSON –≤–∫–ª—é—á–µ–Ω –≤ —ç–∫—Å–ø–æ—Ä—Ç (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π)")
                                    
                                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                del rich_content_data, rich_content_df, csv_content
                                
                            else:
                                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                                
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
                        st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î")
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏")
                st.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î ‚Üí")
        
        with export_col2:
            st.markdown("#### üóÑÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î")
            st.caption("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
            if st.button("üîÑ –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î", use_container_width=True):
                try:
                    with st.spinner("üìù –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."):
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º JOIN
                        db_query = """
                        SELECT 
                            ocp.oz_vendor_code,
                            COALESCE(op.oz_sku, '') as oz_sku,
                            ocp.rich_content_json
                        FROM oz_category_products ocp
                        LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
                        WHERE ocp.rich_content_json IS NOT NULL 
                        AND ocp.rich_content_json != ''
                        AND LENGTH(ocp.rich_content_json) > 10
                        ORDER BY ocp.oz_vendor_code
                        """
                        
                        db_results = conn.execute(db_query).fetchall()
                        
                        if db_results:
                            # –°–æ–∑–¥–∞–µ–º DataFrame –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            db_df = pd.DataFrame(db_results, columns=['oz_vendor_code', 'oz_sku', 'rich_content'])
                            db_csv_content = db_df.to_csv(index=False).encode('utf-8')
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞
                            file_size_mb = len(db_csv_content) / (1024 * 1024)
                            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(db_results)} —Ç–æ–≤–∞—Ä–æ–≤ —Å Rich Content")
                            st.info(f"üìä **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {file_size_mb:.2f} –ú–ë")
                            
                            st.download_button(
                                label="üíæ –°–∫–∞—á–∞—Ç—å –∏–∑ –ë–î",
                                data=db_csv_content,
                                file_name=f"rich_content_from_db_{int(time.time())}.csv",
                                mime="text/csv",
                                use_container_width=True
                            )
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
                            with st.expander("üëÅÔ∏è –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î", expanded=False):
                                st.dataframe(
                                    db_df[['oz_vendor_code', 'oz_sku']].head(20),
                                    use_container_width=True
                                )
                                st.caption(f"Rich Content JSON –≤–∫–ª—é—á–µ–Ω –≤ —ç–∫—Å–ø–æ—Ä—Ç (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π)")
                            
                        else:
                            st.warning("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å Rich Content")
                            
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ –ë–î: {e}")
        
        with export_col3:
            st.markdown("#### üéØ –ü–æ—Ç–æ–∫–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç")
            st.caption("–î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤")
            
            if st.button("üåä –ü–æ—Ç–æ–∫–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç", use_container_width=True):
                try:
                    with st.spinner("üìù –ü–æ—Ç–æ–∫–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö..."):
                        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                        count_query = """
                        SELECT COUNT(*) 
                        FROM oz_category_products ocp
                        LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
                        WHERE ocp.rich_content_json IS NOT NULL 
                        AND ocp.rich_content_json != ''
                        AND LENGTH(ocp.rich_content_json) > 10
                        """
                        
                        total_count = conn.execute(count_query).fetchone()[0]
                        
                        if total_count > 0:
                            st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                            
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –ø–æ—Ç–æ–∫–æ–º –ø–æ —á–∞—Å—Ç—è–º
                            def generate_csv_stream():
                                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
                                yield "oz_vendor_code,oz_sku,rich_content\n"
                                
                                batch_size = 1000
                                offset = 0
                                
                                while offset < total_count:
                                    batch_query = """
                                    SELECT 
                                        ocp.oz_vendor_code,
                                        COALESCE(op.oz_sku, '') as oz_sku,
                                        ocp.rich_content_json
                                    FROM oz_category_products ocp
                                    LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
                                    WHERE ocp.rich_content_json IS NOT NULL 
                                    AND ocp.rich_content_json != ''
                                    AND LENGTH(ocp.rich_content_json) > 10
                                    ORDER BY ocp.oz_vendor_code
                                    LIMIT ? OFFSET ?
                                    """
                                    
                                    batch_results = conn.execute(batch_query, [batch_size, offset]).fetchall()
                                    
                                    if not batch_results:
                                        break
                                    
                                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º batch –≤ CSV —Å—Ç—Ä–æ–∫–∏
                                    for row in batch_results:
                                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ JSON
                                        escaped_json = str(row[2]).replace('"', '""')
                                        yield f'"{row[0]}","{row[1]}","{escaped_json}"\n'
                                    
                                    offset += batch_size
                            
                            # –°–æ–∑–¥–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
                            csv_stream = generate_csv_stream()
                            
                            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
                            csv_content = ''.join(csv_stream).encode('utf-8')
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞
                            file_size_mb = len(csv_content) / (1024 * 1024)
                            st.success(f"‚úÖ –ü–æ—Ç–æ–∫–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
                            st.info(f"üìä **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {file_size_mb:.2f} –ú–ë")
                            
                            st.download_button(
                                label="üíæ –°–∫–∞—á–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π CSV",
                                data=csv_content,
                                file_name=f"rich_content_streaming_{int(time.time())}.csv",
                                mime="text/csv",
                                use_container_width=True
                            )
                        else:
                            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞")
                            
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
                    st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î")

elif mode == "statistics":
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
    render_processing_statistics(processor)
    
    st.markdown("---")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
        try:
            brands_query = """
            SELECT 
                ocp.oz_brand,
                COUNT(*) as total_products,
                COUNT(CASE WHEN ocp.rich_content_json IS NOT NULL AND ocp.rich_content_json != '' 
                      THEN 1 END) as with_rich_content,
                COUNT(CASE WHEN op.oz_fbo_stock > 0 THEN 1 END) as in_stock
            FROM oz_category_products ocp
            LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
            WHERE ocp.oz_brand IS NOT NULL
            GROUP BY ocp.oz_brand
            ORDER BY total_products DESC
            LIMIT 10
            """
            
            brands_df = pd.read_sql(brands_query, conn)
            
            if not brands_df.empty:
                brands_df['coverage_%'] = (brands_df['with_rich_content'] / brands_df['total_products'] * 100).round(1)
                
                st.write("**–¢–û–ü-10 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:**")
                st.dataframe(
                    brands_df[['oz_brand', 'total_products', 'with_rich_content', 'coverage_%']],
                    use_container_width=True
                )
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—Ä–µ–Ω–¥–∞–º: {e}")
    
    with col2:
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", use_container_width=True):
            st.rerun()
        
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", use_container_width=True):
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            if hasattr(processor, 'data_collector'):
                processor.data_collector.clear_cache()
            st.success("–ö—ç—à –æ—á–∏—â–µ–Ω!")
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.session_state.last_batch_result:
            st.write("**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = []
            for result in st.session_state.last_batch_result.processed_items:
                export_data.append({
                    'oz_vendor_code': result.oz_vendor_code,
                    'status': result.status.value,
                    'recommendations_count': len(result.recommendations),
                    'processing_time_ms': round(result.processing_time * 1000, 1),
                    'has_rich_content': bool(result.rich_content_json),
                    'error_message': result.error_message or ''
                })
            
            if export_data:
                export_df = pd.DataFrame(export_data)
                csv = export_df.to_csv(index=False).encode('utf-8')
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã CSV",
                    data=csv,
                    file_name=f"rich_content_results_{int(time.time())}.csv",
                    mime="text/csv",
                    use_container_width=True
                )

# --- –°–ø—Ä–∞–≤–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ ---
with st.sidebar.expander("‚ùì –°–ø—Ä–∞–≤–∫–∞", expanded=False):
    st.markdown("""
    **üéØ –û–¥–∏–Ω —Ç–æ–≤–∞—Ä:**
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
    - –ü—Ä–µ–≤—å—é Rich Content JSON
    - –†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    
    **üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:**
    - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    - –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (3-5x –±—ã—Å—Ç—Ä–µ–µ)
    
    **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
    - –ü–æ–∫—Ä—ã—Ç–∏–µ Rich Content
    - –ê–Ω–∞–ª–∏–∑ –ø–æ –±—Ä–µ–Ω–¥–∞–º
    - –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    **‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
    - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ç–∏–ø—É/–ø–æ–ª—É/–±—Ä–µ–Ω–¥—É
    - –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
    - –ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    **üÜò –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤:**
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≠–∫—Å–ø–æ—Ä—Ç"
    - CLI —É—Ç–∏–ª–∏—Ç–∞: utils/export_rich_content.py
    - –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–∞–º—è—Ç–∏
    """)

# --- Footer ---
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>"
    "üöÄ Rich Content Generator –¥–ª—è Ozon ‚Ä¢ Powered by AI Recommendations"
    "</div>", 
    unsafe_allow_html=True
) 
"""
Streamlit page for comparing two Ozon products using the scoring algorithm.
Provides detailed scoring breakdown for analysis and debugging.
"""

import streamlit as st
import sys
import os
import duckdb
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from utils.product_comparison import ProductComparator

def main():
    st.set_page_config(
        page_title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¢–æ–≤–∞—Ä–æ–≤ Ozon",
        page_icon="üîç",
        layout="wide"
    )
    
    st.title("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¢–æ–≤–∞—Ä–æ–≤ Ozon")
    st.markdown("–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å–∫–æ—Ä–∏–Ω–≥–∞")
    
    # Input section
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–¢–æ–≤–∞—Ä 1 (–ò—Å—Ç–æ—á–Ω–∏–∫)")
        vendor_code_1 = st.text_input(
            "Vendor Code 1",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 0562002434-—á–µ—Ä–Ω—ã–π-34",
            key="vc1"
        )
    
    with col2:
        st.subheader("–¢–æ–≤–∞—Ä 2 (–ö–∞–Ω–¥–∏–¥–∞—Ç)")
        vendor_code_2 = st.text_input(
            "Vendor Code 2", 
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: MEGA G0562000198",
            key="vc2"
        )
    
    # Compare button
    if st.button("üîç –°—Ä–∞–≤–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", type="primary"):
        if not vendor_code_1 or not vendor_code_2:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±–∞ vendor code")
            return
            
        if vendor_code_1 == vendor_code_2:
            st.warning("Vendor codes –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏")
            return
        
        # Show comparison
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã..."):
            try:
                # Connect to database
                db_path = project_root / "data" / "marketplace_data.db"
                
                if not db_path.exists():
                    st.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
                    return
                
                with duckdb.connect(str(db_path)) as db_conn:
                    comparator = ProductComparator(db_conn)
                    result = comparator.compare_products(vendor_code_1, vendor_code_2)
                    
                    if result:
                        display_comparison_result(result)
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {str(e)}")
                st.exception(e)  # Show full traceback for debugging

def display_comparison_result(result):
    """Display the comparison result in a structured format."""
    
    # Product info section
    st.subheader("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–¢–æ–≤–∞—Ä 1 (–ò—Å—Ç–æ—á–Ω–∏–∫)**")
        source = result.source_product
        st.write(f"**Vendor Code:** {source.oz_vendor_code}")
        st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {source.product_name or 'N/A'}")
        st.write(f"**–ë—Ä–µ–Ω–¥:** {source.oz_brand or 'N/A'}")
        st.write(f"**–¢–∏–ø:** {source.type or 'N/A'}")
        st.write(f"**–ü–æ–ª:** {source.gender or 'N/A'}")
        st.write(f"**–†–∞–∑–º–µ—Ä:** {source.russian_size or 'N/A'}")
        st.write(f"**–°–µ–∑–æ–Ω:** {source.season or 'N/A'}")
        st.write(f"**–¶–≤–µ—Ç:** {source.color or 'N/A'}")
        st.write(f"**–ú–∞—Ç–µ—Ä–∏–∞–ª:** {source.material_short or 'N/A'}")
        st.write(f"**–ó–∞—Å—Ç–µ–∂–∫–∞:** {source.fastener_type or 'N/A'}")
        st.write(f"**Mega Last:** {source.mega_last or 'N/A'}")
        st.write(f"**Best Last:** {source.best_last or 'N/A'}")
        st.write(f"**New Last:** {source.new_last or 'N/A'}")
        st.write(f"**–ú–æ–¥–µ–ª—å:** {source.model_name or 'N/A'}")
        st.write(f"**–û—Å—Ç–∞—Ç–∫–∏:** {source.oz_fbo_stock}")
    
    with col2:
        st.markdown("**–¢–æ–≤–∞—Ä 2 (–ö–∞–Ω–¥–∏–¥–∞—Ç)**")
        candidate = result.candidate_product
        st.write(f"**Vendor Code:** {candidate.oz_vendor_code}")
        st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {candidate.product_name or 'N/A'}")
        st.write(f"**–ë—Ä–µ–Ω–¥:** {candidate.oz_brand or 'N/A'}")
        st.write(f"**–¢–∏–ø:** {candidate.type or 'N/A'}")
        st.write(f"**–ü–æ–ª:** {candidate.gender or 'N/A'}")
        st.write(f"**–†–∞–∑–º–µ—Ä:** {candidate.russian_size or 'N/A'}")
        st.write(f"**–°–µ–∑–æ–Ω:** {candidate.season or 'N/A'}")
        st.write(f"**–¶–≤–µ—Ç:** {candidate.color or 'N/A'}")
        st.write(f"**–ú–∞—Ç–µ—Ä–∏–∞–ª:** {candidate.material_short or 'N/A'}")
        st.write(f"**–ó–∞—Å—Ç–µ–∂–∫–∞:** {candidate.fastener_type or 'N/A'}")
        st.write(f"**Mega Last:** {candidate.mega_last or 'N/A'}")
        st.write(f"**Best Last:** {candidate.best_last or 'N/A'}")
        st.write(f"**New Last:** {candidate.new_last or 'N/A'}")
        st.write(f"**–ú–æ–¥–µ–ª—å:** {candidate.model_name or 'N/A'}")
        st.write(f"**–û—Å—Ç–∞—Ç–∫–∏:** {candidate.oz_fbo_stock}")
    
    # Scoring breakdown
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥")
    
    total_score = result.total_score
    similarity = result.similarity_percentage
    
    # Total score display
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–û–±—â–∏–π –±–∞–ª–ª", f"{total_score:.1f}")
    with col2:
        st.metric("–°—Ö–æ–∂–µ—Å—Ç—å", f"{similarity:.1f}%")
    
    # Individual scores
    st.markdown("**–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:**")
    
    score_data = []
    for detail in result.scoring_details:
        score_data.append({
            '–ü–∞—Ä–∞–º–µ—Ç—Ä': detail.parameter,
            '–ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': str(detail.source_value),
            '–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞': str(detail.candidate_value),
            '–ë–∞–ª–ª': f"{detail.score:.1f}",
            '–ú–∞–∫—Å. –±–∞–ª–ª': f"{detail.max_possible:.1f}",
            '–°—Ç–∞—Ç—É—Å': '‚úÖ' if detail.score > 0 else ('‚ùå' if detail.score < 0 else '‚ûñ'),
            '–¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è': detail.match_type
        })
    
    # Display as table
    import pandas as pd
    df = pd.DataFrame(score_data)
    st.dataframe(df, use_container_width=True, hide_index=True)
    
    # Detailed explanations
    with st.expander("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"):
        for detail in result.scoring_details:
            st.write(f"**{detail.parameter}:** {detail.description}")
    
    # Recommendations
    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    if total_score >= 200:
        st.success("üéØ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ! –¢–æ–≤–∞—Ä—ã –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏.")
    elif total_score >= 100:
        st.info("üëç –•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –¢–æ–≤–∞—Ä—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
    elif total_score >= 50:
        st.warning("‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –í–æ–∑–º–æ–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è.")
    else:
        st.error("‚ùå –°–ª–∞–±–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –¢–æ–≤–∞—Ä—ã —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è.")

if __name__ == "__main__":
    main()

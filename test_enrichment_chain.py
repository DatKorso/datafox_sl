#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ü–µ–ø–æ—á–∫–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö WB —Ç–æ–≤–∞—Ä–∞.

–ü—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å:
WB SKU ‚Üí —à—Ç—Ä–∏—Ö–∫–æ–¥—ã ‚Üí Ozon —Ç–æ–≤–∞—Ä—ã ‚Üí oz_vendor_code ‚Üí oz_category_products ‚Üí –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
"""

import duckdb
import os
from typing import List, Dict, Any, Optional

def test_enrichment_chain(wb_sku: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö WB —Ç–æ–≤–∞—Ä–∞"""
    
    print(f"\nüîç –¢–ï–°–¢ –¶–ï–ü–û–ß–ö–ò –û–ë–û–ì–ê–©–ï–ù–ò–Ø –î–õ–Ø WB SKU: {wb_sku}")
    print("=" * 60)
    
    db_path = 'data/marketplace_data.db'
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    try:
        conn = duckdb.connect(db_path, read_only=True)
        
        # –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é WB —Ç–æ–≤–∞—Ä–∞
        print("\nüìã –®–ê–ì 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è WB —Ç–æ–≤–∞—Ä–∞")
        print("-" * 40)
        
        wb_query = """
        SELECT wb_sku, wb_brand, wb_category, wb_barcodes
        FROM wb_products 
        WHERE wb_sku = ?
        """
        wb_data = conn.execute(wb_query, [wb_sku]).fetchone()
        
        if not wb_data:
            print(f"‚ùå WB —Ç–æ–≤–∞—Ä {wb_sku} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        wb_sku_val, wb_brand, wb_category, wb_barcodes = wb_data
        print(f"‚úÖ WB —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω:")
        print(f"   SKU: {wb_sku_val}")
        print(f"   Brand: {wb_brand}")
        print(f"   Category: {wb_category}")
        print(f"   Barcodes: {wb_barcodes}")
        
        if not wb_barcodes or wb_barcodes.strip() == '':
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤!")
            return
        
        # –®–ê–ì 2: –†–∞–∑–±–∏—Ä–∞–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥—ã
        print("\nüîó –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤")
        print("-" * 40)
        
        barcodes = [bc.strip() for bc in wb_barcodes.split(';') if bc.strip()]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(barcodes)} —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤:")
        for i, bc in enumerate(barcodes, 1):
            print(f"   {i}. {bc}")
        
        # –®–ê–ì 3: –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö Ozon —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —à—Ç—Ä–∏—Ö-–∫–æ–¥—ã
        print("\nüîó –®–ê–ì 3: –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö Ozon —Ç–æ–≤–∞—Ä–æ–≤")
        print("-" * 40)
        
        all_oz_vendor_codes = []
        for i, barcode in enumerate(barcodes, 1):
            oz_query = """
            SELECT oz_vendor_code 
            FROM oz_barcodes 
            WHERE oz_barcode = ?
            """
            oz_results = conn.execute(oz_query, [barcode]).fetchall()
            
            print(f"   –®—Ç—Ä–∏—Ö-–∫–æ–¥ {i} ({barcode}): –Ω–∞–π–¥–µ–Ω–æ {len(oz_results)} Ozon —Ç–æ–≤–∞—Ä–æ–≤")
            for oz_result in oz_results:
                oz_vendor_code = oz_result[0]
                all_oz_vendor_codes.append(oz_vendor_code)
                print(f"      ‚Üí {oz_vendor_code}")
        
        if not all_oz_vendor_codes:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö Ozon —Ç–æ–≤–∞—Ä–æ–≤!")
            return
        
        unique_oz_codes = list(set(all_oz_vendor_codes))
        print(f"‚úÖ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö Ozon vendor_codes: {len(unique_oz_codes)}")
        
        # –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ oz_category_products
        print("\nüìä –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ oz_category_products")
        print("-" * 40)
        
        placeholders = ','.join(['?' for _ in unique_oz_codes])
        oz_chars_query = f"""
        SELECT 
            ocp.oz_vendor_code,
            ocp.type,
            ocp.gender,
            ocp.oz_brand,
            ocp.season,
            ocp.color,
            ocp.fastener_type
        FROM oz_category_products ocp
        WHERE ocp.oz_vendor_code IN ({placeholders})
        """
        
        oz_chars_results = conn.execute(oz_chars_query, unique_oz_codes).fetchall()
        print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ oz_category_products: {len(oz_chars_results)}")
        
        if not oz_chars_results:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –°–≤—è–∑–∞–Ω–Ω—ã–µ oz_vendor_codes –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ oz_category_products!")
            print("   –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥—ã–π oz_vendor_code –æ—Ç–¥–µ–ª—å–Ω–æ:")
            
            for oz_code in unique_oz_codes[:5]:  # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 5
                check_query = "SELECT COUNT(*) FROM oz_category_products WHERE oz_vendor_code = ?"
                count = conn.execute(check_query, [oz_code]).fetchone()[0]
                print(f"   {oz_code}: {count} –∑–∞–ø–∏—Å–µ–π")
                
                if count == 0:
                    # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç–∞–∫–æ–π vendor_code –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                    products_check = conn.execute("SELECT COUNT(*) FROM oz_products WHERE oz_vendor_code = ?", [oz_code]).fetchone()[0]
                    barcodes_check = conn.execute("SELECT COUNT(*) FROM oz_barcodes WHERE oz_vendor_code = ?", [oz_code]).fetchone()[0]
                    print(f"      ‚Üí –í oz_products: {products_check}")
                    print(f"      ‚Üí –í oz_barcodes: {barcodes_check}")
            
            print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
            print("   1. oz_vendor_codes –∏–∑ oz_barcodes –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å oz_category_products")
            print("   2. –ù–µ–ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö oz_category_products")
            print("   3. –†–∞–∑–ª–∏—á–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö vendor_code –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏")
            return
        
        # –®–ê–ì 5: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        print(f"\n‚úÖ –®–ê–ì 5: –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ ({len(oz_chars_results)} –∑–∞–ø–∏—Å–µ–π)")
        print("-" * 40)
        
        complete_records = 0
        incomplete_records = []
        
        for record in oz_chars_results:
            oz_vendor_code, type_val, gender_val, oz_brand_val, season, color, fastener = record
            
            print(f"\n–í–µ–Ω–¥–æ—Ä –∫–æ–¥: {oz_vendor_code}")
            print(f"   Type: {type_val}")
            print(f"   Gender: {gender_val}")
            print(f"   Brand: {oz_brand_val}")
            print(f"   Season: {season}")
            print(f"   Color: {color}")
            print(f"   Fastener: {fastener}")
            
            if type_val and gender_val and oz_brand_val:
                complete_records += 1
                print("   ‚úÖ –ü–û–õ–ù–ê–Ø –ó–ê–ü–ò–°–¨")
            else:
                incomplete_records.append({
                    'vendor_code': oz_vendor_code,
                    'missing': [
                        field for field, value in [
                            ('type', type_val),
                            ('gender', gender_val),
                            ('brand', oz_brand_val)
                        ] if not value
                    ]
                })
                print("   ‚ùå –ù–ï–ü–û–õ–ù–ê–Ø –ó–ê–ü–ò–°–¨")
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(oz_chars_results)}")
        print(f"   –ü–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {complete_records}")
        print(f"   –ù–µ–ø–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(incomplete_records)}")
        
        if complete_records > 0:
            print(f"\n‚úÖ –û–ë–û–ì–ê–©–ï–ù–ò–ï –í–û–ó–ú–û–ñ–ù–û! ({complete_records} –ø–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π)")
            
            # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä –æ–±–æ–≥–∞—â–µ–Ω–∏—è
            for record in oz_chars_results:
                oz_vendor_code, type_val, gender_val, oz_brand_val, season, color, fastener = record
                if type_val and gender_val and oz_brand_val:
                    print(f"\nüéØ –ü–†–ò–ú–ï–† –û–ë–û–ì–ê–©–ï–ù–ò–Ø:")
                    print(f"   enriched_type: {type_val}")
                    print(f"   enriched_gender: {gender_val}")
                    print(f"   enriched_brand: {oz_brand_val}")
                    break
        else:
            print(f"\n‚ùå –û–ë–û–ì–ê–©–ï–ù–ò–ï –ù–ï–í–û–ó–ú–û–ñ–ù–û!")
            print("   –ü—Ä–∏—á–∏–Ω–∞: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º type+gender+brand")
            
            if incomplete_records:
                print("\nüîß –î–ï–¢–ê–õ–ò –ù–ï–ü–û–õ–ù–´–• –ó–ê–ü–ò–°–ï–ô:")
                for rec in incomplete_records:
                    print(f"   {rec['vendor_code']}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {', '.join(rec['missing'])}")
        
        # –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º CrossMarketplaceLinker
        print(f"\nüîó –®–ê–ì 6: –¢–µ—Å—Ç CrossMarketplaceLinker")
        print("-" * 40)
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º CrossMarketplaceLinker
            import sys
            sys.path.append('.')
            from utils.cross_marketplace_linker import CrossMarketplaceLinker
            
            linker = CrossMarketplaceLinker(conn)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º link_wb_to_oz
            linked_oz = linker.link_wb_to_oz([wb_sku])
            
            if linked_oz and wb_sku in linked_oz:
                linked_codes = linked_oz[wb_sku]
                print(f"‚úÖ CrossMarketplaceLinker –Ω–∞—à–µ–ª {len(linked_codes)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
                for code in linked_codes[:5]:
                    print(f"   ‚Üí {code}")
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä—É—á–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
                manual_codes = set(unique_oz_codes)
                linker_codes = set(linked_codes)
                
                if manual_codes == linker_codes:
                    print("‚úÖ CrossMarketplaceLinker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print(f"‚ö†Ô∏è –†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Ä—É—á–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∏ CrossMarketplaceLinker:")
                    print(f"   –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π: {manual_codes - linker_codes}")
                    print(f"   –¢–æ–ª—å–∫–æ linker: {linker_codes - manual_codes}")
            else:
                print("‚ùå CrossMarketplaceLinker –Ω–µ –Ω–∞—à–µ–ª —Å–≤—è–∑–µ–π!")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CrossMarketplaceLinker: {e}")
        
        conn.close()
        
        # –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó
        print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó:")
        print("=" * 60)
        
        if complete_records > 0:
            print("‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ï–°–¢–¨")
            print("   –ê–ª–≥–æ—Ä–∏—Ç–º –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        else:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –ù–µ—Ç –ø–æ–ª–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
            print("   –ù–µ–æ–±—Ö–æ–¥–∏–º fallback –∞–ª–≥–æ—Ä–∏—Ç–º –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_enrichment_chain("191813777")
"""
Shared UI components for WB Recommendations system.

This module contains reusable UI components and utilities to reduce code duplication
and improve maintainability in the WB recommendations interface.

Author: DataFox SL Project - Optimized Version
Version: 2.0.0
"""

import streamlit as st
import pandas as pd
import time
import io
import logging
from typing import List, Dict, Any, Optional, Callable, Tuple
from functools import wraps

# Import WB-specific classes
from .wb_recommendations import WBScoringConfig, WBBatchResult, WBProcessingStatus
from .manual_recommendations_manager import ManualRecommendationsManager

# Smart logging configuration
logger = logging.getLogger(__name__)

class UILogger:
    """Smart logging system with reduced overhead"""
    
    @staticmethod
    def log_ui_action(action: str, details: str = ""):
        """Log UI actions with minimal overhead"""
        if logger.isEnabledFor(logging.INFO):
            logger.info(f"üéõÔ∏è {action}: {details}")
    
    @staticmethod
    def log_error(component: str, error: Exception):
        """Log errors with consistent format"""
        logger.error(f"‚ùå {component} error: {error}")

def handle_ui_errors(component_name: str):
    """Decorator for consistent error handling in UI components"""
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                UILogger.log_error(component_name, e)
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ {component_name}: {e}")
                return None
        return wrapper
    return decorator

@st.cache_data(ttl=300)
def get_preset_options():
    """Cached preset options for scoring config"""
    return {
        "balanced": "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
        "size_focused": "üìè –§–æ–∫—É—Å –Ω–∞ —Ä–∞–∑–º–µ—Ä–µ", 
        "price_focused": "üí∞ –§–æ–∫—É—Å –Ω–∞ —Ü–µ–Ω–µ",
        "quality_focused": "‚≠ê –§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ",
        "conservative": "üîí –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π"
    }

class SessionManager:
    """Centralized session state management"""
    
    @staticmethod
    def initialize_wb_session():
        """Initialize all WB-related session state variables"""
        defaults = {
            'wb_recommendation_processor': None,
            'wb_batch_result': None,
            'wb_skus_input': "",
            'manual_recommendations_manager': None
        }
        
        for key, default_value in defaults.items():
            if key not in st.session_state:
                st.session_state[key] = default_value
        
        UILogger.log_ui_action("Session initialized", f"Keys: {list(defaults.keys())}")
    
    @staticmethod
    def clear_results():
        """Clear processing results from session"""
        st.session_state.wb_batch_result = None
        UILogger.log_ui_action("Results cleared")

class ProgressTracker:
    """Reusable progress tracking component"""
    
    def __init__(self):
        self.progress_bar = st.progress(0)
        self.status_text = st.empty()
    
    def update(self, current: int, total: int, message: str):
        """Update progress with consistent formatting"""
        progress = current / total if total > 0 else 0
        self.progress_bar.progress(progress)
        self.status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {current}/{total}: {message}")

@handle_ui_errors("scoring_config")
def render_scoring_config() -> Optional[WBScoringConfig]:
    """Compact scoring configuration UI"""
    st.subheader("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    
    # Cached preset selection
    preset_options = get_preset_options()
    preset = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç:",
        list(preset_options.keys()),
        format_func=lambda x: preset_options[x],
        help="–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞"
    )
    
    config = WBScoringConfig.get_preset(preset)
    
    # Compact advanced settings
    with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        col1, col2 = st.columns(2)
        
        with col1:
            config.max_recommendations = st.slider(
                "–ú–∞–∫—Å. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:", 5, 50, config.max_recommendations
            )
            config.min_recommendations = st.slider(
                "–ú–∏–Ω. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:", 1, 25, config.min_recommendations
            )
        
        with col2:
            config.min_score_threshold = st.slider(
                "–ú–∏–Ω. –ø–æ—Ä–æ–≥ score:", 0.0, 200.0, config.min_score_threshold
            )
            config.exact_size_weight = st.slider(
                "–¢–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä:", 0, 200, config.exact_size_weight
            )
    
    UILogger.log_ui_action("Config rendered", f"preset={preset}")
    return config

@handle_ui_errors("wb_skus_input")
def render_wb_skus_input() -> List[str]:
    """Streamlined WB SKU input component"""
    st.subheader("üìù –í–≤–æ–¥ WB SKU")
    
    input_method = st.radio(
        "–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:",
        ["text", "file"],
        format_func=lambda x: "üìù –¢–µ–∫—Å—Ç" if x == "text" else "üìÑ –§–∞–π–ª",
        horizontal=True
    )
    
    wb_skus = []
    
    if input_method == "text":
        input_text = st.text_area(
            "WB SKU (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            value=st.session_state.wb_skus_input,
            height=150,
            placeholder="123456789\n987654321"
        )
        st.session_state.wb_skus_input = input_text
        wb_skus = _parse_wb_skus(input_text)
    else:
        wb_skus = _handle_file_upload()
    
    if wb_skus:
        _display_skus_preview(wb_skus)
    
    return wb_skus

def _parse_wb_skus(input_text: str) -> List[str]:
    """Parse WB SKUs from text input"""
    if not input_text.strip():
        return []
    
    import re
    skus = re.split(r'[\n,;\s]+', input_text.strip())
    cleaned_skus = [sku.strip() for sku in skus if sku.strip().isdigit()]
    
    UILogger.log_ui_action("SKUs parsed", f"Found {len(cleaned_skus)} valid SKUs")
    return cleaned_skus

def _handle_file_upload() -> List[str]:
    """Handle file upload for WB SKUs"""
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å WB SKU:",
        type=['txt', 'csv', 'xlsx'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: TXT, CSV, XLSX"
    )
    
    if not uploaded_file:
        return []
    
    try:
        if uploaded_file.type == "text/plain":
            content = uploaded_file.read().decode('utf-8')
            return _parse_wb_skus(content)
        elif uploaded_file.type == "text/csv":
            df = pd.read_csv(uploaded_file)
            return df.iloc[:, 0].astype(str).str.strip().tolist()
        elif "spreadsheet" in uploaded_file.type:
            df = pd.read_excel(uploaded_file)
            return df.iloc[:, 0].astype(str).str.strip().tolist()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return []
    
    return []

def _display_skus_preview(wb_skus: List[str]):
    """Display preview of loaded SKUs"""
    st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(wb_skus)} –≤–∞–ª–∏–¥–Ω—ã—Ö WB SKU")
    
    if len(wb_skus) <= 10:
        with st.expander("üìã –í—Å–µ SKU"):
            for i, sku in enumerate(wb_skus, 1):
                st.write(f"{i}. {sku}")
    else:
        with st.expander("üìã –ü—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö 10 SKU"):
            for i, sku in enumerate(wb_skus[:10], 1):
                st.write(f"{i}. {sku}")
            st.write(f"... –∏ –µ—â–µ {len(wb_skus) - 10} SKU")

@handle_ui_errors("batch_results") 
def render_batch_results_compact(batch_result: WBBatchResult):
    """Compact batch results display"""
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # Metrics in a more compact layout
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", len(batch_result.processed_items))
    with col2:
        st.metric("–£—Å–ø–µ—à–Ω–æ", batch_result.success_count)  
    with col3:
        st.metric("–û—à–∏–±–æ–∫", batch_result.error_count)
    with col4:
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{batch_result.success_rate:.1f}%")
    
    st.info(f"‚è±Ô∏è –í—Ä–µ–º—è: {batch_result.total_processing_time:.1f} —Å–µ–∫")
    
    # Compact results table with filtering
    _render_results_table(batch_result)

def _render_results_table(batch_result: WBBatchResult):
    """Render results table with filtering"""
    results_data = []
    for result in batch_result.processed_items:
        results_data.append({
            "WB SKU": result.wb_sku,
            "–°—Ç–∞—Ç—É—Å": result.status.value,
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": len(result.recommendations),
            "–í—Ä–µ–º—è (—Å)": f"{result.processing_time:.2f}",
            "–û—à–∏–±–∫–∞": result.error_message or ""
        })
    
    results_df = pd.DataFrame(results_data)
    
    # Status filter
    status_options = ["–í—Å–µ"] + [s.value for s in WBProcessingStatus]
    status_filter = st.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:", 
        status_options,
        format_func=lambda x: _get_status_emoji(x) + " " + x.replace("_", " ").title()
    )
    
    if status_filter != "–í—Å–µ":
        results_df = results_df[results_df["–°—Ç–∞—Ç—É—Å"] == status_filter]
    
    st.dataframe(results_df, use_container_width=True, height=300)
    
    # Export button
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
        csv = results_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=f"wb_results_{int(time.time())}.csv",
            mime="text/csv"
        )

def _get_status_emoji(status: str) -> str:
    """Get emoji for status"""
    emoji_map = {
        "success": "‚úÖ",
        "no_similar": "‚ö†Ô∏è", 
        "insufficient_recommendations": "üìâ",
        "error": "‚ùå",
        "no_data": "üì≠",
        "no_ozon_link": "üîó"
    }
    return emoji_map.get(status, "üîç")

@handle_ui_errors("manual_recommendations")
def render_manual_recommendations_compact() -> Optional[ManualRecommendationsManager]:
    """Compact manual recommendations UI"""
    st.subheader("üñêÔ∏è –†—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    with st.expander("üìé –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", expanded=False):
        _show_format_help()
        
        # File upload
        manual_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:",
            type=['csv', 'xlsx'],
            help="CSV –∏–ª–∏ Excel —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"
        )
        
        # Action buttons in compact layout
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üìÑ –ü—Ä–∏–º–µ—Ä CSV", use_container_width=True):
                _download_example("csv")
        with col2:
            if st.button("üìä –ü—Ä–∏–º–µ—Ä Excel", use_container_width=True):
                _download_example("excel")  
        with col3:
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
                st.session_state.manual_recommendations_manager = None
                st.rerun()
        
        # Process uploaded file
        if manual_file:
            _process_manual_file(manual_file)
    
    # Show current stats
    _show_manual_stats()
    
    return st.session_state.manual_recommendations_manager

def _show_format_help():
    """Show format help in compact form"""
    st.markdown("""
    **–§–æ—Ä–º–∞—Ç:** `target_wb_sku,position_1,recommended_sku_1,position_2,recommended_sku_2,...`
    
    **–ü—Ä–∏–º–µ—Ä:** `123123,2,321321,5,321456`
    """)

def _download_example(file_type: str):
    """Handle example file downloads"""
    manager = ManualRecommendationsManager()
    
    if file_type == "csv":
        data = manager.generate_example_csv()
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=data,
            file_name="manual_recommendations_example.csv",
            mime="text/csv"
        )
    else:
        data = manager.generate_example_excel()
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å Excel", 
            data=data,
            file_name="manual_recommendations_example.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

def _process_manual_file(manual_file):
    """Process uploaded manual recommendations file"""
    try:
        manager = ManualRecommendationsManager()
        file_ext = manual_file.name.lower().split('.')[-1]
        
        if file_ext == 'csv':
            success = manager.load_from_csv_file(manual_file)
        elif file_ext == 'xlsx':
            success = manager.load_from_excel_file(manual_file)
        else:
            st.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_ext}")
            return
        
        if success:
            st.session_state.manual_recommendations_manager = manager
            stats = manager.get_statistics()
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {stats['total_targets']} —Ç–æ–≤–∞—Ä–æ–≤, {stats['total_recommendations']} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            UILogger.log_ui_action("Manual recommendations loaded", f"File: {manual_file.name}")
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        UILogger.log_error("Manual file processing", e)

def _show_manual_stats():
    """Show current manual recommendations stats"""
    if st.session_state.manual_recommendations_manager:
        stats = st.session_state.manual_recommendations_manager.get_statistics()
        st.info(f"üìä **–ê–∫—Ç–∏–≤–Ω–æ:** {stats['total_targets']} —Ç–æ–≤–∞—Ä–æ–≤, {stats['total_recommendations']} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    else:
        st.info("üìã –†—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

def create_export_table(batch_result: WBBatchResult) -> pd.DataFrame:
    """Create optimized export table"""
    table_data = []
    
    for result in batch_result.processed_items:
        if result.success and result.recommendations:
            for i, rec in enumerate(result.recommendations, 1):
                rec_num = rec.manual_position if rec.is_manual else i
                
                table_data.append({
                    "–ò—Å—Ö–æ–¥–Ω—ã–π WB SKU": result.wb_sku,
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ": rec_num,
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π WB SKU": rec.product_info.wb_sku,
                    "–¢–∏–ø": "üñêÔ∏è –†—É—á–Ω–∞—è" if rec.is_manual else "ü§ñ –ê–ª–≥–æ—Ä–∏—Ç–º",
                    "Score": round(rec.score, 1),
                    "–ë—Ä–µ–Ω–¥": rec.product_info.wb_brand,
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": rec.product_info.wb_category,
                    "–†–∞–∑–º–µ—Ä—ã": rec.product_info.get_size_range_str(),
                    "–û—Å—Ç–∞—Ç–æ–∫": rec.product_info.wb_fbo_stock,
                    "–¶–µ–Ω–∞": rec.product_info.wb_full_price,
                    "–û–±–æ–≥–∞—â–µ–Ω–∏–µ": f"{rec.product_info.get_enrichment_score():.1%}",
                    "–ò—Å—Ç–æ—á–Ω–∏–∫": rec.product_info.enrichment_source
                })
    
    return pd.DataFrame(table_data)

def render_export_section(batch_result: WBBatchResult):
    """Render compact export section"""
    st.subheader("üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    df = create_export_table(batch_result)
    
    if df.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    st.info(f"üìä –ì–æ—Ç–æ–≤–æ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: {len(df)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    st.dataframe(df.head(20), use_container_width=True)
    
    if len(df) > 20:
        st.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(df)} —Å—Ç—Ä–æ–∫")
    
    # Export buttons
    col1, col2 = st.columns(2)
    
    with col1:
        csv_data = df.to_csv(index=False).encode('utf-8')
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=csv_data,
            file_name=f"wb_recommendations_{int(time.time())}.csv",
            mime="text/csv",
            use_container_width=True
        )
    
    with col2:
        excel_buffer = io.BytesIO()
        with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
        
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å Excel",
            data=excel_buffer.getvalue(),
            file_name=f"wb_recommendations_{int(time.time())}.xlsx", 
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )

# Utility functions for better organization
class ComponentHelpers:
    """Helper functions for UI components"""
    
    @staticmethod
    def format_file_size(size_bytes: int) -> str:
        """Format file size in human readable format"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"
    
    @staticmethod
    def truncate_text(text: str, max_length: int = 50) -> str:
        """Truncate text with ellipsis"""
        if len(text) <= max_length:
            return text
        return text[:max_length-3] + "..."
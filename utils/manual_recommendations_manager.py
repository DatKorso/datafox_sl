"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—É—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ WB —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ–±–∞–≤–ª—è—Ç—å —Ä—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
1. –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞ —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
2. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

–§–æ—Ä–º–∞—Ç CSV —Ñ–∞–π–ª–∞:
target_wb_sku,position_1,recommended_sku_1,position_2,recommended_sku_2,...

–ü—Ä–∏–º–µ—Ä:
123123,2,321321,5,321456
456456,1,789789,3,111222,7,333444

–ê–≤—Ç–æ—Ä: DataFox SL Project
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import pandas as pd
import logging
from typing import Dict, List, Tuple, Optional, Union
from dataclasses import dataclass
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class ManualRecommendation:
    """–ú–æ–¥–µ–ª—å —Ä—É—á–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    target_wb_sku: str
    position: int
    recommended_wb_sku: str
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è"""
        if not str(self.target_wb_sku).strip():
            raise ValueError("target_wb_sku –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not str(self.recommended_wb_sku).strip():
            raise ValueError("recommended_wb_sku –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if self.position < 1:
            raise ValueError("position –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= 1")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º
        self.target_wb_sku = str(self.target_wb_sku).strip()
        self.recommended_wb_sku = str(self.recommended_wb_sku).strip()


class ManualRecommendationsManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã WB —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è CSV —Ñ–∞–π–ª–æ–≤ —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        # –ö—ç—à —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {target_sku: [(position, recommended_sku), ...]}
        self.manual_data: Dict[str, List[Tuple[int, str]]] = {}
        self.loaded_data_info = {
            'total_targets': 0,
            'total_recommendations': 0,
            'source': 'none'
        }
        logger.info("üìã ManualRecommendationsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_from_csv_file(self, csv_file) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞ Streamlit
        
        Args:
            csv_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ st.file_uploader
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            content = csv_file.read()
            if isinstance(content, bytes):
                content = content.decode('utf-8')
            
            logger.info(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ CSV —Ñ–∞–π–ª–∞: {csv_file.name}")
            return self._load_from_csv_content(content, source=f"file:{csv_file.name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞ {csv_file.name}: {e}")
            return False
    
    def load_from_excel_file(self, excel_file) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ Streamlit
        
        Args:
            excel_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ st.file_uploader
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ Excel —Ñ–∞–π–ª–∞: {excel_file.name}")
            return self._load_from_excel_content(excel_file, source=f"file:{excel_file.name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ {excel_file.name}: {e}")
            return False
    
    def load_from_csv_string(self, csv_content: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏ CSV
        
        Args:
            csv_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        logger.info("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏")
        return self._load_from_csv_content(csv_content, source="string")
    
    def _load_from_csv_content(self, csv_content: str, source: str = "unknown") -> bool:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        
        Args:
            csv_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            self.clear()
            
            # –ß–∏—Ç–∞–µ–º CSV
            df = pd.read_csv(io.StringIO(csv_content))
            logger.info(f"üìä CSV –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
            
            return self._process_dataframe(df, source)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")
            self.clear()
            return False
    
    def _load_from_excel_content(self, excel_file, source: str = "unknown") -> bool:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        
        Args:
            excel_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª –∏–∑ Streamlit
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            self.clear()
            
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª (–ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç)
            df = pd.read_excel(excel_file, sheet_name=0)
            logger.info(f"üìä Excel –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
            
            return self._process_dataframe(df, source)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
            self.clear()
            return False
    
    def _process_dataframe(self, df: pd.DataFrame, source: str = "unknown") -> bool:
        """
        –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ DataFrame (–∏–∑ CSV –∏–ª–∏ Excel)
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if df.empty:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π")
                return False
            
            if len(df.columns) < 3:
                logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)} (–º–∏–Ω–∏–º—É–º 3)")
                return False
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            total_recommendations = 0
            
            for index, row in df.iterrows():
                try:
                    target_sku = str(row.iloc[0]).strip()
                    if not target_sku or target_sku.lower() == 'nan':
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {index + 1}: –ø—É—Å—Ç–æ–π target_sku")
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä—ã (–ø–æ–∑–∏—Ü–∏—è, –∞—Ä—Ç–∏–∫—É–ª)
                    recommendations = []
                    
                    # –ù–∞—á–∏–Ω–∞–µ–º —Å 1-–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (position_1)
                    for col_idx in range(1, len(row), 2):
                        if col_idx + 1 >= len(row):
                            break  # –ù–µ—Ç –ø–∞—Ä—ã
                        
                        position_val = row.iloc[col_idx]
                        sku_val = row.iloc[col_idx + 1]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏–ª–∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        if (pd.isna(position_val) or pd.isna(sku_val) or 
                            str(position_val).strip() == '' or str(sku_val).strip() == ''):
                            continue
                        
                        try:
                            position = int(position_val)
                            recommended_sku = str(sku_val).strip()
                            
                            # –í–∞–ª–∏–¥–∞—Ü–∏—è
                            manual_rec = ManualRecommendation(target_sku, position, recommended_sku)
                            recommendations.append((manual_rec.position, manual_rec.recommended_wb_sku))
                            
                        except (ValueError, TypeError) as e:
                            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–∞—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 1}: {position_val}, {sku_val} - {e}")
                            continue
                    
                    if recommendations:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                        recommendations.sort(key=lambda x: x[0])
                        self.manual_data[target_sku] = recommendations
                        total_recommendations += len(recommendations)
                        
                        logger.debug(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {target_sku}: {len(recommendations)} —à—Ç.")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {index + 1}: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.loaded_data_info = {
                'total_targets': len(self.manual_data),
                'total_recommendations': total_recommendations,
                'source': source
            }
            
            logger.info(f"‚úÖ –†—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
            logger.info(f"   üìä –¢–æ–≤–∞—Ä–æ–≤ —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏: {self.loaded_data_info['total_targets']}")
            logger.info(f"   üìä –í—Å–µ–≥–æ —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {self.loaded_data_info['total_recommendations']}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.clear()
            return False
    
    def get_manual_recommendations(self, target_wb_sku: str) -> List[Tuple[int, str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        
        Args:
            target_wb_sku: WB SKU —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            List[Tuple[int, str]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–ø–æ–∑–∏—Ü–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π_sku)
        """
        target_key = str(target_wb_sku).strip()
        result = self.manual_data.get(target_key, [])
        
        if result:
            logger.debug(f"üìã –ù–∞–π–¥–µ–Ω—ã —Ä—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {target_key}: {len(result)} —à—Ç.")
        
        return result
    
    def has_manual_data(self, target_wb_sku: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        
        Args:
            target_wb_sku: WB SKU —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –µ—Å—Ç—å —Ä—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        target_key = str(target_wb_sku).strip()
        return target_key in self.manual_data
    
    def get_all_target_skus(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ target WB SKU
        """
        return list(self.manual_data.keys())
    
    def get_statistics(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        return self.loaded_data_info.copy()
    
    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.manual_data.clear()
        self.loaded_data_info = {
            'total_targets': 0,
            'total_recommendations': 0,
            'source': 'none'
        }
        logger.info("üßπ –†—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def is_empty(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ
        
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        """
        return len(self.manual_data) == 0
    
    def _detect_csv_separator(self, csv_content: str) -> str:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è CSV
        
        Args:
            csv_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV
            
        Returns:
            str: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        """
        # –£–±–∏—Ä–∞–µ–º BOM —Å–∏–º–≤–æ–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if csv_content.startswith('\ufeff'):
            csv_content = csv_content[1:]
        
        first_line = csv_content.split('\n')[0] if csv_content else ""
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        comma_count = first_line.count(',')
        semicolon_count = first_line.count(';')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –∏ –æ–Ω–∏ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if semicolon_count > comma_count:
            logger.info(f"üîß –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: ';' (–Ω–∞–π–¥–µ–Ω–æ {semicolon_count} —Å–∏–º–≤–æ–ª–æ–≤)")
            return ';'
        else:
            logger.info(f"üîß –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: ',' (–Ω–∞–π–¥–µ–Ω–æ {comma_count} —Å–∏–º–≤–æ–ª–æ–≤)")
            return ','

    def validate_csv_format(self, csv_content: str) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ CSV —Ñ–∞–π–ª–∞ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            csv_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV
            
        Returns:
            Tuple[bool, str]: (—è–≤–ª—è–µ—Ç—Å—è_–≤–∞–ª–∏–¥–Ω—ã–º, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ–±_–æ—à–∏–±–∫–µ)
        """
        try:
            # –£–±–∏—Ä–∞–µ–º BOM —Å–∏–º–≤–æ–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if csv_content.startswith('\ufeff'):
                csv_content = csv_content[1:]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            separator = self._detect_csv_separator(csv_content)
            
            df = pd.read_csv(io.StringIO(csv_content), sep=separator)
            
            if df.empty:
                return False, "CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π"
            
            if len(df.columns) < 3:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)} (–º–∏–Ω–∏–º—É–º 3: target_sku, position_1, recommended_sku_1)"
            
            if len(df.columns) % 2 == 0:
                return False, f"–ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}. –û–∂–∏–¥–∞–µ—Ç—Å—è: target_sku + –ø–∞—Ä—ã (position, recommended_sku)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            expected_pattern = ["target_wb_sku"]
            for i in range(1, len(df.columns), 2):
                expected_pattern.extend([f"position_{(i+1)//2}", f"recommended_sku_{(i+1)//2}"])
            
            return True, f"–§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {len(df)} —Å—Ç—Ä–æ–∫, {(len(df.columns)-1)//2} –º–∞–∫—Å. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: '{separator}')"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}"
    
    def generate_example_csv(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ CSV —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Returns:
            str: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏–º–µ—Ä–∞ CSV
        """
        example_data = """target_wb_sku,position_1,recommended_sku_1,position_2,recommended_sku_2,position_3,recommended_sku_3
123123,2,321321,5,321456,
456456,1,789789,3,111222,7,333444
789789,4,123456,
999888,1,111111,2,222222,3,333333"""
        
        return example_data
    
    def generate_example_excel(self) -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Returns:
            bytes: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏–º–µ—Ä–∞ Excel —Ñ–∞–π–ª–∞
        """
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
        data = {
            'target_wb_sku': ['123123', '456456', '789789', '999888'],
            'position_1': [2, 1, 4, 1],
            'recommended_sku_1': ['321321', '789789', '123456', '111111'],
            'position_2': [5, 3, None, 2],
            'recommended_sku_2': ['321456', '111222', None, '222222'],
            'position_3': [None, 7, None, 3],
            'recommended_sku_3': [None, '333444', None, '333333']
        }
        
        df = pd.DataFrame(data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='Manual_Recommendations')
        
        return output.getvalue()
    
    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        stats = self.get_statistics()
        return (f"ManualRecommendationsManager("
                f"targets={stats['total_targets']}, "
                f"recommendations={stats['total_recommendations']}, "
                f"source='{stats['source']}')")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

def create_example_csv_file(file_path: str) -> bool:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º CSV
    
    Args:
        file_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
    """
    try:
        manager = ManualRecommendationsManager()
        example_content = manager.generate_example_csv()
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(example_content)
        
        logger.info(f"‚úÖ –ü—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–Ω: {file_path}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ CSV: {e}")
        return False


def validate_manual_recommendations_csv(csv_file_path: str) -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞ —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    
    Args:
        csv_file_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        
    Returns:
        Tuple[bool, str]: (—è–≤–ª—è–µ—Ç—Å—è_–≤–∞–ª–∏–¥–Ω—ã–º, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        manager = ManualRecommendationsManager()
        
        with open(csv_file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        return manager.validate_csv_format(content)
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ManualRecommendationsManager")
    
    manager = ManualRecommendationsManager()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_csv = manager.generate_example_csv()
    print("\nüìÑ –ü—Ä–∏–º–µ—Ä CSV:")
    print(test_csv)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    success = manager.load_from_csv_string(test_csv)
    print(f"\nüìä –ó–∞–≥—Ä—É–∑–∫–∞: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if success:
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {manager.get_statistics()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        test_sku = "123123"
        recommendations = manager.get_manual_recommendations(test_sku)
        print(f"\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {test_sku}: {recommendations}")
        
        print(f"üìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏: {manager.get_all_target_skus()}")
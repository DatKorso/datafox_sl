"""
CSV Exporter –¥–ª—è Rich Content - –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV —Ñ–æ—Ä–º–∞—Ç.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ CSV
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Streamlit download_button
- –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
"""

import csv
import io
import json
import logging
from typing import List, Dict, Any, Optional
import streamlit as st
import pandas as pd

logger = logging.getLogger(__name__)

class RichContentCSVExporter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Rich Content –≤ CSV —Ñ–æ—Ä–º–∞—Ç.
    
    –§–æ—Ä–º–∞—Ç CSV:
    - oz_vendor_code: –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
    - rich_content_json: JSON —Å—Ç—Ä–æ–∫–∞ —Å Rich Content
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞"""
        logger.debug("RichContentCSVExporter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def export_to_csv_string(self, results: List[Dict[str, Any]]) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV —Å—Ç—Ä–æ–∫—É.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            CSV —Å—Ç—Ä–æ–∫–∞
        """
        if not results:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return ""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å Rich Content
        valid_results = [
            r for r in results 
            if r.get('success') and r.get('rich_content_json')
        ]
        
        if not valid_results:
            logger.warning("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return ""
        
        logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º {len(valid_results)} –∑–∞–ø–∏—Å–µ–π –≤ CSV")
        
        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.writer(output, quoting=csv.QUOTE_MINIMAL)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        writer.writerow(['oz_vendor_code', 'rich_content_json', 'scoring_details'])
        
        # –î–∞–Ω–Ω—ã–µ
        for result in valid_results:
            vendor_code = result.get('oz_vendor_code', '')
            rich_content = result.get('rich_content_json', '')
            scoring_details = self._generate_scoring_details(result)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
            if rich_content and self._validate_json(rich_content):
                writer.writerow([vendor_code, rich_content, scoring_details])
            else:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {vendor_code}: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
        
        csv_content = output.getvalue()
        output.close()
        
        logger.info(f"CSV —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        return csv_content
    
    def export_to_dataframe(self, results: List[Dict[str, Any]]) -> pd.DataFrame:
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ pandas DataFrame.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        if not results:
            return pd.DataFrame(columns=['oz_vendor_code', 'rich_content_json'])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        valid_results = [
            {
                'oz_vendor_code': r.get('oz_vendor_code', ''),
                'rich_content_json': r.get('rich_content_json', '')
            }
            for r in results 
            if r.get('success') and r.get('rich_content_json')
        ]
        
        df = pd.DataFrame(valid_results)
        logger.info(f"–°–æ–∑–¥–∞–Ω DataFrame —Å {len(df)} –∑–∞–ø–∏—Å—è–º–∏")
        
        return df
    
    def create_download_button(
        self, 
        results: List[Dict[str, Any]], 
        filename: Optional[str] = None,
        button_label: str = "üì• –°–∫–∞—á–∞—Ç—å CSV"
    ) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV –≤ Streamlit.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            button_label: –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
            
        Returns:
            True –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        """
        if not results:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return False
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
        csv_content = self.export_to_csv_string(results)
        
        if not csv_content:
            st.warning("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return False
        
        # –ò–º—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not filename:
            import time
            filename = f"rich_content_export_{int(time.time())}.csv"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        clicked = st.download_button(
            label=button_label,
            data=csv_content,
            file_name=filename,
            mime='text/csv',
            use_container_width=True,
            type="primary"
        )
        
        if clicked:
            logger.info(f"CSV —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω: {filename}")
        
        return clicked
    
    def get_export_preview(
        self, 
        results: List[Dict[str, Any]], 
        max_rows: int = 10
    ) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            max_rows: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–≤—å—é
            
        Returns:
            DataFrame —Å –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
        """
        if not results:
            return pd.DataFrame()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        preview_data = []
        
        for result in results[:max_rows]:
            vendor_code = result.get('oz_vendor_code', '')
            rich_content = result.get('rich_content_json', '')
            success = result.get('success', False)
            recommendations_count = result.get('recommendations_count', 0)
            processing_time = result.get('processing_time', 0)
            
            # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ JSON
            json_info = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            if rich_content:
                try:
                    json_data = json.loads(rich_content)
                    json_info = f"‚úÖ {len(json_data.get('items', []))} —Ç–æ–≤–∞—Ä–æ–≤"
                except:
                    json_info = "‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"
            
            preview_data.append({
                'oz_vendor_code': vendor_code,
                'success': "‚úÖ" if success else "‚ùå",
                'recommendations': recommendations_count,
                'processing_time_ms': round(processing_time * 1000, 1),
                'rich_content_status': json_info
            })
        
        df = pd.DataFrame(preview_data)
        logger.debug(f"–°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–≤—å—é —Å {len(df)} –∑–∞–ø–∏—Å—è–º–∏")
        
        return df
    
    def _validate_json(self, json_string: str) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å—Ç—Ä–æ–∫–∏.
        
        Args:
            json_string: JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ JSON –≤–∞–ª–∏–¥–Ω—ã–π
        """
        if not json_string or not isinstance(json_string, str):
            return False
        
        try:
            json.loads(json_string)
            return True
        except (json.JSONDecodeError, TypeError):
            return False
    
    def get_export_statistics(self, results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not results:
            return {
                'total_results': 0,
                'exportable_results': 0,
                'export_rate': 0.0,
                'total_size_bytes': 0
            }
        
        exportable = [
            r for r in results 
            if r.get('success') and r.get('rich_content_json')
        ]
        
        # –†–∞–∑–º–µ—Ä CSV
        csv_content = self.export_to_csv_string(results)
        size_bytes = len(csv_content.encode('utf-8'))
        
        stats = {
            'total_results': len(results),
            'exportable_results': len(exportable),
            'export_rate': len(exportable) / len(results) * 100 if results else 0,
            'total_size_bytes': size_bytes,
            'size_mb': round(size_bytes / 1024 / 1024, 2)
        }
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {stats}")
        return stats
    
    def _generate_scoring_details(self, result: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ scoring –¥–ª—è CSV.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π scoring
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            scoring_details = result.get('scoring_details', '')
            if scoring_details:
                return scoring_details
            
            # Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details = []
            
            recommendations_count = result.get('recommendations_count', 0)
            details.append(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {recommendations_count}")
            
            processing_time = result.get('processing_time', 0)
            details.append(f"–í—Ä–µ–º—è: {processing_time:.2f}—Å")
            
            if result.get('success'):
                details.append("–°—Ç–∞—Ç—É—Å: —É—Å–ø–µ—à–Ω–æ")
            else:
                error_msg = result.get('error_message', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                details.append(f"–û—à–∏–±–∫–∞: {error_msg}")
            
            return " | ".join(details)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ scoring details: {e}")
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

"""UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
—É–ª—É—á—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤, —Å–ª–µ–¥—É—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –ø—Ä–æ–µ–∫—Ç–∞.

–ê–≤—Ç–æ—Ä: DataFox SL Project
–í–µ—Ä—Å–∏—è: 2.0.0
"""

import streamlit as st
import pandas as pd
from typing import List, Dict, Any, Optional
from utils.advanced_product_grouper import GroupingConfig, GroupingResult


def render_grouping_configuration() -> GroupingConfig:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç UI –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏.
    
    Returns:
        GroupingConfig: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    """
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
        
        # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        available_columns = ['gender', 'wb_category', 'brand', 'color']
        grouping_columns = st.multiselect(
            "–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏",
            options=available_columns,
            default=['gender', 'wb_category'],
            help="–¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"
        )
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã
        min_group_rating = st.number_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã",
            min_value=0.0,
            max_value=5.0,
            value=4.0,
            step=0.1,
            help="–ì—Ä—É–ø–ø—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –Ω–∏–∂–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–∞–º–∏"
        )
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU –≤ –≥—Ä—É–ø–ø–µ
        max_wb_sku_per_group = st.number_input(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU –≤ –≥—Ä—É–ø–ø–µ",
            min_value=1,
            max_value=50,
            value=10,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ"
        )
    
    with col2:
        st.markdown("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:**")
        
        # –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –ø–æ–ª—é sort
        enable_sort_priority = st.checkbox(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –ø–æ–ª—é 'sort'",
            value=True,
            help="–¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏–∑ –ø–æ–ª—è sort"
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        wb_category = st.text_input(
            "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ WB (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
            value="",
            help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        )
        
        if wb_category.strip() == "":
            wb_category = None
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not grouping_columns:
        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        st.stop()
    
    return GroupingConfig(
        grouping_columns=grouping_columns,
        min_group_rating=min_group_rating,
        max_wb_sku_per_group=max_wb_sku_per_group,
        enable_sort_priority=enable_sort_priority,
        wb_category=wb_category
    )


def render_wb_sku_input() -> List[str]:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç UI –¥–ª—è –≤–≤–æ–¥–∞ WB SKU.
    
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ WB SKU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    st.subheader("üìù –í–≤–æ–¥ WB SKU")
    
    input_method = st.radio(
        "–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ WB SKU:",
        options=["–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"],
        horizontal=True
    )
    
    wb_skus = []
    
    if input_method == "–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ":
        wb_sku_text = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ WB SKU (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
            height=150,
            help="–ö–∞–∂–¥—ã–π WB SKU –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"
        )
        
        if wb_sku_text.strip():
            wb_skus = [sku.strip() for sku in wb_sku_text.strip().split('\n') if sku.strip()]
    
    else:  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å WB SKU",
            type=['txt', 'csv', 'xlsx'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å WB SKU –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ"
        )
        
        if uploaded_file is not None:
            try:
                if uploaded_file.name.endswith('.txt'):
                    content = uploaded_file.read().decode('utf-8')
                    wb_skus = [sku.strip() for sku in content.split('\n') if sku.strip()]
                
                elif uploaded_file.name.endswith('.csv'):
                    df = pd.read_csv(uploaded_file)
                    wb_skus = df.iloc[:, 0].astype(str).tolist()
                
                elif uploaded_file.name.endswith('.xlsx'):
                    df = pd.read_excel(uploaded_file)
                    wb_skus = df.iloc[:, 0].astype(str).tolist()
                
                # –û—á–∏—â–∞–µ–º –æ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                wb_skus = [sku.strip() for sku in wb_skus if str(sku).strip() and str(sku).strip() != 'nan']
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
                wb_skus = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö SKU
    if wb_skus:
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(wb_skus)} WB SKU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        with st.expander("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä WB SKU"):
            preview_count = min(10, len(wb_skus))
            st.write(f"–ü–µ—Ä–≤—ã–µ {preview_count} –∏–∑ {len(wb_skus)} WB SKU:")
            for i, sku in enumerate(wb_skus[:preview_count], 1):
                st.write(f"{i}. {sku}")
            
            if len(wb_skus) > preview_count:
                st.write(f"... –∏ –µ—â–µ {len(wb_skus) - preview_count} SKU")
    
    return wb_skus


def render_grouping_results(result: GroupingResult):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏.
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    """
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    render_grouping_statistics(result.statistics)
    
    # –õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    render_process_logs(result.logs)
    
    # –ì—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
    render_product_groups(result.groups)
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    render_problematic_items(result.low_rating_items, result.defective_items)


def render_grouping_statistics(statistics: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏.
    
    Args:
        statistics: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "–í—Å–µ–≥–æ –≥—Ä—É–ø–ø",
            statistics.get('total_groups', 0)
        )
    
    with col2:
        st.metric(
            "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤",
            statistics.get('total_items_processed', 0)
        )
    
    with col3:
        avg_size = statistics.get('avg_group_size', 0)
        st.metric(
            "–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã",
            f"{avg_size:.1f}"
        )
    
    with col4:
        avg_rating = statistics.get('avg_group_rating', 0)
        st.metric(
            "–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø",
            f"{avg_rating:.2f}"
        )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if statistics.get('low_rating_items_count', 0) > 0 or statistics.get('defective_items_count', 0) > 0:
        st.markdown("**–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**")
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric(
                "–¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º",
                statistics.get('low_rating_items_count', 0)
            )
        
        with col2:
            st.metric(
                "–î–µ—Ñ–µ–∫—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
                statistics.get('defective_items_count', 0)
            )


def render_process_logs(logs: List[str]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏.
    
    Args:
        logs: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–∞
    """
    with st.expander("üìã –õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏", expanded=False):
        if logs:
            for log_entry in logs:
                if "[ERROR]" in log_entry:
                    st.error(log_entry)
                elif "[WARNING]" in log_entry:
                    st.warning(log_entry)
                else:
                    st.info(log_entry)
        else:
            st.info("–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


def render_product_groups(groups: List[Dict[str, Any]]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤.
    
    Args:
        groups: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤
    """
    st.markdown("### üéØ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã")
    
    if not groups:
        st.warning("–ì—Ä—É–ø–ø—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        return
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø
    col1, col2 = st.columns(2)
    
    with col1:
        min_rating_filter = st.number_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            min_value=0.0,
            max_value=5.0,
            value=0.0,
            step=0.1,
            key="group_rating_filter"
        )
    
    with col2:
        min_size_filter = st.number_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã",
            min_value=1,
            max_value=50,
            value=1,
            key="group_size_filter"
        )
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã
    filtered_groups = [
        group for group in groups
        if group['group_rating'] >= min_rating_filter and
           group['item_count'] >= min_size_filter
    ]
    
    st.write(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_groups)} –∏–∑ {len(groups)} –≥—Ä—É–ø–ø")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä—É–ø–ø—ã
    for i, group in enumerate(filtered_groups, 1):
        with st.expander(
            f"–ì—Ä—É–ø–ø–∞ {group['group_id']}: {group['item_count']} —Ç–æ–≤–∞—Ä–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥ {group['group_rating']:.2f}",
            expanded=False
        ):
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã", f"{group['group_rating']:.2f}")
            with col2:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤", group['item_count'])
            with col3:
                priority_count = sum(1 for item in group['items'] if item.get('is_priority_item', False))
                st.metric("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", priority_count)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            items_df = pd.DataFrame(group['items'])
            

            # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_columns = ['wb_sku', 'avg_rating', 'total_stock', 'is_priority_item']
            if 'gender' in items_df.columns:
                display_columns.append('gender')
            if 'wb_category' in items_df.columns:
                display_columns.append('wb_category')
            if 'brand' in items_df.columns:
                display_columns.append('brand')
            if 'color' in items_df.columns:
                display_columns.append('color')
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            available_columns = [col for col in display_columns if col in items_df.columns]
            
            if available_columns:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_df = items_df[available_columns].copy()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
                original_priority = display_df['is_priority_item'].copy() if 'is_priority_item' in display_df.columns else None
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                column_names = {
                    'wb_sku': 'WB SKU',
                    'avg_rating': '–†–µ–π—Ç–∏–Ω–≥',
                    'total_stock': '–û—Å—Ç–∞—Ç–æ–∫',
                    'is_priority_item': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π',
                    'gender': '–ü–æ–ª',
                    'wb_category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                    'brand': '–ë—Ä–µ–Ω–¥',
                    'color': '–¶–≤–µ—Ç'
                }
                display_df = display_df.rename(columns=column_names)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏
                if '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π' in display_df.columns:
                    display_df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π'] = display_df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π'].astype(bool).map({True: '‚úÖ –î–∞', False: '‚ùå –ù–µ—Ç'})
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                def highlight_priority_items(row):
                    if original_priority is not None:
                        row_index = row.name
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –∏–Ω–¥–µ–∫—Å –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        if row_index in original_priority.index and original_priority.loc[row_index]:
                            return ['background-color: #ffcdd2; color: #d32f2f; font-weight: bold'] * len(row)
                    return [''] * len(row)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é
                styled_df = display_df.style.apply(highlight_priority_items, axis=1)
                
                st.dataframe(
                    styled_df,
                    use_container_width=True,
                    hide_index=True
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
                st.markdown("**–õ–µ–≥–µ–Ω–¥–∞:**")
                st.markdown("üî¥ **–ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω** - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Å–µ–∑–æ–Ω 13 –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫)")
                st.markdown("‚ö™ **–û–±—ã—á–Ω—ã–π —Ñ–æ–Ω** - –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä—ã (–Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º)")
            else:
                st.write("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")


def render_problematic_items(
    low_rating_items: List[Dict[str, Any]], 
    defective_items: List[Dict[str, Any]]
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.
    
    Args:
        low_rating_items: –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        defective_items: –î–µ—Ñ–µ–∫—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    """
    if not low_rating_items and not defective_items:
        return
    
    st.markdown("### ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
    
    if low_rating_items:
        with st.expander(f"–¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º ({len(low_rating_items)})", expanded=False):
            df = pd.DataFrame(low_rating_items)
            display_columns = ['wb_sku', 'avg_rating', 'is_priority_item']
            if 'gender' in df.columns:
                display_columns.append('gender')
            if 'wb_category' in df.columns:
                display_columns.append('wb_category')
            if 'total_stock' in df.columns:
                display_columns.append('total_stock')
            
            available_columns = [col for col in display_columns if col in df.columns]
            if available_columns:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_df = df[available_columns].copy()
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                column_names = {
                    'wb_sku': 'WB SKU',
                    'avg_rating': '–†–µ–π—Ç–∏–Ω–≥',
                    'total_stock': '–û—Å—Ç–∞—Ç–æ–∫',
                    'is_priority_item': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π',
                    'gender': '–ü–æ–ª',
                    'wb_category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
                }
                display_df = display_df.rename(columns=column_names)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏
                if '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π' in display_df.columns:
                    display_df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π'] = display_df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π'].map({True: '‚úÖ –î–∞', False: '‚ùå –ù–µ—Ç'})
                
                st.dataframe(display_df, use_container_width=True, hide_index=True)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                priority_count = sum(1 for item in low_rating_items if item.get('is_priority_item', False))
                st.info(f"–ò–∑ –Ω–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {priority_count}")
    
    if defective_items:
        with st.expander(f"–î–µ—Ñ–µ–∫—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({len(defective_items)})", expanded=False):
            df = pd.DataFrame(defective_items)
            display_columns = ['wb_sku', 'avg_rating', 'is_priority_item']
            if 'gender' in df.columns:
                display_columns.append('gender')
            if 'wb_category' in df.columns:
                display_columns.append('wb_category')
            if 'total_stock' in df.columns:
                display_columns.append('total_stock')
            
            available_columns = [col for col in display_columns if col in df.columns]
            if available_columns:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_df = df[available_columns].copy()
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                column_names = {
                    'wb_sku': 'WB SKU',
                    'avg_rating': '–†–µ–π—Ç–∏–Ω–≥',
                    'total_stock': '–û—Å—Ç–∞—Ç–æ–∫',
                    'is_priority_item': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π',
                    'gender': '–ü–æ–ª',
                    'wb_category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
                }
                display_df = display_df.rename(columns=column_names)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏
                if '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π' in display_df.columns:
                    display_df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π'] = display_df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π'].map({True: '‚úÖ –î–∞', False: '‚ùå –ù–µ—Ç'})
                
                st.dataframe(display_df, use_container_width=True, hide_index=True)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                priority_count = sum(1 for item in defective_items if item.get('is_priority_item', False))
                st.info(f"–ò–∑ –Ω–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {priority_count}")


def render_export_options(result: GroupingResult):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    """
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", use_container_width=True):
            excel_data = export_to_excel(result)
            if excel_data:
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                    data=excel_data,
                    file_name=f"product_groups_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
    
    with col2:
        if st.button("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", use_container_width=True):
            csv_data = export_to_csv(result)
            if csv_data:
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                    data=csv_data,
                    file_name=f"product_groups_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv",
                    use_container_width=True
                )


def export_to_excel(result: GroupingResult) -> Optional[bytes]:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel —Ñ–æ—Ä–º–∞—Ç.
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        
    Returns:
        bytes: –î–∞–Ω–Ω—ã–µ Excel —Ñ–∞–π–ª–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        import io
        from openpyxl import Workbook
        
        wb = Workbook()
        
        # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        ws_stats = wb.active
        ws_stats.title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        
        stats_data = [
            ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"],
            ["–í—Å–µ–≥–æ –≥—Ä—É–ø–ø", result.statistics.get('total_groups', 0)],
            ["–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤", result.statistics.get('total_items_processed', 0)],
            ["–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã", f"{result.statistics.get('avg_group_size', 0):.1f}"],
            ["–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø", f"{result.statistics.get('avg_group_rating', 0):.2f}"],
            ["–¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º", result.statistics.get('low_rating_items_count', 0)],
            ["–î–µ—Ñ–µ–∫—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", result.statistics.get('defective_items_count', 0)]
        ]
        
        for row in stats_data:
            ws_stats.append(row)
        
        # –õ–∏—Å—Ç —Å –≥—Ä—É–ø–ø–∞–º–∏
        ws_groups = wb.create_sheet("–ì—Ä—É–ø–ø—ã")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–ì—Ä—É–ø–ø–∞", "WB SKU", "–†–µ–π—Ç–∏–Ω–≥", "–û—Å—Ç–∞—Ç–∫–∏", "–ü–æ–ª", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
        ws_groups.append(headers)
        
        # –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø
        for group in result.groups:
            for item in group['items']:
                row = [
                    group['group_id'],
                    item.get('wb_sku', ''),
                    item.get('avg_rating', ''),
                    item.get('total_stock', ''),
                    item.get('gender', ''),
                    item.get('wb_category', '')
                ]
                ws_groups.append(row)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        
        return output.getvalue()
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {str(e)}")
        return None


def export_to_csv(result: GroupingResult) -> Optional[str]:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–æ—Ä–º–∞—Ç.
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        
    Returns:
        str: –î–∞–Ω–Ω—ã–µ CSV —Ñ–∞–π–ª–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        rows = []
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–ì—Ä—É–ø–ø–∞", "WB SKU", "–†–µ–π—Ç–∏–Ω–≥", "–û—Å—Ç–∞—Ç–∫–∏", "–ü–æ–ª", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
        rows.append(headers)
        
        # –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø
        for group in result.groups:
            for item in group['items']:
                row = [
                    group['group_id'],
                    item.get('wb_sku', ''),
                    item.get('avg_rating', ''),
                    item.get('total_stock', ''),
                    item.get('gender', ''),
                    item.get('wb_category', '')
                ]
                rows.append(row)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ CSV
        import csv
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerows(rows)
        
        return output.getvalue()
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {str(e)}")
        return None


def render_help_section():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏."""
    with st.expander("‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", expanded=False):
        st.markdown("""
        ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Ç–æ–≤–∞—Ä–æ–≤:
        
        1. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:**
           - –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (—Ç–æ–≤–∞—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã)
           - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã (–≥—Ä—É–ø–ø—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–∞–º–∏)
           - –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU –≤ –≥—Ä—É–ø–ø–µ
        
        2. **–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:**
           - –í–≤–µ–¥–∏—Ç–µ WB SKU —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª
           - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: TXT, CSV, XLSX
        
        3. **–ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:**
           - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã"
           - –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        4. **–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
           - –ò–∑—É—á–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
           - –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
           - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        
        5. **–≠–∫—Å–ø–æ—Ä—Ç:**
           - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel –∏–ª–∏ CSV –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
        
        ### –£–ª—É—á—à–µ–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π:
        
        - ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–æ–≤
        - ‚úÖ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–æ–≤ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
        - ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        - ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–¥–∞
        - ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        """)
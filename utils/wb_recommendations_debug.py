"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º WB Recommendations.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB SKU
- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π WB ‚Üî Ozon —á–µ—Ä–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
- –ê–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ü–æ–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import logging
from typing import Dict, List, Any, Optional
from utils.db_connection import connect_db
from utils.cross_marketplace_linker import CrossMarketplaceLinker

logger = logging.getLogger(__name__)

def diagnose_wb_sku(wb_sku: str) -> Dict[str, Any]:
    """
    –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WB SKU –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    
    Args:
        wb_sku: WB SKU –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê WB SKU: {wb_sku}")
    print("=" * 50)
    
    diagnosis = {
        'wb_sku': wb_sku,
        'wb_found': False,
        'wb_data': {},
        'barcodes_count': 0,
        'barcodes': [],
        'ozon_links_found': False,
        'ozon_characteristics': [],
        'enrichment_possible': False,
        'recommendations_blocked_by': [],
        'suggested_fixes': []
    }
    
    try:
        conn = connect_db()
        if not conn:
            diagnosis['error'] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            return diagnosis
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ WB —Ç–æ–≤–∞—Ä–∞
        print("\nüìã –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ WB —Ç–æ–≤–∞—Ä–∞...")
        wb_query = "SELECT * FROM wb_products WHERE wb_sku = ?"
        wb_data = conn.execute(wb_query, [wb_sku]).fetchone()
        
        if not wb_data:
            print(f"‚ùå WB —Ç–æ–≤–∞—Ä {wb_sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            diagnosis['recommendations_blocked_by'].append("WB —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            diagnosis['suggested_fixes'].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç WB –¥–∞–Ω–Ω—ã—Ö")
            return diagnosis
        
        diagnosis['wb_found'] = True
        wb_dict = dict(zip([col[0] for col in conn.execute(wb_query, [wb_sku]).description], wb_data))
        diagnosis['wb_data'] = wb_dict
        
        print(f"‚úÖ WB —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω:")
        print(f"   Brand: {wb_dict.get('wb_brand')}")
        print(f"   Category: {wb_dict.get('wb_category')}")
        print(f"   Stock: {wb_dict.get('wb_fbo_stock', 0)}")
        print(f"   Price: {wb_dict.get('wb_full_price')}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
        print("\nüìä –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤...")
        wb_barcodes_raw = wb_dict.get('wb_barcodes', '')
        if not wb_barcodes_raw or wb_barcodes_raw.strip() == '':
            print("‚ùå –£ WB —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤!")
            diagnosis['recommendations_blocked_by'].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥—ã WB —Ç–æ–≤–∞—Ä–∞")
            diagnosis['suggested_fixes'].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∞ WB –¥–∞–Ω–Ω—ã—Ö")
            return diagnosis
        
        barcodes = [bc.strip() for bc in wb_barcodes_raw.split(';') if bc.strip()]
        diagnosis['barcodes_count'] = len(barcodes)
        diagnosis['barcodes'] = barcodes
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(barcodes)} —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤:")
        for i, bc in enumerate(barcodes[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   {i}. {bc}")
        
        # 3. –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π —Å Ozon
        print("\nüîó –®–ê–ì 3: –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π —Å Ozon —Ç–æ–≤–∞—Ä–∞–º–∏...")
        ozon_links_found = 0
        linked_oz_vendor_codes = []
        
        for bc in barcodes[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
            oz_query = "SELECT oz_vendor_code FROM oz_barcodes WHERE oz_barcode = ?"
            oz_results = conn.execute(oz_query, [bc]).fetchall()
            if oz_results:
                print(f"   –®—Ç—Ä–∏—Ö–∫–æ–¥ {bc}: –Ω–∞–π–¥–µ–Ω–æ {len(oz_results)} Ozon —Ç–æ–≤–∞—Ä–æ–≤")
                for oz in oz_results:
                    linked_oz_vendor_codes.append(oz[0])
                ozon_links_found += len(oz_results)
        
        diagnosis['ozon_links_found'] = ozon_links_found > 0
        
        if ozon_links_found == 0:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π —Å Ozon —Ç–æ–≤–∞—Ä–∞–º–∏!")
            diagnosis['recommendations_blocked_by'].append("–ù–µ—Ç —Å–≤—è–∑–µ–π WB ‚Üî Ozon —á–µ—Ä–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã")
            diagnosis['suggested_fixes'].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –≤ oz_barcodes")
            diagnosis['suggested_fixes'].append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {ozon_links_found} —Å–≤—è–∑–µ–π —Å Ozon —Ç–æ–≤–∞—Ä–∞–º–∏")
            
            # 4. –ê–Ω–∞–ª–∏–∑ Ozon —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            print("\nüìà –®–ê–ì 4: –ê–Ω–∞–ª–∏–∑ Ozon —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
            unique_oz_codes = list(set(linked_oz_vendor_codes))
            
            if unique_oz_codes:
                placeholders = ','.join(['?' for _ in unique_oz_codes])
                oz_chars_query = f"""
                SELECT DISTINCT
                    ocp.oz_vendor_code,
                    ocp.type,
                    ocp.gender,
                    ocp.oz_brand,
                    ocp.season,
                    ocp.color,
                    ocp.fastener_type
                FROM oz_category_products ocp
                WHERE ocp.oz_vendor_code IN ({placeholders})
                """
                
                oz_chars_results = conn.execute(oz_chars_query, unique_oz_codes).fetchall()
                
                if oz_chars_results:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(oz_chars_results)} –∑–∞–ø–∏—Å–µ–π —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
                    complete_records = 0
                    for record in oz_chars_results:
                        record_dict = dict(zip(['oz_vendor_code', 'type', 'gender', 'oz_brand', 'season', 'color', 'fastener_type'], record))
                        diagnosis['ozon_characteristics'].append(record_dict)
                        
                        if record_dict['type'] and record_dict['gender'] and record_dict['oz_brand']:
                            complete_records += 1
                    
                    print(f"   –ü–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (type+gender+brand): {complete_records}/{len(oz_chars_results)}")
                    
                    if complete_records > 0:
                        diagnosis['enrichment_possible'] = True
                        print("‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ!")
                    else:
                        print("‚ùå –ù–µ—Ç –ø–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è!")
                        diagnosis['recommendations_blocked_by'].append("–ù–µ–ø–æ–ª–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ oz_category_products")
                        diagnosis['suggested_fixes'].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ oz_category_products")
                        diagnosis['suggested_fixes'].append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è")
                else:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ oz_category_products!")
                    diagnosis['recommendations_blocked_by'].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ oz_category_products")
                    diagnosis['suggested_fixes'].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö oz_category_products")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if diagnosis['enrichment_possible']:
            print("\nüéØ –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
            
            # –ë–µ—Ä–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ª–Ω–æ–π –∑–∞–ø–∏—Å–∏
            complete_record = None
            for record in diagnosis['ozon_characteristics']:
                if record['type'] and record['gender'] and record['oz_brand']:
                    complete_record = record
                    break
            
            if complete_record:
                # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
                candidates_query = """
                SELECT DISTINCT ocp.oz_vendor_code
                FROM oz_category_products ocp
                LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
                WHERE ocp.type = ?
                AND ocp.gender = ?
                AND ocp.oz_brand = ?
                AND COALESCE(op.oz_fbo_stock, 0) > 0
                LIMIT 10
                """
                
                candidates = conn.execute(candidates_query, [
                    complete_record['type'],
                    complete_record['gender'], 
                    complete_record['oz_brand']
                ]).fetchall()
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(candidates)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö Ozon –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                
                if len(candidates) > 0:
                    # –ò—â–µ–º WB —Ç–æ–≤–∞—Ä—ã –ø–æ —ç—Ç–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
                    oz_codes = [c[0] for c in candidates]
                    placeholders = ','.join(['?' for _ in oz_codes])
                    
                    wb_candidates_query = f"""
                    WITH oz_barcodes_list AS (
                        SELECT DISTINCT ozb.oz_barcode
                        FROM oz_barcodes ozb
                        WHERE ozb.oz_vendor_code IN ({placeholders})
                        AND ozb.oz_barcode IS NOT NULL
                        AND TRIM(ozb.oz_barcode) != ''
                    ),
                    wb_barcodes_split AS (
                        SELECT 
                            wb.wb_sku,
                            TRIM(bc.barcode) as individual_barcode
                        FROM wb_products wb,
                        UNNEST(string_split(wb.wb_barcodes, ';')) AS bc(barcode)
                        WHERE wb.wb_barcodes IS NOT NULL 
                          AND TRIM(wb.wb_barcodes) != ''
                          AND TRIM(bc.barcode) != ''
                          AND wb.wb_sku != ?
                    )
                    SELECT DISTINCT wbs.wb_sku
                    FROM wb_barcodes_split wbs
                    INNER JOIN oz_barcodes_list ozb ON wbs.individual_barcode = ozb.oz_barcode
                    LIMIT 10
                    """
                    
                    wb_candidates = conn.execute(wb_candidates_query, oz_codes + [wb_sku]).fetchall()
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(wb_candidates)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö WB –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                    
                    if len(wb_candidates) == 0:
                        diagnosis['recommendations_blocked_by'].append("–ù–µ—Ç WB –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                        diagnosis['suggested_fixes'].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ WB ‚Üî Ozon")
                        diagnosis['suggested_fixes'].append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞")
        
        # 6. –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        if not diagnosis['recommendations_blocked_by']:
            print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å.")
        else:
            print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for i, problem in enumerate(diagnosis['recommendations_blocked_by'], 1):
                print(f"   {i}. {problem}")
            
            print("\nüí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
            for i, fix in enumerate(diagnosis['suggested_fixes'], 1):
                print(f"   {i}. {fix}")
        
        conn.close()
        return diagnosis
        
    except Exception as e:
        diagnosis['error'] = str(e)
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return diagnosis

def test_cross_marketplace_linking(wb_sku: str) -> Dict[str, Any]:
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CrossMarketplaceLinker –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB SKU
    """
    print(f"\nüîó –¢–ï–°–¢ CrossMarketplaceLinker –¥–ª—è WB SKU: {wb_sku}")
    print("=" * 50)
    
    try:
        conn = connect_db()
        if not conn:
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'}
        
        linker = CrossMarketplaceLinker(conn)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
        print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º link_wb_to_oz...")
        linked_oz = linker.link_wb_to_oz([wb_sku])
        
        if linked_oz and wb_sku in linked_oz:
            oz_codes = linked_oz[wb_sku]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(oz_codes)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö Ozon —Ç–æ–≤–∞—Ä–æ–≤:")
            for i, oz_code in enumerate(oz_codes[:5], 1):
                print(f"   {i}. {oz_code}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º find_linked_products
            print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º find_linked_products...")
            linked_products = linker.find_linked_products([wb_sku], include_wb_data=True)
            
            if linked_products:
                print(f"‚úÖ find_linked_products –≤–µ—Ä–Ω—É–ª {len(linked_products)} –∑–∞–ø–∏—Å–µ–π")
                for product in linked_products[:3]:
                    print(f"   WB SKU: {product.get('wb_sku')}")
                    print(f"   Type: {product.get('type')}")
                    print(f"   Gender: {product.get('gender')}")
                    print(f"   Brand: {product.get('oz_brand')}")
                    print("   ---")
            else:
                print("‚ùå find_linked_products –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö")
                
        else:
            print("‚ùå link_wb_to_oz –Ω–µ –Ω–∞—à–µ–ª —Å–≤—è–∑–µ–π")
        
        conn.close()
        return linked_oz
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return {'error': str(e)}

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∑–∞–¥–∞–Ω–Ω—ã–º SKU
    test_sku = "191813777"
    
    print("üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò WB RECOMMENDATIONS")
    print("=" * 60)
    
    # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    diagnosis = diagnose_wb_sku(test_sku)
    
    # –¢–µ—Å—Ç CrossMarketplaceLinker
    linking_test = test_cross_marketplace_linking(test_sku)
    
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("=" * 60)
    if diagnosis.get('enrichment_possible'):
        print("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ï–°–¢–¨")
    else:
        print("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –û–¢–°–£–¢–°–¢–í–£–ï–¢")
        print("\n–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for problem in diagnosis.get('recommendations_blocked_by', []):
            print(f"   ‚Ä¢ {problem}")
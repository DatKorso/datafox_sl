#!/usr/bin/env python3
"""
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Rich Content –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–û–±—Ö–æ–¥–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Streamlit –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python utils/export_rich_content.py --output rich_content.csv
    python utils/export_rich_content.py --limit 1000 --output sample.csv
    python utils/export_rich_content.py --where "oz_brand = 'Nike'" --output nike_products.csv
"""

import argparse
import csv
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ utils
sys.path.append(str(Path(__file__).parent.parent))

from utils.db_connection import connect_db
from utils.config_utils import get_db_path


def export_rich_content(output_file: str, limit: int = None, where_clause: str = None, 
                       include_empty_sku: bool = True, verbose: bool = False):
    """
    –≠–∫—Å–ø–æ—Ä—Ç Rich Content –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
    
    Args:
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É
        limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        where_clause: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ SQL —É—Å–ª–æ–≤–∏–µ WHERE
        include_empty_sku: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ oz_sku
        verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    """
    if verbose:
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = connect_db()
        if not conn:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –ë–î: {get_db_path()}")
            return False
        
        if verbose:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º SQL –∑–∞–ø—Ä–æ—Å
        query = """
        SELECT 
            ocp.oz_vendor_code,
            COALESCE(op.oz_sku, '') as oz_sku,
            ocp.rich_content_json
        FROM oz_category_products ocp
        LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
        WHERE ocp.rich_content_json IS NOT NULL 
        AND ocp.rich_content_json != ''
        AND LENGTH(ocp.rich_content_json) > 10
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if not include_empty_sku:
            query += " AND op.oz_sku IS NOT NULL AND op.oz_sku != ''"
        
        if where_clause:
            query += f" AND ({where_clause})"
        
        if limit:
            query += f" LIMIT {limit}"
        
        if verbose:
            print(f"üîç SQL –∑–∞–ø—Ä–æ—Å:")
            print(query)
            print()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        if verbose:
            print("‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞...")
        
        start_time = time.time()
        cursor = conn.execute(query)
        results = cursor.fetchall()
        query_time = time.time() - start_time
        
        if not results:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return False
        
        if verbose:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results):,} –∑–∞–ø–∏—Å–µ–π –∑–∞ {query_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV —Ñ–∞–π–ª
        if verbose:
            print(f"üìù –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {output_file}")
        
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow(['oz_vendor_code', 'oz_sku', 'rich_content'])
            
            # –î–∞–Ω–Ω—ã–µ
            for i, row in enumerate(results, 1):
                writer.writerow([row[0], row[1], row[2]])
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                if verbose and i % 1000 == 0:
                    print(f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ {i:,}/{len(results):,} —Å—Ç—Ä–æ–∫...")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        file_size = output_path.stat().st_size
        file_size_mb = file_size / (1024 * 1024)
        
        print(f"""
‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!**
üìÅ –§–∞–π–ª: {output_path.absolute()}
üìä –ó–∞–ø–∏—Å–µ–π: {len(results):,}
üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} –ú–ë
‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {query_time:.2f} —Å–µ–∫—É–Ω–¥
""")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        if verbose:
            import traceback
            traceback.print_exc()
        return False
    
    finally:
        if conn:
            conn.close()


def get_statistics(verbose: bool = False):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ Rich Content –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    if verbose:
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = connect_db()
        if not conn:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_query = """
        SELECT 
            COUNT(*) as total_products,
            COUNT(CASE WHEN rich_content_json IS NOT NULL AND rich_content_json != '' 
                  AND LENGTH(rich_content_json) > 10 THEN 1 END) as with_rich_content,
            COUNT(CASE WHEN rich_content_json IS NULL THEN 1 END) as null_content,
            COUNT(CASE WHEN rich_content_json = '' THEN 1 END) as empty_content,
            MAX(LENGTH(rich_content_json)) as max_json_size,
            AVG(LENGTH(rich_content_json)) as avg_json_size
        FROM oz_category_products
        """
        
        stats = conn.execute(stats_query).fetchone()
        
        if stats:
            print(f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Rich Content:**
- –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {stats[0]:,}
- –° –≤–∞–ª–∏–¥–Ω—ã–º Rich Content: {stats[1]:,}
- –° NULL Rich Content: {stats[2]:,}
- –° –ø—É—Å—Ç—ã–º Rich Content: {stats[3]:,}
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä JSON: {stats[4] or 0:,} —Å–∏–º–≤–æ–ª–æ–≤
- –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä JSON: {stats[5] or 0:.0f} —Å–∏–º–≤–æ–ª–æ–≤
""")
            
            if stats[1] > 0:
                estimated_size_mb = (stats[1] * (stats[5] or 0)) / (1024 * 1024)
                print(f"üìÅ **–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞:** {estimated_size_mb:.2f} –ú–ë")
        
        # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        detailed_query = """
        SELECT 
            CASE 
                WHEN rich_content_json IS NULL THEN 'NULL'
                WHEN rich_content_json = '' THEN 'Empty'
                WHEN LENGTH(rich_content_json) < 10 THEN 'Too Short'
                ELSE 'Valid'
            END as content_status,
            COUNT(*) as count,
            ROUND(AVG(LENGTH(rich_content_json)), 2) as avg_length
        FROM oz_category_products 
        GROUP BY content_status
        ORDER BY count DESC
        """
        
        print("\nüìã **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
        print(f"{'–°—Ç–∞—Ç—É—Å':<12} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<12} {'–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä'}")
        print("-" * 40)
        
        for row in conn.execute(detailed_query):
            count = f"{row[1]:,}"
            avg_len = f"{row[2] or 0:.0f}"
            print(f"{row[0]:<12} {count:<12} {avg_len}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False
    
    finally:
        if conn:
            conn.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="–≠–∫—Å–ø–æ—Ä—Ç Rich Content –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    
  –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å Rich Content:
    python utils/export_rich_content.py --output rich_content.csv
    
  –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 1000 –∑–∞–ø–∏—Å–µ–π:
    python utils/export_rich_content.py --limit 1000 --output sample.csv
    
  –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞:
    python utils/export_rich_content.py --where "oz_brand = 'Nike'" --output nike.csv
    
  –≠–∫—Å–ø–æ—Ä—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏:
    python utils/export_rich_content.py --where "LENGTH(rich_content_json) > 1000" --output large_content.csv
    
  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
    python utils/export_rich_content.py --stats
    
  –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥:
    python utils/export_rich_content.py --output export.csv --verbose
        """
    )
    
    parser.add_argument(
        '--output', '-o',
        help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É'
    )
    
    parser.add_argument(
        '--limit', '-l',
        type=int,
        help='–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π'
    )
    
    parser.add_argument(
        '--where', '-w',
        help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ SQL —É—Å–ª–æ–≤–∏–µ WHERE'
    )
    
    parser.add_argument(
        '--exclude-empty-sku',
        action='store_true',
        help='–ò—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –±–µ–∑ oz_sku'
    )
    
    parser.add_argument(
        '--stats', '-s',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    args = parser.parse_args()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if args.stats:
        return get_statistics(args.verbose)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    if not args.output:
        parser.error("–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å --output")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    success = export_rich_content(
        output_file=args.output,
        limit=args.limit,
        where_clause=args.where,
        include_empty_sku=not args.exclude_empty_sku,
        verbose=args.verbose
    )
    
    return success


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
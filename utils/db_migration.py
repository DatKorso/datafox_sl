"""
Database migration utilities for handling schema changes.
"""
import duckdb
import streamlit as st
from typing import List


def migrate_integer_to_bigint_tables(conn: duckdb.DuckDBPyConnection) -> bool:
    """
    Migrate tables that have INTEGER columns changed to BIGINT.
    This drops and recreates affected tables.
    
    Tables affected:
    - oz_orders (oz_sku: INTEGER ‚Üí BIGINT)  
    - oz_products (oz_product_id, oz_sku: INTEGER ‚Üí BIGINT)
    - oz_barcodes (oz_product_id: INTEGER ‚Üí BIGINT)
    
    Returns:
        bool: True if migration successful, False otherwise
    """
    affected_tables = ['oz_orders', 'oz_products', 'oz_barcodes']
    
    try:
        # Check which tables exist
        existing_tables = []
        for table_name in affected_tables:
            res = conn.execute(f"SELECT table_name FROM information_schema.tables WHERE table_name = '{table_name}';").fetchone()
            if res:
                existing_tables.append(table_name)
        
        if not existing_tables:
            st.info("–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            return True
        
        st.warning(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –ë–î. –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(existing_tables)}")
        st.info("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤ —ç—Ç–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –ü–µ—Ä–µ–∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏.")
        
        # Drop existing tables
        for table_name in existing_tables:
            st.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'...")
            conn.execute(f"DROP TABLE IF EXISTS {table_name};")
        
        st.success("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —Å –Ω–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.")
        st.info("üì• –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 'Import Reports'.")
        
        return True
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def check_migration_needed(conn: duckdb.DuckDBPyConnection) -> bool:
    """
    Check if migration from INTEGER to BIGINT is needed.
    
    Returns:
        bool: True if migration is needed, False otherwise
    """
    tables_to_check = {
        'oz_orders': ['oz_sku'],
        'oz_products': ['oz_product_id', 'oz_sku'], 
        'oz_barcodes': ['oz_product_id']
    }
    
    try:
        for table_name, columns in tables_to_check.items():
            # Check if table exists
            res = conn.execute(f"SELECT table_name FROM information_schema.tables WHERE table_name = '{table_name}';").fetchone()
            if not res:
                continue  # Table doesn't exist, no migration needed for this table
            
            # Check column types
            for column_name in columns:
                try:
                    column_info = conn.execute(f"""
                        SELECT data_type 
                        FROM information_schema.columns 
                        WHERE table_name = '{table_name}' AND column_name = '{column_name}';
                    """).fetchone()
                    
                    if column_info and column_info[0] == 'INTEGER':
                        return True  # Found INTEGER column that should be BIGINT
                        
                except Exception:
                    continue  # Column doesn't exist or other issue
        
        return False  # No migration needed
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def auto_migrate_if_needed(conn: duckdb.DuckDBPyConnection) -> bool:
    """
    Automatically check and perform migration if needed.
    
    Returns:
        bool: True if no migration was needed or migration was successful
    """
    if check_migration_needed(conn):
        st.warning("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ö–µ–º–µ –ë–î. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è.")
        
        with st.expander("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"):
            st.markdown("""
            **–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:**
            - `oz_orders.oz_sku`: INTEGER ‚Üí BIGINT
            - `oz_products.oz_product_id`: INTEGER ‚Üí BIGINT  
            - `oz_products.oz_sku`: INTEGER ‚Üí BIGINT
            - `oz_barcodes.oz_product_id`: INTEGER ‚Üí BIGINT
            
            **–ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**
            –ó–Ω–∞—á–µ–Ω–∏—è SKU –≤ –Ω–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö Ozon –ø—Ä–µ–≤—ã—à–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ INT32 (2,147,483,647).
            
            **–î–µ–π—Å—Ç–≤–∏–µ:**
            –¢–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —Å —Ç–∏–ø–æ–º BIGINT –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
            """)
        
        if st.button("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é", type="primary"):
            return migrate_integer_to_bigint_tables(conn)
        else:
            st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏.")
            return False
    
    return True  # No migration needed 
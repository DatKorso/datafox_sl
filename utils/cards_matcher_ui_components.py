"""
UI Components for Cards Matcher functionality.

This module provides reusable UI components to reduce code duplication
in the Cards Matcher page while maintaining full functionality.

Created as part of code organization improvements.
"""
import streamlit as st
import pandas as pd
import os
from typing import Optional, Tuple, Dict, Any, List
from utils.config_utils import get_report_path, set_report_path


def render_brand_filter_info(brands_filter: str) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å—Ç—Ä–µ –±—Ä–µ–Ω–¥–æ–≤.
    
    Args:
        brands_filter: –°—Ç—Ä–æ–∫–∞ —Å –±—Ä–µ–Ω–¥–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π
    """
    if brands_filter and brands_filter.strip():
        allowed_brands = [brand.strip() for brand in brands_filter.split(";") if brand.strip()]
        if allowed_brands:
            st.success(f"‚úÖ **–§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω**: –ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å–ª–µ–¥—É—é—â–∏—Ö –±—Ä–µ–Ω–¥–æ–≤:")
            st.info("üìã **–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã**: " + ", ".join(allowed_brands))
            
            with st.expander("üí° –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤"):
                st.markdown("""
                1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª **Settings** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
                2. –ù–∞–π–¥–∏—Ç–µ —Å–µ–∫—Ü–∏—é **Data Filters**
                3. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ–ª–µ **Ozon Category Products - Brands Filter**
                4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                
                **–§–æ—Ä–º–∞—Ç**: `–ë—Ä–µ–Ω–¥1;–ë—Ä–µ–Ω–¥2;–ë—Ä–µ–Ω–¥3` (—Ä–∞–∑–¥–µ–ª—è–π—Ç–µ —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π)
                """)
        else:
            st.info("üîç **–§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω** - –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        st.info("üîç **–§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω** - –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        
        with st.expander("‚öôÔ∏è –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤"):
            st.markdown("""
            –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±—Ä–µ–Ω–¥–∞–º:
            
            1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª **Settings** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
            2. –ù–∞–π–¥–∏—Ç–µ —Å–µ–∫—Ü–∏—é **Data Filters**
            3. –í –ø–æ–ª–µ **Ozon Category Products - Brands Filter** —É–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
            4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            
            **–ü—Ä–∏–º–µ—Ä**: `Shuzzi;Nike;Adidas` - –∑–∞–≥—Ä—É–∑—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —ç—Ç–∏—Ö –±—Ä–µ–Ω–¥–æ–≤
            """)


def render_file_selector_component(
    config_key: str,
    file_description: str,
    file_types: List[str] = ['xlsx'],
    key_prefix: str = "",
    help_text: str = ""
) -> Optional[str]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞.
    
    Args:
        config_key: –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        file_description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_types: –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
        key_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π Streamlit
        help_text: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏
        
    Returns:
        –ü—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
    """
    st.subheader("üìÅ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Get default path from settings
        default_path = get_report_path(config_key)
        
        # File selection method
        file_source = st.radio(
            "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª:",
            ["üìÇ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫", "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"],
            index=0 if default_path else 1,
            key=f"{key_prefix}_file_source"
        )
    
    with col2:
        st.info("üí° **–°–æ–≤–µ—Ç**: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–∞–∑–¥–µ–ª–µ Settings –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
    
    selected_file_path = None
    
    if file_source == "üìÇ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫":
        if default_path:
            if os.path.exists(default_path):
                selected_file_path = default_path
                st.success(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: `{os.path.basename(default_path)}`")
                st.caption(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {default_path}")
            else:
                st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {default_path}")
                st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")
        else:
            st.warning("‚ö†Ô∏è –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            
            # Allow setting path directly
            st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É")
            new_path = st.text_input(
                f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É {file_description}:",
                placeholder=f"/path/to/{file_description.lower().replace(' ', '_')}.{file_types[0]}",
                help=f"–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É .{file_types[0]} {help_text}",
                key=f"{key_prefix}_new_path"
            )
            
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Ç—å", key=f"{key_prefix}_save_path"):
                if new_path and new_path.strip():
                    try:
                        set_report_path(config_key, new_path.strip())
                        st.success("‚úÖ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏: {e}")
                else:
                    st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
    
    else:  # Upload file
        uploaded_file = st.file_uploader(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª {file_description}:",
            type=file_types,
            help=help_text,
            key=f"{key_prefix}_file_uploader"
        )
        
        if uploaded_file is not None:
            # Save uploaded file temporarily
            temp_path = f"temp_{key_prefix}_{uploaded_file.name}"
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            selected_file_path = temp_path
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: `{uploaded_file.name}`")
    
    return selected_file_path


def render_statistics_metrics(stats: Dict[str, Any], title: str = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    
    Args:
        stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    if not stats:
        st.info("üì≠ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    st.subheader(title)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ 4 –∫–æ–ª–æ–Ω–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if 'total_products' in stats:
            st.metric("üìä –ó–∞–ø–∏—Å–µ–π", stats['total_products'])
        elif 'total_records' in stats:
            st.metric("üìä –ó–∞–ø–∏—Å–µ–π", stats['total_records'])
    
    with col2:
        if 'unique_skus' in stats:
            st.metric("üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SKU", stats['unique_skus'])
        elif 'unique_vendor_codes' in stats:
            st.metric("üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤", stats['unique_vendor_codes'])
    
    with col3:
        if 'avg_rating' in stats:
            avg_rating = stats['avg_rating']
            st.metric("‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"{avg_rating:.2f}" if avg_rating else "N/A")
        elif 'total_groups' in stats:
            st.metric("üîó –í—Å–µ–≥–æ –≥—Ä—É–ø–ø", stats['total_groups'])
    
    with col4:
        if 'total_reviews' in stats:
            st.metric("üí¨ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", stats['total_reviews'] if stats['total_reviews'] else 0)
        elif 'groups_with_2_plus' in stats:
            st.metric("üë• –ì—Ä—É–ø–ø —Å 2+ —Ç–æ–≤–∞—Ä–∞–º–∏", stats['groups_with_2_plus'])


def render_import_process_info() -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–º–ø–æ—Ä—Ç–∞.
    """
    with st.expander("‚ÑπÔ∏è –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ"):
        st.markdown("""
        **–≠—Ç–∞–ø—ã –∏–º–ø–æ—Ä—Ç–∞:**
        1. üìñ **–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel** —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (–∑–∞–ø—è—Ç–∞—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
        2. ‚úÖ **–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        3. üéØ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤** (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Settings)
        4. üóëÔ∏è **–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã** - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        5. üíæ **–ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö** –≤ —Ç–∞–±–ª–∏—Ü—É oz_card_rating
        6. ‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞** —Å –ø–æ–∫–∞–∑–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**
        - `RezonitemID` ‚Üí BIGINT (SKU —Ç–æ–≤–∞—Ä–∞)
        - `–ê—Ä—Ç–∏–∫—É–ª` ‚Üí VARCHAR (–∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)  
        - `–†–µ–π—Ç–∏–Ω–≥ (1)` ‚Üí DECIMAL(3,2) (—Ä–µ–π—Ç–∏–Ω–≥ 0.00-5.00)
        - `–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤` ‚Üí INTEGER (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤)
        """)


def render_file_requirements_info() -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏.
    """
    st.markdown("""
    ### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É
    - –§–æ—Ä–º–∞—Ç: `.xlsx`
    - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    - –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –¥–∞–ª–µ–µ: –¥–∞–Ω–Ω—ã–µ
    
    ### –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
    | –ö–æ–ª–æ–Ω–∫–∞ –≤ —Ñ–∞–π–ª–µ | –ü–æ–ª–µ –≤ –ë–î | –û–ø–∏—Å–∞–Ω–∏–µ |
    |---|---|---|
    | `RezonitemID` | `oz_sku` | SKU —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Ozon |
    | `–ê—Ä—Ç–∏–∫—É–ª` | `oz_vendor_code` | –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ |
    | `–†–µ–π—Ç–∏–Ω–≥ (1)` | `rating` | –†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ (1-5) |
    | `–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤` | `rev_number` | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ |
    """)


def render_quick_data_preview(df: pd.DataFrame, title: str = "üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö") -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        df: DataFrame –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
    """
    if df.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        return
    
    with st.expander(f"{title} (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫)"):
        st.dataframe(df.head(10), use_container_width=True, hide_index=True)


def render_export_controls(df: pd.DataFrame, filename_prefix: str, 
                          description: str = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã") -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        df: DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        filename_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    if df.empty:
        st.info(f"üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ {description}")
        return
    
    if st.button(f"üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {description} –≤ Excel", 
                key=f"export_{filename_prefix}"):
        try:
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{filename_prefix}_{timestamp}.xlsx"
            
            df.to_excel(filename, index=False)
            
            with open(filename, "rb") as file:
                st.download_button(
                    label="üì© –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª Excel",
                    data=file.read(),
                    file_name=filename,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    key=f"download_{filename_prefix}"
                )
                
            # Cleanup temp file
            try:
                os.remove(filename)
            except:
                pass
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")


def render_error_message(error: Exception, context: str = "") -> None:
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫.
    
    Args:
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    """
    error_msg = f"‚ùå –û—à–∏–±–∫–∞"
    if context:
        error_msg += f" {context}"
    error_msg += f": {str(error)}"
    
    st.error(error_msg)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ expander
    with st.expander("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏"):
        st.code(str(error))
        if context:
            st.info(f"**–ö–æ–Ω—Ç–µ–∫—Å—Ç**: {context}")


def render_success_message(message: str, details: Optional[Dict[str, Any]] = None) -> None:
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    
    Args:
        message: –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    st.success(f"‚úÖ {message}")
    
    if details:
        cols = st.columns(len(details))
        for i, (key, value) in enumerate(details.items()):
            with cols[i]:
                st.metric(key, value) 
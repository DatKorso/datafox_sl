"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Rich Content Ozon.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Streamlit –¥–ª—è:
- –í—ã–±–æ—Ä–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –ü—Ä–µ–≤—å—é Rich Content JSON
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import streamlit as st
import pandas as pd
import json
from typing import List, Dict, Any, Optional, Tuple
import plotly.express as px
import plotly.graph_objects as go
from utils.rich_content_oz import (
    ScoringConfig, RichContentProcessor, ProcessingResult, 
    BatchResult, ProcessingStatus
)


def render_scoring_config_ui() -> ScoringConfig:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç UI –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ScoringConfig
    """
    st.subheader("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    
    # –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞
    preset_options = {
        "balanced": "üéØ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
        "size_focused": "üìè –§–æ–∫—É—Å –Ω–∞ —Ä–∞–∑–º–µ—Ä–µ", 
        "seasonal": "üå¶Ô∏è –°–µ–∑–æ–Ω–Ω—ã–π",
        "material_focused": "üßµ –§–æ–∫—É—Å –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–µ",
        "conservative": "üõ°Ô∏è –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π"
    }
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        preset_key = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç",
            options=list(preset_options.keys()),
            format_func=lambda x: preset_options[x],
            help="–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"
        )
        
        config = ScoringConfig.get_preset(preset_key)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
        preset_descriptions = {
            "balanced": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–∞–≤–Ω—ã–º –≤–µ—Å–æ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
            "size_focused": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞",
            "seasonal": "–£—Å–∏–ª–µ–Ω–Ω—ã–π —Ñ–æ–∫—É—Å –Ω–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤",
            "material_focused": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –∫–æ–ª–æ–¥–∫–∞–º",
            "conservative": "–°—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞, –º–µ–Ω—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
        }
        st.info(preset_descriptions[preset_key])
    
    with col2:
        st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
        st.metric("–ë–∞–∑–æ–≤—ã–π score", config.base_score)
        st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π score", config.max_score)
        st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥", f"{config.min_score_threshold:.1f}")
        st.metric("–ú–∏–Ω. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", config.min_recommendations)
        st.metric("–ú–∞–∫—Å. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", config.max_recommendations)
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.write("**üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.write("**–†–∞–∑–º–µ—Ä—ã:**")
        config.exact_size_weight = st.number_input(
            "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", 
            min_value=0, max_value=200, 
            value=config.exact_size_weight
        )
        config.close_size_weight = st.number_input(
            "–ë–ª–∏–∑–∫–∏–π —Ä–∞–∑–º–µ—Ä (¬±1)", 
            min_value=0, max_value=100, 
            value=config.close_size_weight
        )
        config.size_mismatch_penalty = st.number_input(
            "–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", 
            min_value=-100, max_value=0, 
            value=config.size_mismatch_penalty
        )
    
    with col2:
        st.write("**–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:**")
        config.season_match_bonus = st.number_input(
            "–ë–æ–Ω—É—Å –∑–∞ —Å–µ–∑–æ–Ω", 
            min_value=0, max_value=150, 
            value=config.season_match_bonus
        )
        config.season_mismatch_penalty = st.number_input(
            "–®—Ç—Ä–∞—Ñ –∑–∞ —Å–µ–∑–æ–Ω", 
            min_value=-100, max_value=0, 
            value=config.season_mismatch_penalty
        )
    
    with col3:
        st.write("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**")
        config.color_match_bonus = st.number_input(
            "–ë–æ–Ω—É—Å –∑–∞ —Ü–≤–µ—Ç", 
            min_value=0, max_value=100, 
            value=config.color_match_bonus
        )
        config.material_match_bonus = st.number_input(
            "–ë–æ–Ω—É—Å –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª", 
            min_value=0, max_value=100, 
            value=config.material_match_bonus
        )
        config.fastener_match_bonus = st.number_input(
            "–ë–æ–Ω—É—Å –∑–∞ –∑–∞—Å—Ç—ë–∂–∫—É", 
            min_value=0, max_value=100, 
            value=config.fastener_match_bonus
        )
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**–ö–æ–ª–æ–¥–∫–∏:**")
        config.mega_last_bonus = st.number_input(
            "Mega last", min_value=0, max_value=150, 
            value=config.mega_last_bonus
        )
        config.best_last_bonus = st.number_input(
            "Best last", min_value=0, max_value=120, 
            value=config.best_last_bonus
        )
        config.new_last_bonus = st.number_input(
            "New last", min_value=0, max_value=100, 
            value=config.new_last_bonus
        )
    
    with col2:
        st.write("**–õ–∏–º–∏—Ç—ã:**")
        config.min_recommendations = st.number_input(
            "–ú–∏–Ω. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", 
            min_value=1, max_value=20, 
            value=config.min_recommendations,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Rich Content"
        )
        config.max_recommendations = st.number_input(
            "–ú–∞–∫—Å. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", 
            min_value=config.min_recommendations, max_value=20, 
            value=config.max_recommendations
        )
        config.min_score_threshold = st.number_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score", 
            min_value=0.0, max_value=200.0, 
            value=config.min_score_threshold, 
            step=10.0
        )
    
    return config


def render_product_selector(db_conn) -> Tuple[str, List[str]]:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç UI –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Args:
        db_conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        Tuple[selection_mode, selected_products] - —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    """
    st.subheader("üì¶ –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
    try:
        stats_query = """
        SELECT 
            COUNT(*) as total_products,
            COUNT(CASE WHEN rich_content_json IS NOT NULL AND rich_content_json != '' 
                  THEN 1 END) as with_rich_content,
            COUNT(CASE WHEN oz_fbo_stock > 0 THEN 1 END) as in_stock
        FROM oz_category_products ocp
        LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
        """
        stats = db_conn.execute(stats_query).fetchone()
        
        if stats:
            total, with_rich, in_stock = stats
            coverage = (with_rich / total * 100) if total > 0 else 0
            
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤", total)
            col2.metric("–° Rich Content", with_rich)
            col3.metric("–í –Ω–∞–ª–∏—á–∏–∏", in_stock)
            col4.metric("–ü–æ–∫—Ä—ã—Ç–∏–µ", f"{coverage:.1f}%")
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î: {e}")
    
    # –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞
    selection_mode = st.radio(
        "–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤:",
        ["single", "list", "filter", "all"],
        format_func=lambda x: {
            "single": "üéØ –û–¥–∏–Ω —Ç–æ–≤–∞—Ä",
            "list": "üìù –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤", 
            "filter": "üîç –ü–æ —Ñ–∏–ª—å—Ç—Ä–∞–º",
            "all": "üåê –í—Å–µ —Ç–æ–≤–∞—Ä—ã"
        }[x],
        horizontal=True
    )
    
    selected_products = []
    
    if selection_mode == "single":
        vendor_code = st.text_input(
            "–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞",
            placeholder="–í–≤–µ–¥–∏—Ç–µ oz_vendor_code",
            help="–ù–∞–ø—Ä–∏–º–µ—Ä: ABC-123-XL"
        )
        if vendor_code.strip():
            selected_products = [vendor_code.strip()]
    
    elif selection_mode == "list":
        vendor_codes_text = st.text_area(
            "–°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
            height=100,
            help="–û–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ —Å—Ç—Ä–æ–∫—É"
        )
        if vendor_codes_text.strip():
            selected_products = [
                code.strip() for code in vendor_codes_text.strip().split('\n') 
                if code.strip()
            ]
    
    elif selection_mode == "filter":
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥–∞–º
            brands_query = "SELECT DISTINCT oz_brand FROM oz_category_products WHERE oz_brand IS NOT NULL ORDER BY oz_brand"
            try:
                brands_df = pd.read_sql(brands_query, db_conn)
                selected_brands = st.multiselect(
                    "–ë—Ä–µ–Ω–¥—ã",
                    options=brands_df['oz_brand'].tolist(),
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
                )
            except:
                selected_brands = []
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤")
        
        with col2:
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º
            types_query = "SELECT DISTINCT type FROM oz_category_products WHERE type IS NOT NULL ORDER BY type"
            try:
                types_df = pd.read_sql(types_query, db_conn)
                selected_types = st.multiselect(
                    "–¢–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤",
                    options=types_df['type'].tolist(),
                    help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤"
                )
            except:
                selected_types = []
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤")
        
        with col3:
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É
            genders = ["–ñ–µ–Ω—Å–∫–∏–π", "–ú—É–∂—Å–∫–æ–π", "–£–Ω–∏—Å–µ–∫—Å"]
            selected_genders = st.multiselect(
                "–ü–æ–ª",
                options=genders,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª"
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        col1, col2 = st.columns(2)
        
        with col1:
            only_in_stock = st.checkbox(
                "–¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏",
                value=True,
                help="–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å oz_fbo_stock > 0"
            )
            
            without_rich_content = st.checkbox(
                "–¢–æ–ª—å–∫–æ –±–µ–∑ Rich Content",
                value=True,
                help="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
            )
        
        with col2:
            limit = st.number_input(
                "–õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                min_value=1,
                max_value=1000,
                value=50,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        if st.button("üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"):
            conditions = ["1=1"]
            params = []
            
            if selected_brands:
                conditions.append(f"ocp.oz_brand IN ({','.join(['?' for _ in selected_brands])})")
                params.extend(selected_brands)
            
            if selected_types:
                conditions.append(f"ocp.type IN ({','.join(['?' for _ in selected_types])})")
                params.extend(selected_types)
            
            if selected_genders:
                conditions.append(f"ocp.gender IN ({','.join(['?' for _ in selected_genders])})")
                params.extend(selected_genders)
            
            if only_in_stock:
                conditions.append("(op.oz_fbo_stock > 0 OR op.oz_fbo_stock IS NULL)")
            
            if without_rich_content:
                conditions.append("(ocp.rich_content_json IS NULL OR ocp.rich_content_json = '')")
            
            query = f"""
            SELECT DISTINCT ocp.oz_vendor_code
            FROM oz_category_products ocp
            LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
            WHERE {' AND '.join(conditions)}
            ORDER BY ocp.oz_vendor_code
            LIMIT ?
            """
            params.append(limit)
            
            try:
                result_df = pd.read_sql(query, db_conn, params=params)
                selected_products = result_df['oz_vendor_code'].tolist()
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(selected_products)} —Ç–æ–≤–∞—Ä–æ–≤")
                
                if selected_products:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                    with st.expander("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"):
                        preview_df = pd.DataFrame({'oz_vendor_code': selected_products[:10]})
                        st.dataframe(preview_df, use_container_width=True)
                        if len(selected_products) > 10:
                            st.info(f"... –∏ –µ—â–µ {len(selected_products) - 10} —Ç–æ–≤–∞—Ä–æ–≤")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    elif selection_mode == "all":
        limit = st.number_input(
            "–õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)",
            min_value=1,
            max_value=5000,
            value=100,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )
        
        if st.button("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)"):
            try:
                query = """
                SELECT oz_vendor_code 
                FROM oz_category_products 
                WHERE oz_vendor_code IS NOT NULL 
                ORDER BY oz_vendor_code 
                LIMIT ?
                """
                result_df = pd.read_sql(query, db_conn, params=[limit])
                selected_products = result_df['oz_vendor_code'].tolist()
                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(selected_products)} —Ç–æ–≤–∞—Ä–æ–≤")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if selected_products:
        st.info(f"üìä –í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: **{len(selected_products)}**")
    
    return selection_mode, selected_products


def render_rich_content_preview(rich_content_json: str) -> None:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –ø—Ä–µ–≤—å—é Rich Content JSON
    
    Args:
        rich_content_json: JSON —Å—Ç—Ä–æ–∫–∞ Rich Content
    """
    st.subheader("üëÅÔ∏è –ü—Ä–µ–≤—å—é Rich Content")
    
    try:
        data = json.loads(rich_content_json)
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        tab1, tab2, tab3 = st.tabs(["üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–≤—å—é", "üìã JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "üîç –î–µ—Ç–∞–ª–∏"])
        
        with tab1:
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if 'content' in data:
                for i, widget in enumerate(data['content']):
                    widget_name = widget.get('widgetName', 'Unknown')
                    
                    if widget_name == 'raText':
                        st.markdown(f"**{widget['text']['content']}**")
                        
                    elif widget_name == 'raShowcase':
                        st.write("**–ö–∞—Ä—É—Å–µ–ª—å —Ç–æ–≤–∞—Ä–æ–≤:**")
                        if 'blocks' in widget:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –Ω–æ –≤ —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ 4 –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                            total_blocks = len(widget['blocks'])
                            for row_start in range(0, total_blocks, 4):
                                row_blocks = widget['blocks'][row_start:row_start + 4]
                                cols = st.columns(len(row_blocks))
                                for j, block in enumerate(row_blocks):
                                    with cols[j]:
                                        if 'img' in block:
                                            st.image(
                                                block['img'].get('src', ''), 
                                                caption=block.get('title', {}).get('content', '–¢–æ–≤–∞—Ä'),
                                                width=150
                                            )
                                        if 'subtitle' in block:
                                            st.caption(block['subtitle']['content'])
                    
                    elif widget_name == 'raColumns':
                        st.write("**–°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:**")
                        if 'columns' in widget:
                            cols = st.columns(len(widget['columns']))
                            for j, column in enumerate(widget['columns']):
                                with cols[j]:
                                    if 'img' in column:
                                        st.image(
                                            column['img'].get('src', ''),
                                            width=100
                                        )
                                    if 'content' in column:
                                        st.caption(column['content'].get('title', ''))
            else:
                st.warning("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON")
        
        with tab2:
            # JSON —Å–æ –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            st.json(data)
        
        with tab3:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            version = data.get('version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            content_count = len(data.get('content', []))
            
            col1, col2 = st.columns(2)
            col1.metric("–í–µ—Ä—Å–∏—è Rich Content", version)
            col2.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∂–µ—Ç–æ–≤", content_count)
            
            # –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤
            if 'content' in data:
                widget_types = [w.get('widgetName', 'Unknown') for w in data['content']]
                widget_counts = pd.Series(widget_types).value_counts()
                
                st.write("**–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤–∏–¥–∂–µ—Ç—ã:**")
                for widget_type, count in widget_counts.items():
                    st.write(f"- {widget_type}: {count}")
    
    except json.JSONDecodeError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        st.code(rich_content_json)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {e}")


def render_processing_results(processing_result: ProcessingResult, use_expanders: bool = True) -> None:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    
    Args:
        processing_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
        use_expanders: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ expander'—ã (False –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
    """
    vendor_code = processing_result.oz_vendor_code
    status = processing_result.status
    
    # –°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–º
    status_colors = {
        ProcessingStatus.SUCCESS: "üü¢",
        ProcessingStatus.NO_SIMILAR: "üü°", 
        ProcessingStatus.ERROR: "üî¥",
        ProcessingStatus.NO_DATA: "‚ö™"
    }
    
    status_color = status_colors.get(status, "‚ö´")
    st.write(f"**{status_color} {vendor_code}** - {status.value}")
    
    # –î–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    col1, col2, col3 = st.columns(3)
    col1.metric("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", len(processing_result.recommendations))
    col2.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{processing_result.processing_time*1000:.1f}ms")
    
    if status == ProcessingStatus.SUCCESS:
        col3.metric("–°—Ç–∞—Ç—É—Å", "‚úÖ –£—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if processing_result.recommendations:
            if use_expanders:
                with st.expander(f"üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(processing_result.recommendations)})"):
                    for i, rec in enumerate(processing_result.recommendations):
                        st.write(f"**{i+1}.** {rec.product_info.oz_vendor_code} "
                                f"(Score: {rec.score:.1f}) - {rec.match_details}")
            else:
                st.write(f"**üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(processing_result.recommendations)}):**")
                for i, rec in enumerate(processing_result.recommendations):
                    st.write(f"**{i+1}.** {rec.product_info.oz_vendor_code} "
                            f"(Score: {rec.score:.1f}) - {rec.match_details}")
        
        # –ü—Ä–µ–≤—å—é Rich Content
        if processing_result.rich_content_json:
            if use_expanders:
                with st.expander("üëÅÔ∏è Rich Content"):
                    render_rich_content_preview(processing_result.rich_content_json)
            else:
                st.write("**üëÅÔ∏è Rich Content:**")
                render_rich_content_preview(processing_result.rich_content_json)
    
    elif status == ProcessingStatus.ERROR:
        col3.metric("–°—Ç–∞—Ç—É—Å", "‚ùå –û—à–∏–±–∫–∞")
        if processing_result.error_message:
            st.error(f"–û—à–∏–±–∫–∞: {processing_result.error_message}")
    
    elif status == ProcessingStatus.NO_SIMILAR:
        col3.metric("–°—Ç–∞—Ç—É—Å", "‚ö†Ô∏è –ù–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö")
        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    else:
        col3.metric("–°—Ç–∞—Ç—É—Å", "‚ùì –î—Ä—É–≥–æ–µ")


def render_batch_results(batch_result: BatchResult) -> None:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Args:
        batch_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = batch_result.stats
    
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", batch_result.total_items)
    col2.metric("–£—Å–ø–µ—à–Ω–æ", stats['successful'])
    col3.metric("–ë–µ–∑ –ø–æ—Ö–æ–∂–∏—Ö", stats['no_similar'])
    col4.metric("–û—à–∏–±–æ–∫", stats['errors'])
    
    # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    success_rate = stats['success_rate']
    st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞", f"{success_rate}%")
    
    # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    if batch_result.processed_items:
        status_counts = {}
        for item in batch_result.processed_items:
            status = item.status.value
            status_counts[status] = status_counts.get(status, 0) + 1
        
        # Pie chart —Å—Ç–∞—Ç—É—Å–æ–≤
        fig = px.pie(
            values=list(status_counts.values()),
            names=list(status_counts.keys()),
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            color_discrete_map={
                'success': '#28a745',
                'no_similar': '#ffc107', 
                'error': '#dc3545',
                'no_data': '#6c757d'
            }
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with st.expander("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            tab1, tab2, tab3 = st.tabs(["‚úÖ –£—Å–ø–µ—à–Ω—ã–µ", "‚ö†Ô∏è –ë–µ–∑ –ø–æ—Ö–æ–∂–∏—Ö", "‚ùå –û—à–∏–±–∫–∏"])
            
            with tab1:
                successful_items = [item for item in batch_result.processed_items 
                                  if item.status == ProcessingStatus.SUCCESS]
                if successful_items:
                    for item in successful_items:
                        render_processing_results(item, use_expanders=False)
                        st.divider()
                else:
                    st.info("–ù–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            
            with tab2:
                no_similar_items = [item for item in batch_result.processed_items 
                                   if item.status == ProcessingStatus.NO_SIMILAR]
                if no_similar_items:
                    for item in no_similar_items:
                        st.write(f"üü° {item.oz_vendor_code}")
                else:
                    st.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø–æ—Ö–æ–∂–∏—Ö")
            
            with tab3:
                error_items = [item for item in batch_result.processed_items 
                              if item.status == ProcessingStatus.ERROR]
                if error_items:
                    for item in error_items:
                        st.write(f"üî¥ {item.oz_vendor_code}: {item.error_message}")
                else:
                    st.info("–ù–µ—Ç –æ—à–∏–±–æ–∫")


def render_processing_statistics(processor: RichContentProcessor) -> None:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        processor: –≠–∫–∑–µ–º–ø–ª—è—Ä RichContentProcessor
    """
    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        stats = processor.get_processing_statistics()
        
        if 'error' in stats:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        col1.metric("–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤", stats['total_products'])
        col2.metric("–° Rich Content", stats['products_with_rich_content'])
        col3.metric("–ë–µ–∑ Rich Content", stats['products_without_rich_content'])
        col4.metric("–ü–æ–∫—Ä—ã—Ç–∏–µ", f"{stats['coverage_percent']:.1f}%")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –ø–æ–∫—Ä—ã—Ç–∏—è
        coverage = stats['coverage_percent']
        st.progress(coverage / 100, text=f"–ü–æ–∫—Ä—ã—Ç–∏–µ Rich Content: {coverage:.1f}%")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        if stats['total_products'] > 0:
            fig = go.Figure(data=[
                go.Bar(
                    x=['–° Rich Content', '–ë–µ–∑ Rich Content'],
                    y=[stats['products_with_rich_content'], stats['products_without_rich_content']],
                    marker_color=['#28a745', '#dc3545']
                )
            ])
            fig.update_layout(
                title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Rich Content –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤"
            )
            st.plotly_chart(fig, use_container_width=True)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}") 
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã CrossMarketplaceLinker —Å —Ç–æ–≤–∞—Ä–æ–º 0562002434-—á–µ—Ä–Ω—ã–π-34.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç –ª–∏ –ª–∏–Ω–∫–µ—Ä wb_sku –∏ –ø–æ–ª—É—á–∞–µ—Ç –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–æ–¥–∫–∞—Ö –∏–∑ punta_table.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import duckdb
from utils.cross_marketplace_linker import CrossMarketplaceLinker
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_crossmarketplace_linking():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ CrossMarketplaceLinker –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è wb_sku –∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–æ–¥–∫–∞—Ö"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "data/marketplace_data.db"
    if not os.path.exists(db_path):
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    conn = duckdb.connect(db_path)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Ç–æ–≤–∞—Ä
    test_vendor_code = "0562002434-—á–µ—Ä–Ω—ã–π-34"
    expected_mega_last = "G0562000198"
    
    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º CrossMarketplaceLinker –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {test_vendor_code}")
    logger.info(f"üéØ –û–∂–∏–¥–∞–µ–º–∞—è MEGA –∫–æ–ª–æ–¥–∫–∞: {expected_mega_last}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º CrossMarketplaceLinker
        linker = CrossMarketplaceLinker(conn)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        logger.info("\n=== 1. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–û–í–´–• –î–ê–ù–ù–´–• –¢–û–í–ê–†–ê ===")
        
        base_query = """
        SELECT 
            ocp.oz_vendor_code,
            ocp.type,
            ocp.gender,
            ocp.oz_brand,
            ocp.russian_size,
            ocp.barcode
        FROM oz_category_products ocp
        WHERE ocp.oz_vendor_code = ?
        """
        
        base_result = conn.execute(base_query, [test_vendor_code]).fetchone()
        
        if not base_result:
            logger.error(f"‚ùå –¢–æ–≤–∞—Ä {test_vendor_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ oz_category_products")
            return
        
        logger.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:")
        logger.info(f"   - –ê—Ä—Ç–∏–∫—É–ª: {base_result[0]}")
        logger.info(f"   - –¢–∏–ø: {base_result[1]}")
        logger.info(f"   - –ü–æ–ª: {base_result[2]}")
        logger.info(f"   - –ë—Ä–µ–Ω–¥: {base_result[3]}")
        logger.info(f"   - –†–∞–∑–º–µ—Ä: {base_result[4]}")
        logger.info(f"   - –®—Ç—Ä–∏—Ö–∫–æ–¥: {base_result[5]}")
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö WB —Ç–æ–≤–∞—Ä–æ–≤
        logger.info("\n=== 2. –ü–û–ò–°–ö –°–í–Ø–ó–ê–ù–ù–´–• WB –¢–û–í–ê–†–û–í ===")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ _normalize_and_merge_barcodes
        linked_df = linker._normalize_and_merge_barcodes(
            oz_vendor_codes=[test_vendor_code]
        )
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(linked_df)}")
        
        if not linked_df.empty:
            for i, (_, row) in enumerate(linked_df.iterrows(), 1):
                wb_sku = row.get('wb_sku')
                logger.info(f"   {i}. WB SKU: {wb_sku}")
                logger.info(f"      OZ Vendor Code: {row.get('oz_vendor_code')}")
                logger.info(f"      OZ SKU: {row.get('oz_sku')}")
                logger.info(f"      Barcode: {row.get('barcode')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ punta_table –¥–ª—è —ç—Ç–æ–≥–æ wb_sku
                if wb_sku:
                    punta_query = """
                    SELECT wb_sku, mega_last, best_last, new_last, model_name
                    FROM punta_table 
                    WHERE wb_sku = ?
                    """
                    
                    punta_result = conn.execute(punta_query, [wb_sku]).fetchone()
                    
                    if punta_result:
                        logger.info(f"      ‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ punta_table:")
                        logger.info(f"         - MEGA –∫–æ–ª–æ–¥–∫–∞: {punta_result[1]}")
                        logger.info(f"         - BEST –∫–æ–ª–æ–¥–∫–∞: {punta_result[2]}")
                        logger.info(f"         - NEW –∫–æ–ª–æ–¥–∫–∞: {punta_result[3]}")
                        logger.info(f"         - –ú–æ–¥–µ–ª—å: {punta_result[4]}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π –∫–æ–ª–æ–¥–∫–µ
                        if punta_result[1] == expected_mega_last:
                            logger.info(f"         üéØ MEGA –∫–æ–ª–æ–¥–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π!")
                        elif punta_result[1]:
                            logger.warning(f"         ‚ö†Ô∏è  MEGA –∫–æ–ª–æ–¥–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {punta_result[1]} != {expected_mega_last}")
                        else:
                            logger.warning(f"         ‚ö†Ô∏è  MEGA –∫–æ–ª–æ–¥–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        logger.warning(f"      ‚ùå –î–∞–Ω–Ω—ã–µ –≤ punta_table –¥–ª—è wb_sku {wb_sku} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            logger.warning("‚ùå –°–≤—è–∑–∞–Ω–Ω—ã–µ WB —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
        logger.info("\n=== 3. –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–´–í–ê–ù–ò–Ø –ß–ï–†–ï–ó –®–¢–†–ò–•–ö–û–î–´ ===")
        
        if base_result[5]:  # barcode
            barcode = base_result[5]
            logger.info(f"üîç –ò—â–µ–º WB —Ç–æ–≤–∞—Ä—ã —Å —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º: {barcode}")
            
            wb_barcode_query = """
            SELECT wb_sku, wb_brand, wb_category
            FROM wb_products 
            WHERE wb_barcodes LIKE ?
            """
            
            wb_results = conn.execute(wb_barcode_query, [f"%{barcode}%"]).fetchall()
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ WB —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–∞–∫–∏–º —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º: {len(wb_results)}")
            
            for i, wb_result in enumerate(wb_results, 1):
                wb_sku = wb_result[0]
                logger.info(f"   {i}. WB SKU: {wb_sku} | –ë—Ä–µ–Ω–¥: {wb_result[1]} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {wb_result[2]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º punta_table –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ wb_sku
                punta_check = conn.execute(
                    "SELECT mega_last, best_last, new_last FROM punta_table WHERE wb_sku = ?", 
                    [wb_sku]
                ).fetchone()
                
                if punta_check:
                    logger.info(f"      –ö–æ–ª–æ–¥–∫–∏: MEGA={punta_check[0]}, BEST={punta_check[1]}, NEW={punta_check[2]}")
                else:
                    logger.info(f"      –ö–æ–ª–æ–¥–∫–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ punta_table")
        else:
            logger.warning("‚ö†Ô∏è  –®—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ punta_table
        logger.info("\n=== 4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê PUNTA_TABLE ===")
        
        total_punta = conn.execute("SELECT COUNT(*) FROM punta_table").fetchone()[0]
        with_mega_last = conn.execute("SELECT COUNT(*) FROM punta_table WHERE mega_last IS NOT NULL AND mega_last != ''").fetchone()[0]
        with_expected_last = conn.execute("SELECT COUNT(*) FROM punta_table WHERE mega_last = ?", [expected_mega_last]).fetchone()[0]
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ punta_table:")
        logger.info(f"   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_punta}")
        logger.info(f"   - –° MEGA –∫–æ–ª–æ–¥–∫–æ–π: {with_mega_last}")
        logger.info(f"   - –° –∫–æ–ª–æ–¥–∫–æ–π {expected_mega_last}: {with_expected_last}")
        
        if with_expected_last > 0:
            logger.info(f"‚úÖ –í –±–∞–∑–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –æ–∂–∏–¥–∞–µ–º–æ–π –∫–æ–ª–æ–¥–∫–æ–π {expected_mega_last}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–∞–∫–æ–π –∫–æ–ª–æ–¥–∫–æ–π
            examples_query = """
            SELECT wb_sku, model_name, best_last, new_last
            FROM punta_table 
            WHERE mega_last = ?
            LIMIT 5
            """
            
            examples = conn.execute(examples_query, [expected_mega_last]).fetchall()
            logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–æ–ª–æ–¥–∫–æ–π {expected_mega_last}:")
            for example in examples:
                logger.info(f"      WB SKU: {example[0]} | –ú–æ–¥–µ–ª—å: {example[1]}")
        else:
            logger.warning(f"‚ùå –í –±–∞–∑–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–æ–ª–æ–¥–∫–æ–π {expected_mega_last}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        conn.close()
    
    logger.info("\nüèÅ –¢–µ—Å—Ç CrossMarketplaceLinker –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    test_crossmarketplace_linking()

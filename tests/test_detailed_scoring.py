#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç scoring –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–ª–æ–¥–∫–∞–º–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—á–µ–º—É —Ç–æ–≤–∞—Ä—ã —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –∫–æ–ª–æ–¥–∫–∞–º–∏ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ç–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import duckdb
from utils.rich_content_oz import RichContentProcessor
from utils.scoring_config_optimized import ScoringConfig
from utils.cross_marketplace_linker import CrossMarketplaceLinker
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_detailed_scoring():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ scoring –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å –∫–æ–ª–æ–¥–∫–æ–π"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "data/marketplace_data.db"
    if not os.path.exists(db_path):
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    conn = duckdb.connect(db_path)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Ç–æ–≤–∞—Ä
    test_vendor_code = "0562002434-—á–µ—Ä–Ω—ã–π-34"
    expected_mega_last = "G0562000198"
    
    logger.info(f"üß™ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ scoring –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {test_vendor_code}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        config = ScoringConfig()
        linker = CrossMarketplaceLinker(conn)
        processor = RichContentProcessor(conn, config)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–≤–∞—Ä
        source_product = processor.recommendation_engine.data_collector.get_full_product_info(test_vendor_code)
        
        if not source_product:
            logger.error(f"‚ùå –¢–æ–≤–∞—Ä {test_vendor_code} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        logger.info(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–≤–∞—Ä:")
        logger.info(f"   - MEGA –∫–æ–ª–æ–¥–∫–∞: {source_product.mega_last}")
        logger.info(f"   - BEST –∫–æ–ª–æ–¥–∫–∞: {source_product.best_last}")
        logger.info(f"   - NEW –∫–æ–ª–æ–¥–∫–∞: {source_product.new_last}")
        logger.info(f"   - –ú–æ–¥–µ–ª—å: {source_product.model_name}")
        logger.info(f"   - WB SKU: {source_product.wb_sku}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = processor.recommendation_engine.data_collector.find_similar_products_candidates(source_product)
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}")
        
        # –û–±–æ–≥–∞—â–∞–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        enriched_candidates = processor.recommendation_engine.data_collector.enrich_with_punta_data(candidates)
        logger.info(f"üîó –û–±–æ–≥–∞—â–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(enriched_candidates)}")
        
        # –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –∫–æ–ª–æ–¥–∫–∞–º–∏
        matching_last_candidates = []
        for candidate in enriched_candidates:
            if candidate.mega_last == expected_mega_last:
                matching_last_candidates.append(candidate)
        
        logger.info(f"üéØ –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–µ–π MEGA –∫–æ–ª–æ–¥–∫–æ–π {expected_mega_last}: {len(matching_last_candidates)}")
        
        if matching_last_candidates:
            logger.info(f"\n=== –ê–ù–ê–õ–ò–ó –ö–ê–ù–î–ò–î–ê–¢–û–í –° –°–û–í–ü–ê–î–ê–Æ–©–ò–ú–ò –ö–û–õ–û–î–ö–ê–ú–ò ===")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–µ–π –∫–æ–ª–æ–¥–∫–æ–π
            for i, candidate in enumerate(matching_last_candidates[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5
                score = processor.recommendation_engine.calculate_similarity_score(source_product, candidate)
                details = processor.recommendation_engine.get_match_details(source_product, candidate)
                
                logger.info(f"\n{i}. –ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate.oz_vendor_code}")
                logger.info(f"   Score: {score:.1f}")
                logger.info(f"   MEGA –∫–æ–ª–æ–¥–∫–∞: {candidate.mega_last} ‚úì")
                logger.info(f"   –ú–æ–¥–µ–ª—å: {candidate.model_name}")
                logger.info(f"   –†–∞–∑–º–µ—Ä: {candidate.size}")
                logger.info(f"   –û—Å—Ç–∞—Ç–∫–∏: {candidate.stock_count}")
                logger.info(f"   –î–µ—Ç–∞–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                for detail in details:
                    logger.info(f"      - {detail}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        final_recommendations = processor.recommendation_engine.find_similar_products(test_vendor_code)
        
        logger.info(f"\n=== –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–¢–û–ü-8) ===")
        
        mega_last_in_final = 0
        for i, rec in enumerate(final_recommendations, 1):
            candidate = rec.product_info
            is_mega_match = candidate.mega_last == expected_mega_last
            if is_mega_match:
                mega_last_in_final += 1
            
            logger.info(f"{i}. {candidate.oz_vendor_code} | Score: {rec.score:.1f}")
            logger.info(f"   MEGA –∫–æ–ª–æ–¥–∫–∞: {candidate.mega_last} {'‚úì' if is_mega_match else '‚úó'}")
            logger.info(f"   –†–∞–∑–º–µ—Ä: {candidate.size} | –û—Å—Ç–∞—Ç–∫–∏: {candidate.stock_count}")
        
        logger.info(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   - –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–µ–π –∫–æ–ª–æ–¥–∫–æ–π: {len(matching_last_candidates)}")
        logger.info(f"   - –í —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö: {mega_last_in_final}")
        
        if len(matching_last_candidates) > 0 and mega_last_in_final == 0:
            logger.error(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ï—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å —Å–æ–≤–ø–∞–¥–∞—é—â–µ–π –∫–æ–ª–æ–¥–∫–æ–π, –Ω–æ –æ–Ω–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ —Ç–æ–ø-8!")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∫–æ–ª–æ–¥–∫–æ–π –∏ —Ö—É–¥—à—É—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            if matching_last_candidates and final_recommendations:
                best_matching = max(matching_last_candidates, 
                                  key=lambda c: processor.recommendation_engine.calculate_similarity_score(source_product, c))
                worst_final = final_recommendations[-1]
                
                best_score = processor.recommendation_engine.calculate_similarity_score(source_product, best_matching)
                worst_score = worst_final.score
                
                logger.info(f"\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
                logger.info(f"   –õ—É—á—à–∏–π —Å –∫–æ–ª–æ–¥–∫–æ–π: {best_matching.oz_vendor_code} | Score: {best_score:.1f}")
                logger.info(f"   –•—É–¥—à–∏–π –≤ —Ç–æ–ø-8: {worst_final.product_info.oz_vendor_code} | Score: {worst_score:.1f}")
                logger.info(f"   –†–∞–∑–Ω–∏—Ü–∞: {best_score - worst_score:.1f} –±–∞–ª–ª–æ–≤")
        
        elif mega_last_in_final > 0:
            logger.info(f"‚úÖ {mega_last_in_final} —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–µ–π –∫–æ–ª–æ–¥–∫–æ–π –ø–æ–ø–∞–ª–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        conn.close()
    
    logger.info("\nüèÅ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    test_detailed_scoring()

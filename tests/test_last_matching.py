#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–ª–æ–¥–∫–∞–º (last).
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–≤–∞—Ä 0562002434-—á–µ—Ä–Ω—ã–π-34 —Å –∫–æ–ª–æ–¥–∫–æ–π MEGA G0562000198.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import duckdb
from utils.rich_content_oz import RichContentProcessor
from utils.scoring_config_optimized import ScoringConfig
from utils.cross_marketplace_linker import CrossMarketplaceLinker
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_last_matching():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–ª–æ–¥–∫–∞–º"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "data/marketplace_data.db"
    if not os.path.exists(db_path):
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    conn = duckdb.connect(db_path)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Ç–æ–≤–∞—Ä
    test_vendor_code = "0562002434-—á–µ—Ä–Ω—ã–π-34"
    expected_mega_last = "G0562000198"
    
    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä: {test_vendor_code}")
    logger.info(f"üéØ –û–∂–∏–¥–∞–µ–º–∞—è MEGA –∫–æ–ª–æ–¥–∫–∞: {expected_mega_last}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    logger.info("\n=== 1. –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–û–ì–û –¢–û–í–ê–†–ê ===")
    
    query_source = """
    SELECT 
        ocp.oz_vendor_code,
        ocp.type,
        ocp.gender,
        ocp.oz_brand,
        ocp.russian_size,
        pt.mega_last,
        pt.best_last,
        pt.new_last,
        pt.model_name
    FROM oz_category_products ocp
    LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
    LEFT JOIN punta_table pt ON op.oz_sku = pt.wb_sku
    WHERE ocp.oz_vendor_code = ?
    """
    
    source_result = conn.execute(query_source, [test_vendor_code]).fetchone()
    
    if not source_result:
        logger.error(f"‚ùå –¢–æ–≤–∞—Ä {test_vendor_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    source_data = {
        'oz_vendor_code': source_result[0],
        'type': source_result[1], 
        'gender': source_result[2],
        'oz_brand': source_result[3],
        'size': source_result[4],
        'mega_last': source_result[5],
        'best_last': source_result[6],
        'new_last': source_result[7],
        'model_name': source_result[8]
    }
    
    logger.info(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω:")
    logger.info(f"   - –¢–∏–ø: {source_data['type']}")
    logger.info(f"   - –ü–æ–ª: {source_data['gender']}")
    logger.info(f"   - –ë—Ä–µ–Ω–¥: {source_data['oz_brand']}")
    logger.info(f"   - –†–∞–∑–º–µ—Ä: {source_data['size']}")
    logger.info(f"   - MEGA –∫–æ–ª–æ–¥–∫–∞: {source_data['mega_last']}")
    logger.info(f"   - BEST –∫–æ–ª–æ–¥–∫–∞: {source_data['best_last']}")
    logger.info(f"   - NEW –∫–æ–ª–æ–¥–∫–∞: {source_data['new_last']}")
    logger.info(f"   - –ú–æ–¥–µ–ª—å: {source_data['model_name']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π –∫–æ–ª–æ–¥–∫–µ
    if source_data['mega_last'] != expected_mega_last:
        logger.warning(f"‚ö†Ô∏è  MEGA –∫–æ–ª–æ–¥–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π: {source_data['mega_last']} != {expected_mega_last}")
    else:
        logger.info(f"‚úÖ MEGA –∫–æ–ª–æ–¥–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π: {expected_mega_last}")
    
    # 2. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–∞–∫–æ–π –∂–µ –∫–æ–ª–æ–¥–∫–æ–π
    logger.info("\n=== 2. –ü–û–ò–°–ö –¢–û–í–ê–†–û–í –° –¢–ê–ö–û–ô –ñ–ï –ö–û–õ–û–î–ö–û–ô ===")
    
    query_same_last = """
    SELECT 
        ocp.oz_vendor_code,
        ocp.type,
        ocp.gender, 
        ocp.oz_brand,
        ocp.russian_size,
        pt.mega_last,
        pt.best_last,
        pt.new_last,
        pt.model_name,
        ocp.stock_count
    FROM oz_category_products ocp
    LEFT JOIN oz_products op ON ocp.oz_vendor_code = op.oz_vendor_code
    LEFT JOIN punta_table pt ON op.oz_sku = pt.wb_sku
    WHERE pt.mega_last = ?
    AND ocp.type = ?
    AND ocp.gender = ?
    AND ocp.oz_brand = ?
    AND ocp.oz_vendor_code != ?
    ORDER BY ocp.stock_count DESC, ocp.size
    """
    
    same_last_results = conn.execute(query_same_last, [
        source_data['mega_last'],
        source_data['type'],
        source_data['gender'], 
        source_data['oz_brand'],
        test_vendor_code
    ]).fetchall()
    
    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–æ–ª–æ–¥–∫–æ–π {source_data['mega_last']}: {len(same_last_results)}")
    
    if same_last_results:
        logger.info("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–∞–∫–æ–π –∂–µ –∫–æ–ª–æ–¥–∫–æ–π:")
        for i, result in enumerate(same_last_results[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            logger.info(f"   {i:2d}. {result[0]} | –†–∞–∑–º–µ—Ä: {result[4]} | –û—Å—Ç–∞—Ç–∫–∏: {result[9]} | –ú–æ–¥–µ–ª—å: {result[8]}")
        
        if len(same_last_results) > 10:
            logger.info(f"   ... –∏ –µ—â–µ {len(same_last_results) - 10} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    logger.info("\n=== 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        config = ScoringConfig()
        linker = CrossMarketplaceLinker(conn)
        processor = RichContentProcessor(conn, config, linker)
        
        logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–ª–æ–¥–æ–∫:")
        logger.info(f"   - MEGA last bonus: {config.mega_last_bonus}")
        logger.info(f"   - BEST last bonus: {config.best_last_bonus}")
        logger.info(f"   - NEW last bonus: {config.new_last_bonus}")
        logger.info(f"   - No last penalty: {config.no_last_penalty}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = processor.recommendation_engine.find_similar_products(test_vendor_code)
        
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
        
        if recommendations:
            logger.info("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–ª–æ–¥–∫–∞–º:")
            
            mega_last_matches = 0
            best_last_matches = 0
            new_last_matches = 0
            no_last_matches = 0
            
            for i, rec in enumerate(recommendations[:8], 1):
                product = rec.product_info
                score = rec.score
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–æ–ª–æ–¥–∫–∏
                last_match_type = "–ù–ï–¢"
                if (source_data['mega_last'] and product.mega_last and 
                    source_data['mega_last'] == product.mega_last):
                    last_match_type = "MEGA"
                    mega_last_matches += 1
                elif (source_data['best_last'] and product.best_last and 
                      source_data['best_last'] == product.best_last):
                    last_match_type = "BEST"
                    best_last_matches += 1
                elif (source_data['new_last'] and product.new_last and 
                      source_data['new_last'] == product.new_last):
                    last_match_type = "NEW"
                    new_last_matches += 1
                else:
                    no_last_matches += 1
                
                logger.info(f"   {i:2d}. {product.oz_vendor_code} | Score: {score:.1f} | –ö–æ–ª–æ–¥–∫–∞: {last_match_type}")
                logger.info(f"       MEGA: {product.mega_last} | BEST: {product.best_last} | NEW: {product.new_last}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            logger.info(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–æ–ª–æ–¥–æ–∫:")
            logger.info(f"   - MEGA —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {mega_last_matches}")
            logger.info(f"   - BEST —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {best_last_matches}")
            logger.info(f"   - NEW —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {new_last_matches}")
            logger.info(f"   - –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {no_last_matches}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –∫–æ–ª–æ–¥–∫—É
            if no_last_matches > 0:
                logger.warning(f"‚ö†Ô∏è  {no_last_matches} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—É—á–∏–ª–∏ —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–æ–¥–∫–∏")
                logger.info(f"   –®—Ç—Ä–∞—Ñ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {int((1 - config.no_last_penalty) * 100)}%")
            
            if mega_last_matches == 0 and len(same_last_results) > 0:
                logger.error(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω–æ {len(same_last_results)} —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–∞–∫–æ–π –∂–µ MEGA –∫–æ–ª–æ–¥–∫–æ–π, –Ω–æ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–ø–∞–ª –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!")
            elif mega_last_matches > 0:
                logger.info(f"‚úÖ {mega_last_matches} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–º–µ—é—Ç —Å–æ–≤–ø–∞–¥–∞—é—â—É—é MEGA –∫–æ–ª–æ–¥–∫—É")
        
        else:
            logger.error("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        conn.close()
    
    logger.info("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    test_last_matching()

"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ RichContentGenerator.
"""

import pytest
import json
from utils.rich_content_oz import (
    RichContentGenerator, ProductInfo, Recommendation, 
    ScoringConfig, ProcessingStatus, RICH_CONTENT_VERSION
)


class TestRichContentGenerator:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ Rich Content JSON"""
    
    @pytest.fixture
    def generator(self, default_scoring_config):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ Rich Content"""
        return RichContentGenerator(default_scoring_config)
    
    @pytest.fixture
    def sample_recommendation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        product = ProductInfo(
            oz_vendor_code="REC-001",
            type="–°–∞–±–æ",
            gender="–ñ–µ–Ω—Å–∫–∏–π",
            oz_brand="TestBrand",
            russian_size="38",
            season="–õ–µ—Ç–æ",
            color="–±–µ–ª—ã–π",
            fastener_type="–ë–µ–∑ –∑–∞—Å—Ç—ë–∂–∫–∏",
            oz_fbo_stock=10,
            main_photo_url="https://example.com/photo.jpg"
        )
        
        return Recommendation(
            product_info=product,
            score=450.0,
            match_details="–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ",
            processing_status=ProcessingStatus.SUCCESS
        )
    
    def test_generate_rich_content_json_basic(self, generator, sample_recommendation):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Rich Content JSON"""
        recommendations = [sample_recommendation]
        
        json_string = generator.generate_rich_content_json(recommendations)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–Ω—ã–π JSON
        assert isinstance(json_string, str)
        data = json.loads(json_string)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert 'content' in data
        assert 'version' in data
        assert data['version'] == RICH_CONTENT_VERSION
        assert isinstance(data['content'], list)
        assert len(data['content']) > 0
    
    def test_generate_rich_content_carousel_format(self, generator, sample_recommendation):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = [sample_recommendation]
        
        json_string = generator.generate_rich_content_json(
            recommendations, 
            template_type="recommendations_carousel"
        )
        
        data = json.loads(json_string)
        content = data['content']
        
        # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–∞—Ä—É—Å–µ–ª—å
        assert len(content) == 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_widget = content[0]
        assert title_widget['widgetName'] == 'raText'
        assert 'üî• –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã' in title_widget['text']['content']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        carousel_widget = content[1]
        assert carousel_widget['widgetName'] == 'raShowcase'
        assert carousel_widget['type'] == 'roll'
        assert 'blocks' in carousel_widget
        assert len(carousel_widget['blocks']) == 1
    
    def test_generate_rich_content_grid_format(self, generator, sample_recommendations):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        json_string = generator.generate_rich_content_json(
            sample_recommendations[:4], 
            template_type="recommendations_grid"
        )
        
        data = json.loads(json_string)
        content = data['content']
        
        # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ç–∫–∏
        assert len(content) >= 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_widget = content[0]
        assert title_widget['widgetName'] == 'raText'
        assert 'üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã' in title_widget['text']['content']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ç–∫–∏
        grid_row = content[1]
        assert grid_row['widgetName'] == 'raColumns'
        assert 'columns' in grid_row
    
    def test_generate_rich_content_empty_recommendations(self, generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        json_string = generator.generate_rich_content_json([])
        
        data = json.loads(json_string)
        content = data['content']
        
        # –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        assert len(content) == 1
        text_widget = content[0]
        assert text_widget['widgetName'] == 'raText'
        assert '–Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π' in text_widget['text']['content']
    
    def test_generate_rich_content_unknown_template(self, generator, sample_recommendation):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞"""
        recommendations = [sample_recommendation]
        
        json_string = generator.generate_rich_content_json(
            recommendations, 
            template_type="unknown_template"
        )
        
        # –î–æ–ª–∂–µ–Ω fallback –∫ carousel
        data = json.loads(json_string)
        content = data['content']
        
        assert len(content) == 2
        carousel_widget = content[1]
        assert carousel_widget['widgetName'] == 'raShowcase'
    
    def test_create_product_block_structure(self, generator, sample_recommendation):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–ª–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞"""
        product_block = generator._create_product_block(sample_recommendation, 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        assert 'imgLink' in product_block
        assert 'img' in product_block
        assert 'title' in product_block
        assert 'subtitle' in product_block
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä
        assert product_block['imgLink'].startswith('https://www.ozon.ru/product/')
        assert 'REC-001' in product_block['imgLink']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = product_block['img']
        assert img['src'] == 'https://example.com/photo.jpg'
        assert img['alt'] == '–°–∞–±–æ TestBrand 38'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        assert product_block['title']['content'] == '–°–∞–±–æ TestBrand'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle = product_block['subtitle']['content']
        assert '–†–∞–∑–º–µ—Ä: 38' in subtitle
        assert '–í –Ω–∞–ª–∏—á–∏–∏: 10 —à—Ç.' in subtitle
        assert '‚≠ê 450' in subtitle
    
    def test_create_compact_product_block_structure(self, generator, sample_recommendation):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞"""
        compact_block = generator._create_compact_product_block(sample_recommendation)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert compact_block['widgetName'] == 'raCard'
        assert 'link' in compact_block
        assert 'img' in compact_block
        assert 'content' in compact_block
        assert 'style' in compact_block
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content = compact_block['content']
        assert content['title'] == '–°–∞–±–æ'
        assert content['subtitle'] == '–†–∞–∑–º–µ—Ä: 38'
        assert content['badge'] == '‚≠ê 450'
        assert content['description'] == '–í –Ω–∞–ª–∏—á–∏–∏: 10 —à—Ç.'
    
    def test_format_product_details(self, generator):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞"""
        product = ProductInfo(
            oz_vendor_code="TEST-001",
            russian_size="38",
            color="–±–µ–ª—ã–π",
            oz_fbo_stock=5
        )
        
        details = generator._format_product_details(product, 250.0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        assert '–†–∞–∑–º–µ—Ä: 38' in details
        assert '–¶–≤–µ—Ç: –±–µ–ª—ã–π' in details
        assert '–í –Ω–∞–ª–∏—á–∏–∏: 5 —à—Ç.' in details
        assert '‚≠ê 250' in details
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        assert ' ‚Ä¢ ' in details
    
    def test_format_product_details_partial_data(self, generator):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        product = ProductInfo(
            oz_vendor_code="TEST-001",
            russian_size="XL",
            color=None,  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–≤–µ—Ç
            oz_fbo_stock=0  # –ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤
        )
        
        details = generator._format_product_details(product, 100.0)
        
        # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        assert '–†–∞–∑–º–µ—Ä: XL' in details
        assert '–¶–≤–µ—Ç:' not in details
        assert '–í –Ω–∞–ª–∏—á–∏–∏:' not in details
        assert '‚≠ê 100' in details
    
    def test_generate_product_url(self, generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —Ç–æ–≤–∞—Ä–∞"""
        url = generator._generate_product_url("TEST-12345")
        
        assert url == "https://www.ozon.ru/product/TEST-12345/"
        assert url.startswith('https://www.ozon.ru/product/')
        assert url.endswith('/')
    
    def test_create_empty_content_structure(self, generator):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—É—Å—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        empty_json = generator._create_empty_content()
        
        data = json.loads(empty_json)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert 'content' in data
        assert 'version' in data
        assert data['version'] == RICH_CONTENT_VERSION
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content = data['content']
        assert len(content) == 1
        
        text_widget = content[0]
        assert text_widget['widgetName'] == 'raText'
        assert '–Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π' in text_widget['text']['content']
    
    def test_validate_rich_content_json_valid(self, generator, sample_recommendation):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ Rich Content JSON"""
        recommendations = [sample_recommendation]
        json_string = generator.generate_rich_content_json(recommendations)
        
        is_valid = generator.validate_rich_content_json(json_string)
        
        assert is_valid is True
    
    def test_validate_rich_content_json_invalid_json(self, generator):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON"""
        invalid_json = '{"content": [invalid json}'
        
        is_valid = generator.validate_rich_content_json(invalid_json)
        
        assert is_valid is False
    
    def test_validate_rich_content_json_missing_content(self, generator):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –±–µ–∑ –ø–æ–ª—è content"""
        json_without_content = json.dumps({
            "version": RICH_CONTENT_VERSION
        })
        
        is_valid = generator.validate_rich_content_json(json_without_content)
        
        assert is_valid is False
    
    def test_validate_rich_content_json_missing_version(self, generator):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –±–µ–∑ –ø–æ–ª—è version"""
        json_without_version = json.dumps({
            "content": []
        })
        
        is_valid = generator.validate_rich_content_json(json_without_version)
        
        assert is_valid is False
    
    def test_validate_rich_content_json_invalid_content_type(self, generator):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–∏–ø–æ–º content"""
        json_invalid_content = json.dumps({
            "content": "should be array",
            "version": RICH_CONTENT_VERSION
        })
        
        is_valid = generator.validate_rich_content_json(json_invalid_content)
        
        assert is_valid is False
    
    def test_validate_rich_content_json_invalid_widget_structure(self, generator):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –≤–∏–¥–∂–µ—Ç–∞"""
        json_invalid_widget = json.dumps({
            "content": [
                {
                    # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç widgetName
                    "text": {"content": "Test"}
                }
            ],
            "version": RICH_CONTENT_VERSION
        })
        
        is_valid = generator.validate_rich_content_json(json_invalid_widget)
        
        assert is_valid is False
    
    def test_carousel_max_items_limit(self, generator, sample_recommendations):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ä—É—Å–µ–ª–∏"""
        # –°–æ–∑–¥–∞–µ–º 10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        many_recommendations = sample_recommendations * 3  # 12 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
        json_string = generator.generate_rich_content_json(
            many_recommendations, 
            template_type="recommendations_carousel"
        )
        
        data = json.loads(json_string)
        carousel_widget = data['content'][1]
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º —Å—Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤, —Å–∫–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        expected_max = generator.config.max_recommendations
        assert len(carousel_widget['blocks']) == expected_max
    
    def test_grid_max_items_limit(self, generator, sample_recommendations):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ—Ç–∫–µ"""
        # –°–æ–∑–¥–∞–µ–º 10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        many_recommendations = sample_recommendations * 3  # 12 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
        json_string = generator.generate_rich_content_json(
            many_recommendations, 
            template_type="recommendations_grid"
        )
        
        data = json.loads(json_string)
        content = data['content']
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ 2 —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ)
        expected_max = generator.config.max_recommendations
        expected_rows = (expected_max + 1) // 2  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–ª—è –ø–∞—Ä —Ç–æ–≤–∞—Ä–æ–≤
        assert len(content) <= expected_rows + 1  # title + grid rows
    
    def test_error_handling_in_generation(self, generator):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        invalid_product = ProductInfo(oz_vendor_code=None)  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        invalid_recommendation = Recommendation(
            product_info=invalid_product,
            score=0,
            match_details=""
        )
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å empty content
        json_string = generator.generate_rich_content_json([invalid_recommendation])
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π JSON (–≤–æ–∑–º–æ–∂–Ω–æ empty content)
        data = json.loads(json_string)
        assert 'content' in data
        assert 'version' in data
    
    def test_json_string_format(self, generator, sample_recommendation):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã—Ö–æ–¥–Ω–æ–π JSON —Å—Ç—Ä–æ–∫–∏"""
        recommendations = [sample_recommendation]
        json_string = generator.generate_rich_content_json(recommendations)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON —Å–∂–∞—Ç—ã–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è compact separators)
        data = json.loads(json_string)
        compact_json = json.dumps(data, ensure_ascii=False, separators=(',', ':'))
        assert json_string == compact_json
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É (–¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã)
        assert '–ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã' in json_string
        assert 'TestBrand' in json_string 
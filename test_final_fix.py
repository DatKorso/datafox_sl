#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ WB —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
"""

import duckdb
import os
from utils.wb_recommendations import WBRecommendationProcessor, WBScoringConfig

def test_fixed_recommendations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    print(f"\nüöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê WB –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print("=" * 70)
    
    db_path = 'data/marketplace_data.db'
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    try:
        conn = duckdb.connect(db_path, read_only=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        config = WBScoringConfig.get_preset('balanced')
        processor = WBRecommendationProcessor(conn, config)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π SKU
        test_sku = "191813777"
        print(f"\nüéØ –¢–ï–°–¢–ò–†–£–ï–ú WB SKU: {test_sku}")
        print("-" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        engine = processor.recommendation_engine
        recommendations = engine.find_similar_wb_products(test_sku)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
        
        if recommendations:
            print(f"\n‚úÖ –£–°–ü–ï–•! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã:")
            print("-" * 50)
            
            for i, rec in enumerate(recommendations[:10], 1):
                print(f"{i:2d}. WB SKU: {rec.product_info.wb_sku}")
                print(f"    Score: {rec.score:.1f}")
                print(f"    Brand: {rec.product_info.wb_brand}")
                print(f"    Category: {rec.product_info.wb_category}")
                print(f"    Stock: {rec.product_info.wb_fbo_stock}")
                print(f"    Price: {rec.product_info.wb_full_price}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
                match_details = rec.match_details or ""
                if len(match_details) > 100:
                    match_details = match_details[:100] + "..."
                print(f"    Match: {match_details}")
                print()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            scores = [r.score for r in recommendations]
            print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   Score –¥–∏–∞–ø–∞–∑–æ–Ω: {min(scores):.1f} - {max(scores):.1f}")
            print(f"   –°—Ä–µ–¥–Ω–∏–π score: {sum(scores)/len(scores):.1f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
            source_info = processor.data_collector.get_wb_product_info(test_sku)
            if source_info:
                print(f"\nüîç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–°–¢–û–ß–ù–ò–ö–ï:")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {source_info.enrichment_source}")
                print(f"   –ö–∞—á–µ—Å—Ç–≤–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {source_info.get_enrichment_score():.2%}")
                print(f"   –ï—Å—Ç—å –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {source_info.has_enriched_data()}")
            
        else:
            print(f"\n‚ùå –ù–ï–£–î–ê–ß–ê: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            source_info = processor.data_collector.get_wb_product_info(test_sku)
            if source_info:
                print(f"   WB —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: ‚úÖ")
                print(f"   –ï—Å—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥—ã: {'‚úÖ' if source_info.wb_barcodes else '‚ùå'}")
                print(f"   –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {'‚úÖ' if source_info.has_enriched_data() else '‚ùå'}")
                print(f"   enriched_type: {source_info.enriched_type}")
                print(f"   enriched_gender: {source_info.enriched_gender}")
                print(f"   enriched_brand: {source_info.enriched_brand}")
            else:
                print(f"   WB —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: ‚ùå")
        
        conn.close()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("=" * 70)
        
        if recommendations:
            print("‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê! –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è WB SKU {test_sku}")
            print("   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.")
        else:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –†–ï–®–ï–ù–ê. –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_fixed_recommendations()
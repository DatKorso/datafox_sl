#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
"""

import duckdb
import os
from utils.wb_recommendations import WBRecommendationProcessor, WBScoringConfig

def test_table_enrichment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
    
    print(f"\nüîç –¢–ï–°–¢ –û–ë–û–ì–ê–©–ï–ù–ò–Ø –î–ê–ù–ù–´–• –í –ò–¢–û–ì–û–í–û–ô –¢–ê–ë–õ–ò–¶–ï")
    print("=" * 60)
    
    db_path = 'data/marketplace_data.db'
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    try:
        conn = duckdb.connect(db_path, read_only=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        config = WBScoringConfig.get_preset('balanced')
        processor = WBRecommendationProcessor(conn, config)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π SKU
        test_sku = "191813777"
        print(f"\nüéØ –¢–ï–°–¢–ò–†–£–ï–ú WB SKU: {test_sku}")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        engine = processor.recommendation_engine
        recommendations = engine.find_similar_wb_products(test_sku)
        
        if not recommendations:
            print("‚ùå –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –û–ë–û–ì–ê–©–ï–ù–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
        print("-" * 60)
        
        for i, rec in enumerate(recommendations[:5], 1):
            product = rec.product_info
            
            print(f"\n{i}. WB SKU: {product.wb_sku}")
            print(f"   Brand: {product.wb_brand}")
            print(f"   Category: {product.wb_category}")
            print(f"   Stock: {product.wb_fbo_stock}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            print(f"\n   üìà –û–ë–û–ì–ê–©–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
            print(f"   enriched_type: '{product.enriched_type}'")
            print(f"   enriched_gender: '{product.enriched_gender}'")
            print(f"   enriched_brand: '{product.enriched_brand}'")
            print(f"   enriched_season: '{product.enriched_season}'")
            print(f"   enriched_color: '{product.enriched_color}'")
            print(f"   enriched_material: '{product.enriched_material}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º punta –¥–∞–Ω–Ω—ã–µ
            print(f"\n   üîß PUNTA –î–ê–ù–ù–´–ï:")
            print(f"   material_short: '{product.punta_material_short}'")
            print(f"   mega_last: '{product.punta_mega_last}'")
            print(f"   best_last: '{product.punta_best_last}'")
            print(f"   new_last: '{product.punta_new_last}'")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            enrichment_score = product.get_enrichment_score()
            has_enriched = product.has_enriched_data()
            enrichment_source = product.enrichment_source
            
            print(f"\n   üìä –ö–ê–ß–ï–°–¢–í–û –û–ë–û–ì–ê–©–ï–ù–ò–Ø:")
            print(f"   has_enriched_data: {has_enriched}")
            print(f"   enrichment_score: {enrichment_score:.2%}")
            print(f"   enrichment_source: '{enrichment_source}'")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
            missing_fields = []
            if not product.enriched_type:
                missing_fields.append("enriched_type")
            if not product.enriched_gender:
                missing_fields.append("enriched_gender")
            if not product.enriched_season:
                missing_fields.append("enriched_season")
            if not product.enriched_color:
                missing_fields.append("enriched_color")
            
            if missing_fields:
                print(f"   ‚ùå –ü–£–°–¢–´–ï –ü–û–õ–Ø: {', '.join(missing_fields)}")
            else:
                print(f"   ‚úÖ –í–°–ï –û–ë–û–ì–ê–©–ï–ù–ù–´–ï –ü–û–õ–Ø –ó–ê–ü–û–õ–ù–ï–ù–´")
            
            print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
        print(f"\nüìã –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ò–¢–û–ì–û–í–û–ô –¢–ê–ë–õ–ò–¶–´:")
        print("-" * 60)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ batch_result
        from utils.wb_recommendations import WBBatchResult, WBProcessingResult, WBProcessingStatus
        
        batch_result = WBBatchResult(
            processed_items=[
                WBProcessingResult(
                    wb_sku=test_sku,
                    status=WBProcessingStatus.SUCCESS,
                    recommendations=recommendations[:3],  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
                    processing_time=1.0,
                    enrichment_info={}
                )
            ],
            success_count=1,
            error_count=0,
            total_processing_time=1.0
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        import sys
        sys.path.append('pages')
        from pages.16_üéØ_–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏_WB import create_recommendations_table
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        recommendations_df = create_recommendations_table(batch_result)
        
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(recommendations_df)} —Å—Ç—Ä–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        problem_columns = ["–¢–∏–ø", "–ü–æ–ª", "–°–µ–∑–æ–Ω", "–¶–≤–µ—Ç"]
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –°–¢–û–õ–ë–¶–û–í:")
        for col in problem_columns:
            if col in recommendations_df.columns:
                values = recommendations_df[col].tolist()
                empty_count = sum(1 for v in values if not v or str(v).strip() == '' or str(v) == 'None')
                print(f"   {col}: {len(values) - empty_count}/{len(values)} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
                non_empty = [v for v in values if v and str(v).strip() != '' and str(v) != 'None']
                if non_empty:
                    print(f"      –ü—Ä–∏–º–µ—Ä—ã: {non_empty[:3]}")
                else:
                    print(f"      ‚ùå –í–°–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ü–£–°–¢–´–ï!")
            else:
                print(f"   {col}: –°–¢–û–õ–ë–ï–¶ –ù–ï –ù–ê–ô–î–ï–ù!")
        
        conn.close()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑
        print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó:")
        print("=" * 60)
        
        all_empty = all(
            sum(1 for v in recommendations_df[col].tolist() 
                if not v or str(v).strip() == '' or str(v) == 'None') == len(recommendations_df)
            for col in problem_columns if col in recommendations_df.columns
        )
        
        if all_empty:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø—É—Å—Ç—ã–µ")
            print("   –ü—Ä–∏—á–∏–Ω–∞: –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –æ–±–æ–≥–∞—â–∞—é—Ç—Å—è Ozon –¥–∞–Ω–Ω—ã–º–∏")
        else:
            print("‚úÖ –°–¢–û–õ–ë–¶–´ –ó–ê–ü–û–õ–ù–Ø–Æ–¢–°–Ø –ö–û–†–†–ï–ö–¢–ù–û")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_table_enrichment()
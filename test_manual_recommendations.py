#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è WB —Ç–æ–≤–∞—Ä–æ–≤.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é ManualRecommendationsManager
—Å —Å–∏—Å—Ç–µ–º–æ–π WB —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

–ó–∞–ø—É—Å–∫: python test_manual_recommendations.py
"""

import os
import time
import duckdb
import logging
from utils.manual_recommendations_manager import ManualRecommendationsManager
from utils.wb_recommendations import WBRecommendationProcessor, WBScoringConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_manual_recommendations():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    print(f"\nüß™ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –†–£–ß–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_path = 'data/marketplace_data.db'
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = duckdb.connect(db_path, read_only=True)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º ManualRecommendationsManager
        print(f"\nüîß –®–ê–ì 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ManualRecommendationsManager")
        print("-" * 50)
        
        manager = ManualRecommendationsManager()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ CSV
        test_csv_content = """target_wb_sku,position_1,recommended_sku_1,position_2,recommended_sku_2
191813777,2,232108287,5,226120950
456456,1,789789,3,111222"""
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ CSV:")
        print(test_csv_content)
        
        success = manager.load_from_csv_string(test_csv_content)
        if success:
            stats = manager.get_statistics()
            print(f"‚úÖ CSV –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
            print(f"   üìä –¢–æ–≤–∞—Ä–æ–≤: {stats['total_targets']}")
            print(f"   üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {stats['total_recommendations']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for target_sku in manager.get_all_target_skus():
                recommendations = manager.get_manual_recommendations(target_sku)
                print(f"   üéØ {target_sku}: {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
                for pos, rec_sku in recommendations:
                    print(f"      ‚Üí –ü–æ–∑–∏—Ü–∏—è {pos}: {rec_sku}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV")
            return False
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å WBRecommendationProcessor
        print(f"\nüîß –®–ê–ì 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WBRecommendationProcessor")
        print("-" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        config = WBScoringConfig.get_preset('balanced')
        processor = WBRecommendationProcessor(conn, config, manager)
        
        print(f"‚úÖ WBRecommendationProcessor —Å–æ–∑–¥–∞–Ω —Å ManualRecommendationsManager")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º WB SKU
        test_sku = "191813777"  # –≠—Ç–æ—Ç SKU –µ—Å—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è WB SKU: {test_sku}")
        print("-" * 40)
        
        start_time = time.time()
        result = processor.process_single_wb_product(test_sku)
        processing_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result.status.value}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(result.recommendations)}")
        
        if result.success and result.recommendations:
            print(f"\nüìã –î–ï–¢–ê–õ–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
            print("-" * 40)
            
            manual_count = 0
            algorithmic_count = 0
            
            for i, rec in enumerate(result.recommendations, 1):
                rec_type = "üñêÔ∏è –†–£–ß–ù–ê–Ø" if rec.is_manual else "ü§ñ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è"
                position_info = f" (—Ç—Ä–µ–±—É–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è: {rec.manual_position})" if rec.is_manual else ""
                
                print(f"{i:2d}. {rec.product_info.wb_sku} | {rec_type}{position_info}")
                print(f"    Score: {rec.score:.1f}")
                print(f"    –ë—Ä–µ–Ω–¥: {rec.product_info.wb_brand}")
                print(f"    –î–µ—Ç–∞–ª–∏: {rec.match_details}")
                print()
                
                if rec.is_manual:
                    manual_count += 1
                else:
                    algorithmic_count += 1
            
            print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print("-" * 40)
            print(f"   üñêÔ∏è –†—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {manual_count}")
            print(f"   ü§ñ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {algorithmic_count}")
            print(f"   üìà –í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(result.recommendations)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            expected_manual = {2: "232108287", 5: "226120950"}  # –ò–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
            print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô –†–£–ß–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
            print("-" * 40)
            
            position_correct = True
            for expected_pos, expected_sku in expected_manual.items():
                if expected_pos <= len(result.recommendations):
                    actual_rec = result.recommendations[expected_pos - 1]  # 0-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                    if actual_rec.product_info.wb_sku == expected_sku and actual_rec.is_manual:
                        print(f"   ‚úÖ –ü–æ–∑–∏—Ü–∏—è {expected_pos}: {expected_sku} (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
                    else:
                        print(f"   ‚ùå –ü–æ–∑–∏—Ü–∏—è {expected_pos}: –æ–∂–∏–¥–∞–ª—Å—è {expected_sku}, –ø–æ–ª—É—á–µ–Ω {actual_rec.product_info.wb_sku}")
                        position_correct = False
                else:
                    print(f"   ‚ùå –ü–æ–∑–∏—Ü–∏—è {expected_pos}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
                    position_correct = False
            
            if position_correct:
                print(f"\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù!")
                print(f"   ‚úÖ ManualRecommendationsManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WBRecommendationProcessor —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   ‚úÖ –†—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö")
                print(f"   ‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Å—Ç–∞")
                
                return True
            else:
                print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –†—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö")
                return False
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {result.error_message}")
            return False
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        if 'conn' in locals():
            conn.close()

def test_example_csv_file():
    """–¢–µ—Å—Ç –ø—Ä–∏–º–µ—Ä–∞ CSV —Ñ–∞–π–ª–∞"""
    
    print(f"\nüß™ –¢–ï–°–¢ –ü–†–ò–ú–ï–†–ê CSV –§–ê–ô–õ–ê")
    print("=" * 60)
    
    example_file = "example_manual_recommendations.csv"
    
    if not os.path.exists(example_file):
        print(f"‚ùå –ü—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {example_file}")
        return False
    
    try:
        manager = ManualRecommendationsManager()
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(example_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {example_file}:")
        print(content)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç
        is_valid, message = manager.validate_csv_format(content)
        print(f"\nüìä –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞: {'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ' if is_valid else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        if is_valid:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            success = manager.load_from_csv_string(content)
            if success:
                stats = manager.get_statistics()
                print(f"\n‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:")
                print(f"   üìä –¢–æ–≤–∞—Ä–æ–≤: {stats['total_targets']}")
                print(f"   üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {stats['total_recommendations']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
                return False
        else:
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

if __name__ == "__main__":
    print(f"üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –†–£–ß–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print(f"–í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞
    test1_result = test_example_csv_file()
    
    # –¢–µ—Å—Ç 2: –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    test2_result = test_manual_recommendations()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print(f"   –¢–µ—Å—Ç –ø—Ä–∏–º–µ—Ä–∞ CSV: {'‚úÖ –ü—Ä–æ–π–¥–µ–Ω' if test1_result else '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω'}")
    print(f"   –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {'‚úÖ –ü—Ä–æ–π–¥–µ–Ω' if test2_result else '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω'}")
    
    if test1_result and test2_result:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        print(f"   –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä—É—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print(f"\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")